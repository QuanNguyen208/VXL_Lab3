
vxl_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f0  080026f0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080026f0  080026f0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026f0  080026f0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f4  080026f4  000126f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080026f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000001c  08002714  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002714  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008be0  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001920  00000000  00000000  00028c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002a548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002af38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016acd  00000000  00000000  0002b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b121  00000000  00000000  0004230d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823aa  00000000  00000000  0004d42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf7d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d4  00000000  00000000  000cf82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026b4 	.word	0x080026b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080026b4 	.word	0x080026b4

0800014c <isButton1Pressed>:
int TimeOutForNoKeyPress = 1000;
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000038 	.word	0x20000038

08000170 <fsm_run>:
int tempYELLOW = 0;
int tempGREEN = 0;
int dis1 = 0;
int dis2 = 0;

void fsm_run() {
 8000170:	b5b0      	push	{r4, r5, r7, lr}
 8000172:	af00      	add	r7, sp, #0
	switch (state) {
 8000174:	4ba4      	ldr	r3, [pc, #656]	; (8000408 <fsm_run+0x298>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b04      	cmp	r3, #4
 800017a:	f200 82df 	bhi.w	800073c <fsm_run+0x5cc>
 800017e:	a201      	add	r2, pc, #4	; (adr r2, 8000184 <fsm_run+0x14>)
 8000180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000184:	08000199 	.word	0x08000199
 8000188:	08000215 	.word	0x08000215
 800018c:	08000525 	.word	0x08000525
 8000190:	080005d7 	.word	0x080005d7
 8000194:	0800068b 	.word	0x0800068b
	case RESET:
		setTimer1(500);
 8000198:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800019c:	f001 f810 	bl	80011c0 <setTimer1>
		setTimer2(1000);
 80001a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a4:	f001 f826 	bl	80011f4 <setTimer2>

		tempRED = timeRED;
 80001a8:	4b98      	ldr	r3, [pc, #608]	; (800040c <fsm_run+0x29c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a98      	ldr	r2, [pc, #608]	; (8000410 <fsm_run+0x2a0>)
 80001ae:	6013      	str	r3, [r2, #0]
		tempYELLOW = timeYELLOW;
 80001b0:	4b98      	ldr	r3, [pc, #608]	; (8000414 <fsm_run+0x2a4>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a98      	ldr	r2, [pc, #608]	; (8000418 <fsm_run+0x2a8>)
 80001b6:	6013      	str	r3, [r2, #0]
		tempGREEN = timeGREEN;
 80001b8:	4b98      	ldr	r3, [pc, #608]	; (800041c <fsm_run+0x2ac>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a98      	ldr	r2, [pc, #608]	; (8000420 <fsm_run+0x2b0>)
 80001be:	6013      	str	r3, [r2, #0]

		counter1 = 0;
 80001c0:	4b98      	ldr	r3, [pc, #608]	; (8000424 <fsm_run+0x2b4>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
		counter2 = 0;
 80001c6:	4b98      	ldr	r3, [pc, #608]	; (8000428 <fsm_run+0x2b8>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	2110      	movs	r1, #16
 80001d0:	4896      	ldr	r0, [pc, #600]	; (800042c <fsm_run+0x2bc>)
 80001d2:	f001 fb8b 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80001d6:	2201      	movs	r2, #1
 80001d8:	2140      	movs	r1, #64	; 0x40
 80001da:	4894      	ldr	r0, [pc, #592]	; (800042c <fsm_run+0x2bc>)
 80001dc:	f001 fb86 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80001e0:	2201      	movs	r2, #1
 80001e2:	2120      	movs	r1, #32
 80001e4:	4891      	ldr	r0, [pc, #580]	; (800042c <fsm_run+0x2bc>)
 80001e6:	f001 fb81 	bl	80018ec <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80001ea:	2201      	movs	r2, #1
 80001ec:	2180      	movs	r1, #128	; 0x80
 80001ee:	488f      	ldr	r0, [pc, #572]	; (800042c <fsm_run+0x2bc>)
 80001f0:	f001 fb7c 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001fa:	488c      	ldr	r0, [pc, #560]	; (800042c <fsm_run+0x2bc>)
 80001fc:	f001 fb76 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000206:	4889      	ldr	r0, [pc, #548]	; (800042c <fsm_run+0x2bc>)
 8000208:	f001 fb70 	bl	80018ec <HAL_GPIO_WritePin>

		state = MODE_1;
 800020c:	4b7e      	ldr	r3, [pc, #504]	; (8000408 <fsm_run+0x298>)
 800020e:	2201      	movs	r2, #1
 8000210:	601a      	str	r2, [r3, #0]
		break;
 8000212:	e29c      	b.n	800074e <fsm_run+0x5de>
	case MODE_1:
		updateClockBuffer(dis1/10, dis1%10, dis2/10, dis2%10);
 8000214:	4b86      	ldr	r3, [pc, #536]	; (8000430 <fsm_run+0x2c0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a86      	ldr	r2, [pc, #536]	; (8000434 <fsm_run+0x2c4>)
 800021a:	fb82 1203 	smull	r1, r2, r2, r3
 800021e:	1092      	asrs	r2, r2, #2
 8000220:	17db      	asrs	r3, r3, #31
 8000222:	1ad4      	subs	r4, r2, r3
 8000224:	4b82      	ldr	r3, [pc, #520]	; (8000430 <fsm_run+0x2c0>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b82      	ldr	r3, [pc, #520]	; (8000434 <fsm_run+0x2c4>)
 800022a:	fb83 1302 	smull	r1, r3, r3, r2
 800022e:	1099      	asrs	r1, r3, #2
 8000230:	17d3      	asrs	r3, r2, #31
 8000232:	1ac9      	subs	r1, r1, r3
 8000234:	460b      	mov	r3, r1
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	440b      	add	r3, r1
 800023a:	005b      	lsls	r3, r3, #1
 800023c:	1ad1      	subs	r1, r2, r3
 800023e:	4b7e      	ldr	r3, [pc, #504]	; (8000438 <fsm_run+0x2c8>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a7c      	ldr	r2, [pc, #496]	; (8000434 <fsm_run+0x2c4>)
 8000244:	fb82 0203 	smull	r0, r2, r2, r3
 8000248:	1092      	asrs	r2, r2, #2
 800024a:	17db      	asrs	r3, r3, #31
 800024c:	1ad5      	subs	r5, r2, r3
 800024e:	4b7a      	ldr	r3, [pc, #488]	; (8000438 <fsm_run+0x2c8>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	4b78      	ldr	r3, [pc, #480]	; (8000434 <fsm_run+0x2c4>)
 8000254:	fb83 0302 	smull	r0, r3, r3, r2
 8000258:	1098      	asrs	r0, r3, #2
 800025a:	17d3      	asrs	r3, r2, #31
 800025c:	1ac0      	subs	r0, r0, r3
 800025e:	4603      	mov	r3, r0
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	4403      	add	r3, r0
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	1ad0      	subs	r0, r2, r3
 8000268:	4603      	mov	r3, r0
 800026a:	462a      	mov	r2, r5
 800026c:	4620      	mov	r0, r4
 800026e:	f000 fde7 	bl	8000e40 <updateClockBuffer>

		if(timer1_flag == 1){
 8000272:	4b72      	ldr	r3, [pc, #456]	; (800043c <fsm_run+0x2cc>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b01      	cmp	r3, #1
 8000278:	f040 8120 	bne.w	80004bc <fsm_run+0x34c>
			counter1++;
 800027c:	4b69      	ldr	r3, [pc, #420]	; (8000424 <fsm_run+0x2b4>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	3301      	adds	r3, #1
 8000282:	4a68      	ldr	r2, [pc, #416]	; (8000424 <fsm_run+0x2b4>)
 8000284:	6013      	str	r3, [r2, #0]
			counter2++;
 8000286:	4b68      	ldr	r3, [pc, #416]	; (8000428 <fsm_run+0x2b8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	3301      	adds	r3, #1
 800028c:	4a66      	ldr	r2, [pc, #408]	; (8000428 <fsm_run+0x2b8>)
 800028e:	6013      	str	r3, [r2, #0]

			if(counter1 <= timeRED){
 8000290:	4b64      	ldr	r3, [pc, #400]	; (8000424 <fsm_run+0x2b4>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	4b5d      	ldr	r3, [pc, #372]	; (800040c <fsm_run+0x29c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	429a      	cmp	r2, r3
 800029a:	dc16      	bgt.n	80002ca <fsm_run+0x15a>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	2110      	movs	r1, #16
 80002a0:	4862      	ldr	r0, [pc, #392]	; (800042c <fsm_run+0x2bc>)
 80002a2:	f001 fb23 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80002a6:	2201      	movs	r2, #1
 80002a8:	2120      	movs	r1, #32
 80002aa:	4860      	ldr	r0, [pc, #384]	; (800042c <fsm_run+0x2bc>)
 80002ac:	f001 fb1e 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80002b0:	2201      	movs	r2, #1
 80002b2:	2140      	movs	r1, #64	; 0x40
 80002b4:	485d      	ldr	r0, [pc, #372]	; (800042c <fsm_run+0x2bc>)
 80002b6:	f001 fb19 	bl	80018ec <HAL_GPIO_WritePin>

				dis1 = timeRED - counter1;
 80002ba:	4b54      	ldr	r3, [pc, #336]	; (800040c <fsm_run+0x29c>)
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	4b59      	ldr	r3, [pc, #356]	; (8000424 <fsm_run+0x2b4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	1ad3      	subs	r3, r2, r3
 80002c4:	4a5a      	ldr	r2, [pc, #360]	; (8000430 <fsm_run+0x2c0>)
 80002c6:	6013      	str	r3, [r2, #0]
 80002c8:	e04a      	b.n	8000360 <fsm_run+0x1f0>
			}
			else if(counter1 <= timeRED + timeGREEN){
 80002ca:	4b50      	ldr	r3, [pc, #320]	; (800040c <fsm_run+0x29c>)
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	4b53      	ldr	r3, [pc, #332]	; (800041c <fsm_run+0x2ac>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	441a      	add	r2, r3
 80002d4:	4b53      	ldr	r3, [pc, #332]	; (8000424 <fsm_run+0x2b4>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	429a      	cmp	r2, r3
 80002da:	db19      	blt.n	8000310 <fsm_run+0x1a0>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80002dc:	2201      	movs	r2, #1
 80002de:	2110      	movs	r1, #16
 80002e0:	4852      	ldr	r0, [pc, #328]	; (800042c <fsm_run+0x2bc>)
 80002e2:	f001 fb03 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80002e6:	2201      	movs	r2, #1
 80002e8:	2120      	movs	r1, #32
 80002ea:	4850      	ldr	r0, [pc, #320]	; (800042c <fsm_run+0x2bc>)
 80002ec:	f001 fafe 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2140      	movs	r1, #64	; 0x40
 80002f4:	484d      	ldr	r0, [pc, #308]	; (800042c <fsm_run+0x2bc>)
 80002f6:	f001 faf9 	bl	80018ec <HAL_GPIO_WritePin>

				dis1 = timeRED + timeGREEN - counter1;
 80002fa:	4b44      	ldr	r3, [pc, #272]	; (800040c <fsm_run+0x29c>)
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	4b47      	ldr	r3, [pc, #284]	; (800041c <fsm_run+0x2ac>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	441a      	add	r2, r3
 8000304:	4b47      	ldr	r3, [pc, #284]	; (8000424 <fsm_run+0x2b4>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	1ad3      	subs	r3, r2, r3
 800030a:	4a49      	ldr	r2, [pc, #292]	; (8000430 <fsm_run+0x2c0>)
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	e027      	b.n	8000360 <fsm_run+0x1f0>
			}
			else if(counter1 <= timeRED + timeYELLOW + timeGREEN){
 8000310:	4b3e      	ldr	r3, [pc, #248]	; (800040c <fsm_run+0x29c>)
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	4b3f      	ldr	r3, [pc, #252]	; (8000414 <fsm_run+0x2a4>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	441a      	add	r2, r3
 800031a:	4b40      	ldr	r3, [pc, #256]	; (800041c <fsm_run+0x2ac>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	441a      	add	r2, r3
 8000320:	4b40      	ldr	r3, [pc, #256]	; (8000424 <fsm_run+0x2b4>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	429a      	cmp	r2, r3
 8000326:	db1b      	blt.n	8000360 <fsm_run+0x1f0>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000328:	2201      	movs	r2, #1
 800032a:	2110      	movs	r1, #16
 800032c:	483f      	ldr	r0, [pc, #252]	; (800042c <fsm_run+0x2bc>)
 800032e:	f001 fadd 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2120      	movs	r1, #32
 8000336:	483d      	ldr	r0, [pc, #244]	; (800042c <fsm_run+0x2bc>)
 8000338:	f001 fad8 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800033c:	2201      	movs	r2, #1
 800033e:	2140      	movs	r1, #64	; 0x40
 8000340:	483a      	ldr	r0, [pc, #232]	; (800042c <fsm_run+0x2bc>)
 8000342:	f001 fad3 	bl	80018ec <HAL_GPIO_WritePin>

				dis1 = timeRED + timeYELLOW + timeGREEN - counter1;
 8000346:	4b31      	ldr	r3, [pc, #196]	; (800040c <fsm_run+0x29c>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	4b32      	ldr	r3, [pc, #200]	; (8000414 <fsm_run+0x2a4>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	441a      	add	r2, r3
 8000350:	4b32      	ldr	r3, [pc, #200]	; (800041c <fsm_run+0x2ac>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	441a      	add	r2, r3
 8000356:	4b33      	ldr	r3, [pc, #204]	; (8000424 <fsm_run+0x2b4>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	1ad3      	subs	r3, r2, r3
 800035c:	4a34      	ldr	r2, [pc, #208]	; (8000430 <fsm_run+0x2c0>)
 800035e:	6013      	str	r3, [r2, #0]
			}
			if(counter1 >= timeRED + timeYELLOW + timeGREEN) counter1 = -1;
 8000360:	4b2a      	ldr	r3, [pc, #168]	; (800040c <fsm_run+0x29c>)
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <fsm_run+0x2a4>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	441a      	add	r2, r3
 800036a:	4b2c      	ldr	r3, [pc, #176]	; (800041c <fsm_run+0x2ac>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	441a      	add	r2, r3
 8000370:	4b2c      	ldr	r3, [pc, #176]	; (8000424 <fsm_run+0x2b4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	429a      	cmp	r2, r3
 8000376:	dc03      	bgt.n	8000380 <fsm_run+0x210>
 8000378:	4b2a      	ldr	r3, [pc, #168]	; (8000424 <fsm_run+0x2b4>)
 800037a:	f04f 32ff 	mov.w	r2, #4294967295
 800037e:	601a      	str	r2, [r3, #0]

			if(counter2 <= timeGREEN){
 8000380:	4b29      	ldr	r3, [pc, #164]	; (8000428 <fsm_run+0x2b8>)
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	4b25      	ldr	r3, [pc, #148]	; (800041c <fsm_run+0x2ac>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	429a      	cmp	r2, r3
 800038a:	dc18      	bgt.n	80003be <fsm_run+0x24e>

				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2180      	movs	r1, #128	; 0x80
 8000390:	4826      	ldr	r0, [pc, #152]	; (800042c <fsm_run+0x2bc>)
 8000392:	f001 faab 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039c:	4823      	ldr	r0, [pc, #140]	; (800042c <fsm_run+0x2bc>)
 800039e:	f001 faa5 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a8:	4820      	ldr	r0, [pc, #128]	; (800042c <fsm_run+0x2bc>)
 80003aa:	f001 fa9f 	bl	80018ec <HAL_GPIO_WritePin>

				dis2 = timeGREEN - counter2;
 80003ae:	4b1b      	ldr	r3, [pc, #108]	; (800041c <fsm_run+0x2ac>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	; (8000428 <fsm_run+0x2b8>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	1ad3      	subs	r3, r2, r3
 80003b8:	4a1f      	ldr	r2, [pc, #124]	; (8000438 <fsm_run+0x2c8>)
 80003ba:	6013      	str	r3, [r2, #0]
 80003bc:	e06a      	b.n	8000494 <fsm_run+0x324>
			}
			else if(counter2 <= timeGREEN + timeYELLOW){
 80003be:	4b17      	ldr	r3, [pc, #92]	; (800041c <fsm_run+0x2ac>)
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <fsm_run+0x2a4>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	441a      	add	r2, r3
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <fsm_run+0x2b8>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	db37      	blt.n	8000440 <fsm_run+0x2d0>

				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80003d0:	2201      	movs	r2, #1
 80003d2:	2180      	movs	r1, #128	; 0x80
 80003d4:	4815      	ldr	r0, [pc, #84]	; (800042c <fsm_run+0x2bc>)
 80003d6:	f001 fa89 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e0:	4812      	ldr	r0, [pc, #72]	; (800042c <fsm_run+0x2bc>)
 80003e2:	f001 fa83 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ec:	480f      	ldr	r0, [pc, #60]	; (800042c <fsm_run+0x2bc>)
 80003ee:	f001 fa7d 	bl	80018ec <HAL_GPIO_WritePin>

				dis2 = timeGREEN + timeYELLOW - counter2;
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <fsm_run+0x2ac>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <fsm_run+0x2a4>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	441a      	add	r2, r3
 80003fc:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <fsm_run+0x2b8>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <fsm_run+0x2c8>)
 8000404:	6013      	str	r3, [r2, #0]
 8000406:	e045      	b.n	8000494 <fsm_run+0x324>
 8000408:	20000058 	.word	0x20000058
 800040c:	20000000 	.word	0x20000000
 8000410:	20000044 	.word	0x20000044
 8000414:	20000008 	.word	0x20000008
 8000418:	20000048 	.word	0x20000048
 800041c:	20000004 	.word	0x20000004
 8000420:	2000004c 	.word	0x2000004c
 8000424:	2000003c 	.word	0x2000003c
 8000428:	20000040 	.word	0x20000040
 800042c:	40010800 	.word	0x40010800
 8000430:	20000050 	.word	0x20000050
 8000434:	66666667 	.word	0x66666667
 8000438:	20000054 	.word	0x20000054
 800043c:	20000078 	.word	0x20000078
			}
			else if(counter2 <= timeRED + timeYELLOW + timeGREEN){
 8000440:	4bc4      	ldr	r3, [pc, #784]	; (8000754 <fsm_run+0x5e4>)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	4bc4      	ldr	r3, [pc, #784]	; (8000758 <fsm_run+0x5e8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	441a      	add	r2, r3
 800044a:	4bc4      	ldr	r3, [pc, #784]	; (800075c <fsm_run+0x5ec>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	441a      	add	r2, r3
 8000450:	4bc3      	ldr	r3, [pc, #780]	; (8000760 <fsm_run+0x5f0>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	429a      	cmp	r2, r3
 8000456:	db1d      	blt.n	8000494 <fsm_run+0x324>

				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2180      	movs	r1, #128	; 0x80
 800045c:	48c1      	ldr	r0, [pc, #772]	; (8000764 <fsm_run+0x5f4>)
 800045e:	f001 fa45 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000462:	2201      	movs	r2, #1
 8000464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000468:	48be      	ldr	r0, [pc, #760]	; (8000764 <fsm_run+0x5f4>)
 800046a:	f001 fa3f 	bl	80018ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800046e:	2201      	movs	r2, #1
 8000470:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000474:	48bb      	ldr	r0, [pc, #748]	; (8000764 <fsm_run+0x5f4>)
 8000476:	f001 fa39 	bl	80018ec <HAL_GPIO_WritePin>

				dis2 = timeRED + timeYELLOW + timeGREEN - counter2;
 800047a:	4bb6      	ldr	r3, [pc, #728]	; (8000754 <fsm_run+0x5e4>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	4bb6      	ldr	r3, [pc, #728]	; (8000758 <fsm_run+0x5e8>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	441a      	add	r2, r3
 8000484:	4bb5      	ldr	r3, [pc, #724]	; (800075c <fsm_run+0x5ec>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	441a      	add	r2, r3
 800048a:	4bb5      	ldr	r3, [pc, #724]	; (8000760 <fsm_run+0x5f0>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	1ad3      	subs	r3, r2, r3
 8000490:	4ab5      	ldr	r2, [pc, #724]	; (8000768 <fsm_run+0x5f8>)
 8000492:	6013      	str	r3, [r2, #0]
			}
			if(counter2 >= timeRED + timeYELLOW + timeGREEN) counter2 = -1;
 8000494:	4baf      	ldr	r3, [pc, #700]	; (8000754 <fsm_run+0x5e4>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	4baf      	ldr	r3, [pc, #700]	; (8000758 <fsm_run+0x5e8>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	441a      	add	r2, r3
 800049e:	4baf      	ldr	r3, [pc, #700]	; (800075c <fsm_run+0x5ec>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	441a      	add	r2, r3
 80004a4:	4bae      	ldr	r3, [pc, #696]	; (8000760 <fsm_run+0x5f0>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	dc03      	bgt.n	80004b4 <fsm_run+0x344>
 80004ac:	4bac      	ldr	r3, [pc, #688]	; (8000760 <fsm_run+0x5f0>)
 80004ae:	f04f 32ff 	mov.w	r2, #4294967295
 80004b2:	601a      	str	r2, [r3, #0]

			setTimer1(1000);
 80004b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b8:	f000 fe82 	bl	80011c0 <setTimer1>
		}



		if (isButton1Pressed() == 1) {
 80004bc:	f7ff fe46 	bl	800014c <isButton1Pressed>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	f040 813c 	bne.w	8000740 <fsm_run+0x5d0>
			setTimer2(500);
 80004c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004cc:	f000 fe92 	bl	80011f4 <setTimer2>

			counter1 = 0;
 80004d0:	4ba6      	ldr	r3, [pc, #664]	; (800076c <fsm_run+0x5fc>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
			counter2 = 0;
 80004d6:	4ba2      	ldr	r3, [pc, #648]	; (8000760 <fsm_run+0x5f0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]

			state = MODE_2;
 80004dc:	4ba4      	ldr	r3, [pc, #656]	; (8000770 <fsm_run+0x600>)
 80004de:	2202      	movs	r2, #2
 80004e0:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	2110      	movs	r1, #16
 80004e6:	489f      	ldr	r0, [pc, #636]	; (8000764 <fsm_run+0x5f4>)
 80004e8:	f001 fa00 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2180      	movs	r1, #128	; 0x80
 80004f0:	489c      	ldr	r0, [pc, #624]	; (8000764 <fsm_run+0x5f4>)
 80004f2:	f001 f9fb 	bl	80018ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80004f6:	2201      	movs	r2, #1
 80004f8:	2120      	movs	r1, #32
 80004fa:	489a      	ldr	r0, [pc, #616]	; (8000764 <fsm_run+0x5f4>)
 80004fc:	f001 f9f6 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000506:	4897      	ldr	r0, [pc, #604]	; (8000764 <fsm_run+0x5f4>)
 8000508:	f001 f9f0 	bl	80018ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	2140      	movs	r1, #64	; 0x40
 8000510:	4894      	ldr	r0, [pc, #592]	; (8000764 <fsm_run+0x5f4>)
 8000512:	f001 f9eb 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051c:	4891      	ldr	r0, [pc, #580]	; (8000764 <fsm_run+0x5f4>)
 800051e:	f001 f9e5 	bl	80018ec <HAL_GPIO_WritePin>
		}
		break;
 8000522:	e10d      	b.n	8000740 <fsm_run+0x5d0>
	case MODE_2:
		updateClockBuffer(0, 2, tempRED/10, tempRED%10);
 8000524:	4b93      	ldr	r3, [pc, #588]	; (8000774 <fsm_run+0x604>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a93      	ldr	r2, [pc, #588]	; (8000778 <fsm_run+0x608>)
 800052a:	fb82 1203 	smull	r1, r2, r2, r3
 800052e:	1092      	asrs	r2, r2, #2
 8000530:	17db      	asrs	r3, r3, #31
 8000532:	1ad0      	subs	r0, r2, r3
 8000534:	4b8f      	ldr	r3, [pc, #572]	; (8000774 <fsm_run+0x604>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b8f      	ldr	r3, [pc, #572]	; (8000778 <fsm_run+0x608>)
 800053a:	fb83 1302 	smull	r1, r3, r3, r2
 800053e:	1099      	asrs	r1, r3, #2
 8000540:	17d3      	asrs	r3, r2, #31
 8000542:	1ac9      	subs	r1, r1, r3
 8000544:	460b      	mov	r3, r1
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	440b      	add	r3, r1
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	1ad1      	subs	r1, r2, r3
 800054e:	460b      	mov	r3, r1
 8000550:	4602      	mov	r2, r0
 8000552:	2102      	movs	r1, #2
 8000554:	2000      	movs	r0, #0
 8000556:	f000 fc73 	bl	8000e40 <updateClockBuffer>

		if (timer2_flag == 1) {
 800055a:	4b88      	ldr	r3, [pc, #544]	; (800077c <fsm_run+0x60c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d10b      	bne.n	800057a <fsm_run+0x40a>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000562:	2110      	movs	r1, #16
 8000564:	487f      	ldr	r0, [pc, #508]	; (8000764 <fsm_run+0x5f4>)
 8000566:	f001 f9d9 	bl	800191c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	487d      	ldr	r0, [pc, #500]	; (8000764 <fsm_run+0x5f4>)
 800056e:	f001 f9d5 	bl	800191c <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000572:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000576:	f000 fe3d 	bl	80011f4 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 800057a:	f7ff fde7 	bl	800014c <isButton1Pressed>
 800057e:	4603      	mov	r3, r0
 8000580:	2b01      	cmp	r3, #1
 8000582:	f040 80df 	bne.w	8000744 <fsm_run+0x5d4>
			setTimer2(500);
 8000586:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058a:	f000 fe33 	bl	80011f4 <setTimer2>

			state = MODE_3;
 800058e:	4b78      	ldr	r3, [pc, #480]	; (8000770 <fsm_run+0x600>)
 8000590:	2203      	movs	r2, #3
 8000592:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2110      	movs	r1, #16
 8000598:	4872      	ldr	r0, [pc, #456]	; (8000764 <fsm_run+0x5f4>)
 800059a:	f001 f9a7 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	4870      	ldr	r0, [pc, #448]	; (8000764 <fsm_run+0x5f4>)
 80005a4:	f001 f9a2 	bl	80018ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2120      	movs	r1, #32
 80005ac:	486d      	ldr	r0, [pc, #436]	; (8000764 <fsm_run+0x5f4>)
 80005ae:	f001 f99d 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b8:	486a      	ldr	r0, [pc, #424]	; (8000764 <fsm_run+0x5f4>)
 80005ba:	f001 f997 	bl	80018ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2140      	movs	r1, #64	; 0x40
 80005c2:	4868      	ldr	r0, [pc, #416]	; (8000764 <fsm_run+0x5f4>)
 80005c4:	f001 f992 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ce:	4865      	ldr	r0, [pc, #404]	; (8000764 <fsm_run+0x5f4>)
 80005d0:	f001 f98c 	bl	80018ec <HAL_GPIO_WritePin>
		}

		break;
 80005d4:	e0b6      	b.n	8000744 <fsm_run+0x5d4>
	case MODE_3:
		updateClockBuffer(0, 3, tempYELLOW/10, tempYELLOW%10);
 80005d6:	4b6a      	ldr	r3, [pc, #424]	; (8000780 <fsm_run+0x610>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a67      	ldr	r2, [pc, #412]	; (8000778 <fsm_run+0x608>)
 80005dc:	fb82 1203 	smull	r1, r2, r2, r3
 80005e0:	1092      	asrs	r2, r2, #2
 80005e2:	17db      	asrs	r3, r3, #31
 80005e4:	1ad0      	subs	r0, r2, r3
 80005e6:	4b66      	ldr	r3, [pc, #408]	; (8000780 <fsm_run+0x610>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b63      	ldr	r3, [pc, #396]	; (8000778 <fsm_run+0x608>)
 80005ec:	fb83 1302 	smull	r1, r3, r3, r2
 80005f0:	1099      	asrs	r1, r3, #2
 80005f2:	17d3      	asrs	r3, r2, #31
 80005f4:	1ac9      	subs	r1, r1, r3
 80005f6:	460b      	mov	r3, r1
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	440b      	add	r3, r1
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	1ad1      	subs	r1, r2, r3
 8000600:	460b      	mov	r3, r1
 8000602:	4602      	mov	r2, r0
 8000604:	2103      	movs	r1, #3
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fc1a 	bl	8000e40 <updateClockBuffer>

		if (timer2_flag == 1) {
 800060c:	4b5b      	ldr	r3, [pc, #364]	; (800077c <fsm_run+0x60c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d10c      	bne.n	800062e <fsm_run+0x4be>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000614:	2120      	movs	r1, #32
 8000616:	4853      	ldr	r0, [pc, #332]	; (8000764 <fsm_run+0x5f4>)
 8000618:	f001 f980 	bl	800191c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin);
 800061c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000620:	4850      	ldr	r0, [pc, #320]	; (8000764 <fsm_run+0x5f4>)
 8000622:	f001 f97b 	bl	800191c <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800062a:	f000 fde3 	bl	80011f4 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 800062e:	f7ff fd8d 	bl	800014c <isButton1Pressed>
 8000632:	4603      	mov	r3, r0
 8000634:	2b01      	cmp	r3, #1
 8000636:	f040 8087 	bne.w	8000748 <fsm_run+0x5d8>
			setTimer2(500);
 800063a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800063e:	f000 fdd9 	bl	80011f4 <setTimer2>

			state = MODE_4;
 8000642:	4b4b      	ldr	r3, [pc, #300]	; (8000770 <fsm_run+0x600>)
 8000644:	2204      	movs	r2, #4
 8000646:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2110      	movs	r1, #16
 800064c:	4845      	ldr	r0, [pc, #276]	; (8000764 <fsm_run+0x5f4>)
 800064e:	f001 f94d 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	4843      	ldr	r0, [pc, #268]	; (8000764 <fsm_run+0x5f4>)
 8000658:	f001 f948 	bl	80018ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2120      	movs	r1, #32
 8000660:	4840      	ldr	r0, [pc, #256]	; (8000764 <fsm_run+0x5f4>)
 8000662:	f001 f943 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	483d      	ldr	r0, [pc, #244]	; (8000764 <fsm_run+0x5f4>)
 800066e:	f001 f93d 	bl	80018ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	2140      	movs	r1, #64	; 0x40
 8000676:	483b      	ldr	r0, [pc, #236]	; (8000764 <fsm_run+0x5f4>)
 8000678:	f001 f938 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000682:	4838      	ldr	r0, [pc, #224]	; (8000764 <fsm_run+0x5f4>)
 8000684:	f001 f932 	bl	80018ec <HAL_GPIO_WritePin>
		}

		break;
 8000688:	e05e      	b.n	8000748 <fsm_run+0x5d8>
	case MODE_4:
		updateClockBuffer(0, 4, tempGREEN/10, tempGREEN%10);
 800068a:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <fsm_run+0x614>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a3a      	ldr	r2, [pc, #232]	; (8000778 <fsm_run+0x608>)
 8000690:	fb82 1203 	smull	r1, r2, r2, r3
 8000694:	1092      	asrs	r2, r2, #2
 8000696:	17db      	asrs	r3, r3, #31
 8000698:	1ad0      	subs	r0, r2, r3
 800069a:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <fsm_run+0x614>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	4b36      	ldr	r3, [pc, #216]	; (8000778 <fsm_run+0x608>)
 80006a0:	fb83 1302 	smull	r1, r3, r3, r2
 80006a4:	1099      	asrs	r1, r3, #2
 80006a6:	17d3      	asrs	r3, r2, #31
 80006a8:	1ac9      	subs	r1, r1, r3
 80006aa:	460b      	mov	r3, r1
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	440b      	add	r3, r1
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	1ad1      	subs	r1, r2, r3
 80006b4:	460b      	mov	r3, r1
 80006b6:	4602      	mov	r2, r0
 80006b8:	2104      	movs	r1, #4
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 fbc0 	bl	8000e40 <updateClockBuffer>

		if (timer2_flag == 1) {
 80006c0:	4b2e      	ldr	r3, [pc, #184]	; (800077c <fsm_run+0x60c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d10c      	bne.n	80006e2 <fsm_run+0x572>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80006c8:	2140      	movs	r1, #64	; 0x40
 80006ca:	4826      	ldr	r0, [pc, #152]	; (8000764 <fsm_run+0x5f4>)
 80006cc:	f001 f926 	bl	800191c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
 80006d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d4:	4823      	ldr	r0, [pc, #140]	; (8000764 <fsm_run+0x5f4>)
 80006d6:	f001 f921 	bl	800191c <HAL_GPIO_TogglePin>
			setTimer2(500);
 80006da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006de:	f000 fd89 	bl	80011f4 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 80006e2:	f7ff fd33 	bl	800014c <isButton1Pressed>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d12f      	bne.n	800074c <fsm_run+0x5dc>
			setTimer2(500);
 80006ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f0:	f000 fd80 	bl	80011f4 <setTimer2>

			state = RESET;
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <fsm_run+0x600>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2110      	movs	r1, #16
 80006fe:	4819      	ldr	r0, [pc, #100]	; (8000764 <fsm_run+0x5f4>)
 8000700:	f001 f8f4 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	4816      	ldr	r0, [pc, #88]	; (8000764 <fsm_run+0x5f4>)
 800070a:	f001 f8ef 	bl	80018ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	2120      	movs	r1, #32
 8000712:	4814      	ldr	r0, [pc, #80]	; (8000764 <fsm_run+0x5f4>)
 8000714:	f001 f8ea 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071e:	4811      	ldr	r0, [pc, #68]	; (8000764 <fsm_run+0x5f4>)
 8000720:	f001 f8e4 	bl	80018ec <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2140      	movs	r1, #64	; 0x40
 8000728:	480e      	ldr	r0, [pc, #56]	; (8000764 <fsm_run+0x5f4>)
 800072a:	f001 f8df 	bl	80018ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000734:	480b      	ldr	r0, [pc, #44]	; (8000764 <fsm_run+0x5f4>)
 8000736:	f001 f8d9 	bl	80018ec <HAL_GPIO_WritePin>
		}


		break;
 800073a:	e007      	b.n	800074c <fsm_run+0x5dc>
	default:
		break;
 800073c:	bf00      	nop
 800073e:	e006      	b.n	800074e <fsm_run+0x5de>
		break;
 8000740:	bf00      	nop
 8000742:	e004      	b.n	800074e <fsm_run+0x5de>
		break;
 8000744:	bf00      	nop
 8000746:	e002      	b.n	800074e <fsm_run+0x5de>
		break;
 8000748:	bf00      	nop
 800074a:	e000      	b.n	800074e <fsm_run+0x5de>
		break;
 800074c:	bf00      	nop
	}
}
 800074e:	bf00      	nop
 8000750:	bdb0      	pop	{r4, r5, r7, pc}
 8000752:	bf00      	nop
 8000754:	20000000 	.word	0x20000000
 8000758:	20000008 	.word	0x20000008
 800075c:	20000004 	.word	0x20000004
 8000760:	20000040 	.word	0x20000040
 8000764:	40010800 	.word	0x40010800
 8000768:	20000054 	.word	0x20000054
 800076c:	2000003c 	.word	0x2000003c
 8000770:	20000058 	.word	0x20000058
 8000774:	20000044 	.word	0x20000044
 8000778:	66666667 	.word	0x66666667
 800077c:	20000080 	.word	0x20000080
 8000780:	20000048 	.word	0x20000048
 8000784:	2000004c 	.word	0x2000004c

08000788 <display7SEG>:
 *      Author: Admin
 */

#include "global.h"

void display7SEG(int num){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b09      	cmp	r3, #9
 8000794:	f200 8180 	bhi.w	8000a98 <display7SEG+0x310>
 8000798:	a201      	add	r2, pc, #4	; (adr r2, 80007a0 <display7SEG+0x18>)
 800079a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079e:	bf00      	nop
 80007a0:	080007c9 	.word	0x080007c9
 80007a4:	08000811 	.word	0x08000811
 80007a8:	08000859 	.word	0x08000859
 80007ac:	080008a1 	.word	0x080008a1
 80007b0:	080008e9 	.word	0x080008e9
 80007b4:	08000931 	.word	0x08000931
 80007b8:	08000979 	.word	0x08000979
 80007bc:	080009c1 	.word	0x080009c1
 80007c0:	08000a09 	.word	0x08000a09
 80007c4:	08000a51 	.word	0x08000a51
	switch(num){
	case 0:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 80007c8:	2200      	movs	r2, #0
 80007ca:	2101      	movs	r1, #1
 80007cc:	48b5      	ldr	r0, [pc, #724]	; (8000aa4 <display7SEG+0x31c>)
 80007ce:	f001 f88d 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 80007d2:	2200      	movs	r2, #0
 80007d4:	2102      	movs	r1, #2
 80007d6:	48b3      	ldr	r0, [pc, #716]	; (8000aa4 <display7SEG+0x31c>)
 80007d8:	f001 f888 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80007dc:	2200      	movs	r2, #0
 80007de:	2104      	movs	r1, #4
 80007e0:	48b0      	ldr	r0, [pc, #704]	; (8000aa4 <display7SEG+0x31c>)
 80007e2:	f001 f883 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 80007e6:	2200      	movs	r2, #0
 80007e8:	2108      	movs	r1, #8
 80007ea:	48ae      	ldr	r0, [pc, #696]	; (8000aa4 <display7SEG+0x31c>)
 80007ec:	f001 f87e 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 80007f0:	2200      	movs	r2, #0
 80007f2:	2110      	movs	r1, #16
 80007f4:	48ab      	ldr	r0, [pc, #684]	; (8000aa4 <display7SEG+0x31c>)
 80007f6:	f001 f879 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	48a9      	ldr	r0, [pc, #676]	; (8000aa4 <display7SEG+0x31c>)
 8000800:	f001 f874 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000804:	2201      	movs	r2, #1
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	48a6      	ldr	r0, [pc, #664]	; (8000aa4 <display7SEG+0x31c>)
 800080a:	f001 f86f 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 800080e:	e144      	b.n	8000a9a <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 8000810:	2201      	movs	r2, #1
 8000812:	2101      	movs	r1, #1
 8000814:	48a3      	ldr	r0, [pc, #652]	; (8000aa4 <display7SEG+0x31c>)
 8000816:	f001 f869 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 800081a:	2200      	movs	r2, #0
 800081c:	2102      	movs	r1, #2
 800081e:	48a1      	ldr	r0, [pc, #644]	; (8000aa4 <display7SEG+0x31c>)
 8000820:	f001 f864 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000824:	2200      	movs	r2, #0
 8000826:	2104      	movs	r1, #4
 8000828:	489e      	ldr	r0, [pc, #632]	; (8000aa4 <display7SEG+0x31c>)
 800082a:	f001 f85f 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 800082e:	2201      	movs	r2, #1
 8000830:	2108      	movs	r1, #8
 8000832:	489c      	ldr	r0, [pc, #624]	; (8000aa4 <display7SEG+0x31c>)
 8000834:	f001 f85a 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000838:	2201      	movs	r2, #1
 800083a:	2110      	movs	r1, #16
 800083c:	4899      	ldr	r0, [pc, #612]	; (8000aa4 <display7SEG+0x31c>)
 800083e:	f001 f855 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000842:	2201      	movs	r2, #1
 8000844:	2120      	movs	r1, #32
 8000846:	4897      	ldr	r0, [pc, #604]	; (8000aa4 <display7SEG+0x31c>)
 8000848:	f001 f850 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 800084c:	2201      	movs	r2, #1
 800084e:	2140      	movs	r1, #64	; 0x40
 8000850:	4894      	ldr	r0, [pc, #592]	; (8000aa4 <display7SEG+0x31c>)
 8000852:	f001 f84b 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000856:	e120      	b.n	8000a9a <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000858:	2200      	movs	r2, #0
 800085a:	2101      	movs	r1, #1
 800085c:	4891      	ldr	r0, [pc, #580]	; (8000aa4 <display7SEG+0x31c>)
 800085e:	f001 f845 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000862:	2200      	movs	r2, #0
 8000864:	2102      	movs	r1, #2
 8000866:	488f      	ldr	r0, [pc, #572]	; (8000aa4 <display7SEG+0x31c>)
 8000868:	f001 f840 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_SET ) ;
 800086c:	2201      	movs	r2, #1
 800086e:	2104      	movs	r1, #4
 8000870:	488c      	ldr	r0, [pc, #560]	; (8000aa4 <display7SEG+0x31c>)
 8000872:	f001 f83b 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000876:	2200      	movs	r2, #0
 8000878:	2108      	movs	r1, #8
 800087a:	488a      	ldr	r0, [pc, #552]	; (8000aa4 <display7SEG+0x31c>)
 800087c:	f001 f836 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000880:	2200      	movs	r2, #0
 8000882:	2110      	movs	r1, #16
 8000884:	4887      	ldr	r0, [pc, #540]	; (8000aa4 <display7SEG+0x31c>)
 8000886:	f001 f831 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 800088a:	2201      	movs	r2, #1
 800088c:	2120      	movs	r1, #32
 800088e:	4885      	ldr	r0, [pc, #532]	; (8000aa4 <display7SEG+0x31c>)
 8000890:	f001 f82c 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000894:	2200      	movs	r2, #0
 8000896:	2140      	movs	r1, #64	; 0x40
 8000898:	4882      	ldr	r0, [pc, #520]	; (8000aa4 <display7SEG+0x31c>)
 800089a:	f001 f827 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 800089e:	e0fc      	b.n	8000a9a <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 80008a0:	2200      	movs	r2, #0
 80008a2:	2101      	movs	r1, #1
 80008a4:	487f      	ldr	r0, [pc, #508]	; (8000aa4 <display7SEG+0x31c>)
 80008a6:	f001 f821 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 80008aa:	2200      	movs	r2, #0
 80008ac:	2102      	movs	r1, #2
 80008ae:	487d      	ldr	r0, [pc, #500]	; (8000aa4 <display7SEG+0x31c>)
 80008b0:	f001 f81c 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80008b4:	2200      	movs	r2, #0
 80008b6:	2104      	movs	r1, #4
 80008b8:	487a      	ldr	r0, [pc, #488]	; (8000aa4 <display7SEG+0x31c>)
 80008ba:	f001 f817 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 80008be:	2200      	movs	r2, #0
 80008c0:	2108      	movs	r1, #8
 80008c2:	4878      	ldr	r0, [pc, #480]	; (8000aa4 <display7SEG+0x31c>)
 80008c4:	f001 f812 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 80008c8:	2201      	movs	r2, #1
 80008ca:	2110      	movs	r1, #16
 80008cc:	4875      	ldr	r0, [pc, #468]	; (8000aa4 <display7SEG+0x31c>)
 80008ce:	f001 f80d 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 80008d2:	2201      	movs	r2, #1
 80008d4:	2120      	movs	r1, #32
 80008d6:	4873      	ldr	r0, [pc, #460]	; (8000aa4 <display7SEG+0x31c>)
 80008d8:	f001 f808 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 80008dc:	2200      	movs	r2, #0
 80008de:	2140      	movs	r1, #64	; 0x40
 80008e0:	4870      	ldr	r0, [pc, #448]	; (8000aa4 <display7SEG+0x31c>)
 80008e2:	f001 f803 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 80008e6:	e0d8      	b.n	8000a9a <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 80008e8:	2201      	movs	r2, #1
 80008ea:	2101      	movs	r1, #1
 80008ec:	486d      	ldr	r0, [pc, #436]	; (8000aa4 <display7SEG+0x31c>)
 80008ee:	f000 fffd 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 80008f2:	2200      	movs	r2, #0
 80008f4:	2102      	movs	r1, #2
 80008f6:	486b      	ldr	r0, [pc, #428]	; (8000aa4 <display7SEG+0x31c>)
 80008f8:	f000 fff8 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80008fc:	2200      	movs	r2, #0
 80008fe:	2104      	movs	r1, #4
 8000900:	4868      	ldr	r0, [pc, #416]	; (8000aa4 <display7SEG+0x31c>)
 8000902:	f000 fff3 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000906:	2201      	movs	r2, #1
 8000908:	2108      	movs	r1, #8
 800090a:	4866      	ldr	r0, [pc, #408]	; (8000aa4 <display7SEG+0x31c>)
 800090c:	f000 ffee 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000910:	2201      	movs	r2, #1
 8000912:	2110      	movs	r1, #16
 8000914:	4863      	ldr	r0, [pc, #396]	; (8000aa4 <display7SEG+0x31c>)
 8000916:	f000 ffe9 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	4861      	ldr	r0, [pc, #388]	; (8000aa4 <display7SEG+0x31c>)
 8000920:	f000 ffe4 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000924:	2200      	movs	r2, #0
 8000926:	2140      	movs	r1, #64	; 0x40
 8000928:	485e      	ldr	r0, [pc, #376]	; (8000aa4 <display7SEG+0x31c>)
 800092a:	f000 ffdf 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 800092e:	e0b4      	b.n	8000a9a <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000930:	2200      	movs	r2, #0
 8000932:	2101      	movs	r1, #1
 8000934:	485b      	ldr	r0, [pc, #364]	; (8000aa4 <display7SEG+0x31c>)
 8000936:	f000 ffd9 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 800093a:	2201      	movs	r2, #1
 800093c:	2102      	movs	r1, #2
 800093e:	4859      	ldr	r0, [pc, #356]	; (8000aa4 <display7SEG+0x31c>)
 8000940:	f000 ffd4 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000944:	2200      	movs	r2, #0
 8000946:	2104      	movs	r1, #4
 8000948:	4856      	ldr	r0, [pc, #344]	; (8000aa4 <display7SEG+0x31c>)
 800094a:	f000 ffcf 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 800094e:	2200      	movs	r2, #0
 8000950:	2108      	movs	r1, #8
 8000952:	4854      	ldr	r0, [pc, #336]	; (8000aa4 <display7SEG+0x31c>)
 8000954:	f000 ffca 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000958:	2201      	movs	r2, #1
 800095a:	2110      	movs	r1, #16
 800095c:	4851      	ldr	r0, [pc, #324]	; (8000aa4 <display7SEG+0x31c>)
 800095e:	f000 ffc5 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000962:	2200      	movs	r2, #0
 8000964:	2120      	movs	r1, #32
 8000966:	484f      	ldr	r0, [pc, #316]	; (8000aa4 <display7SEG+0x31c>)
 8000968:	f000 ffc0 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 800096c:	2200      	movs	r2, #0
 800096e:	2140      	movs	r1, #64	; 0x40
 8000970:	484c      	ldr	r0, [pc, #304]	; (8000aa4 <display7SEG+0x31c>)
 8000972:	f000 ffbb 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000976:	e090      	b.n	8000a9a <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000978:	2200      	movs	r2, #0
 800097a:	2101      	movs	r1, #1
 800097c:	4849      	ldr	r0, [pc, #292]	; (8000aa4 <display7SEG+0x31c>)
 800097e:	f000 ffb5 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 8000982:	2201      	movs	r2, #1
 8000984:	2102      	movs	r1, #2
 8000986:	4847      	ldr	r0, [pc, #284]	; (8000aa4 <display7SEG+0x31c>)
 8000988:	f000 ffb0 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 800098c:	2200      	movs	r2, #0
 800098e:	2104      	movs	r1, #4
 8000990:	4844      	ldr	r0, [pc, #272]	; (8000aa4 <display7SEG+0x31c>)
 8000992:	f000 ffab 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000996:	2200      	movs	r2, #0
 8000998:	2108      	movs	r1, #8
 800099a:	4842      	ldr	r0, [pc, #264]	; (8000aa4 <display7SEG+0x31c>)
 800099c:	f000 ffa6 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 80009a0:	2200      	movs	r2, #0
 80009a2:	2110      	movs	r1, #16
 80009a4:	483f      	ldr	r0, [pc, #252]	; (8000aa4 <display7SEG+0x31c>)
 80009a6:	f000 ffa1 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 80009aa:	2200      	movs	r2, #0
 80009ac:	2120      	movs	r1, #32
 80009ae:	483d      	ldr	r0, [pc, #244]	; (8000aa4 <display7SEG+0x31c>)
 80009b0:	f000 ff9c 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 80009b4:	2200      	movs	r2, #0
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	483a      	ldr	r0, [pc, #232]	; (8000aa4 <display7SEG+0x31c>)
 80009ba:	f000 ff97 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 80009be:	e06c      	b.n	8000a9a <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 80009c0:	2200      	movs	r2, #0
 80009c2:	2101      	movs	r1, #1
 80009c4:	4837      	ldr	r0, [pc, #220]	; (8000aa4 <display7SEG+0x31c>)
 80009c6:	f000 ff91 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 80009ca:	2200      	movs	r2, #0
 80009cc:	2102      	movs	r1, #2
 80009ce:	4835      	ldr	r0, [pc, #212]	; (8000aa4 <display7SEG+0x31c>)
 80009d0:	f000 ff8c 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80009d4:	2200      	movs	r2, #0
 80009d6:	2104      	movs	r1, #4
 80009d8:	4832      	ldr	r0, [pc, #200]	; (8000aa4 <display7SEG+0x31c>)
 80009da:	f000 ff87 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 80009de:	2201      	movs	r2, #1
 80009e0:	2108      	movs	r1, #8
 80009e2:	4830      	ldr	r0, [pc, #192]	; (8000aa4 <display7SEG+0x31c>)
 80009e4:	f000 ff82 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 80009e8:	2201      	movs	r2, #1
 80009ea:	2110      	movs	r1, #16
 80009ec:	482d      	ldr	r0, [pc, #180]	; (8000aa4 <display7SEG+0x31c>)
 80009ee:	f000 ff7d 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 80009f2:	2201      	movs	r2, #1
 80009f4:	2120      	movs	r1, #32
 80009f6:	482b      	ldr	r0, [pc, #172]	; (8000aa4 <display7SEG+0x31c>)
 80009f8:	f000 ff78 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 80009fc:	2201      	movs	r2, #1
 80009fe:	2140      	movs	r1, #64	; 0x40
 8000a00:	4828      	ldr	r0, [pc, #160]	; (8000aa4 <display7SEG+0x31c>)
 8000a02:	f000 ff73 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000a06:	e048      	b.n	8000a9a <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	4825      	ldr	r0, [pc, #148]	; (8000aa4 <display7SEG+0x31c>)
 8000a0e:	f000 ff6d 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000a12:	2200      	movs	r2, #0
 8000a14:	2102      	movs	r1, #2
 8000a16:	4823      	ldr	r0, [pc, #140]	; (8000aa4 <display7SEG+0x31c>)
 8000a18:	f000 ff68 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2104      	movs	r1, #4
 8000a20:	4820      	ldr	r0, [pc, #128]	; (8000aa4 <display7SEG+0x31c>)
 8000a22:	f000 ff63 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000a26:	2200      	movs	r2, #0
 8000a28:	2108      	movs	r1, #8
 8000a2a:	481e      	ldr	r0, [pc, #120]	; (8000aa4 <display7SEG+0x31c>)
 8000a2c:	f000 ff5e 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000a30:	2200      	movs	r2, #0
 8000a32:	2110      	movs	r1, #16
 8000a34:	481b      	ldr	r0, [pc, #108]	; (8000aa4 <display7SEG+0x31c>)
 8000a36:	f000 ff59 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	4819      	ldr	r0, [pc, #100]	; (8000aa4 <display7SEG+0x31c>)
 8000a40:	f000 ff54 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000a44:	2200      	movs	r2, #0
 8000a46:	2140      	movs	r1, #64	; 0x40
 8000a48:	4816      	ldr	r0, [pc, #88]	; (8000aa4 <display7SEG+0x31c>)
 8000a4a:	f000 ff4f 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000a4e:	e024      	b.n	8000a9a <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000a50:	2200      	movs	r2, #0
 8000a52:	2101      	movs	r1, #1
 8000a54:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <display7SEG+0x31c>)
 8000a56:	f000 ff49 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <display7SEG+0x31c>)
 8000a60:	f000 ff44 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000a64:	2200      	movs	r2, #0
 8000a66:	2104      	movs	r1, #4
 8000a68:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <display7SEG+0x31c>)
 8000a6a:	f000 ff3f 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2108      	movs	r1, #8
 8000a72:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <display7SEG+0x31c>)
 8000a74:	f000 ff3a 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <display7SEG+0x31c>)
 8000a7e:	f000 ff35 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000a82:	2200      	movs	r2, #0
 8000a84:	2120      	movs	r1, #32
 8000a86:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <display7SEG+0x31c>)
 8000a88:	f000 ff30 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <display7SEG+0x31c>)
 8000a92:	f000 ff2b 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000a96:	e000      	b.n	8000a9a <display7SEG+0x312>
	default:
		break;
 8000a98:	bf00      	nop
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40010c00 	.word	0x40010c00

08000aa8 <display7SEG0>:
void display7SEG0(int num){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b09      	cmp	r3, #9
 8000ab4:	f200 81bc 	bhi.w	8000e30 <display7SEG0+0x388>
 8000ab8:	a201      	add	r2, pc, #4	; (adr r2, 8000ac0 <display7SEG0+0x18>)
 8000aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abe:	bf00      	nop
 8000ac0:	08000ae9 	.word	0x08000ae9
 8000ac4:	08000b3d 	.word	0x08000b3d
 8000ac8:	08000b91 	.word	0x08000b91
 8000acc:	08000be5 	.word	0x08000be5
 8000ad0:	08000c39 	.word	0x08000c39
 8000ad4:	08000c8d 	.word	0x08000c8d
 8000ad8:	08000ce1 	.word	0x08000ce1
 8000adc:	08000d35 	.word	0x08000d35
 8000ae0:	08000d89 	.word	0x08000d89
 8000ae4:	08000ddd 	.word	0x08000ddd
	switch(num){
	case 0:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2180      	movs	r1, #128	; 0x80
 8000aec:	48d3      	ldr	r0, [pc, #844]	; (8000e3c <display7SEG0+0x394>)
 8000aee:	f000 fefd 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af8:	48d0      	ldr	r0, [pc, #832]	; (8000e3c <display7SEG0+0x394>)
 8000afa:	f000 fef7 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b04:	48cd      	ldr	r0, [pc, #820]	; (8000e3c <display7SEG0+0x394>)
 8000b06:	f000 fef1 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b10:	48ca      	ldr	r0, [pc, #808]	; (8000e3c <display7SEG0+0x394>)
 8000b12:	f000 feeb 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b1c:	48c7      	ldr	r0, [pc, #796]	; (8000e3c <display7SEG0+0x394>)
 8000b1e:	f000 fee5 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b28:	48c4      	ldr	r0, [pc, #784]	; (8000e3c <display7SEG0+0x394>)
 8000b2a:	f000 fedf 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b34:	48c1      	ldr	r0, [pc, #772]	; (8000e3c <display7SEG0+0x394>)
 8000b36:	f000 fed9 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000b3a:	e17a      	b.n	8000e32 <display7SEG0+0x38a>
	case 1:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_SET ) ;
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	48be      	ldr	r0, [pc, #760]	; (8000e3c <display7SEG0+0x394>)
 8000b42:	f000 fed3 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4c:	48bb      	ldr	r0, [pc, #748]	; (8000e3c <display7SEG0+0x394>)
 8000b4e:	f000 fecd 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b58:	48b8      	ldr	r0, [pc, #736]	; (8000e3c <display7SEG0+0x394>)
 8000b5a:	f000 fec7 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b64:	48b5      	ldr	r0, [pc, #724]	; (8000e3c <display7SEG0+0x394>)
 8000b66:	f000 fec1 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b70:	48b2      	ldr	r0, [pc, #712]	; (8000e3c <display7SEG0+0x394>)
 8000b72:	f000 febb 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000b76:	2201      	movs	r2, #1
 8000b78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7c:	48af      	ldr	r0, [pc, #700]	; (8000e3c <display7SEG0+0x394>)
 8000b7e:	f000 feb5 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b88:	48ac      	ldr	r0, [pc, #688]	; (8000e3c <display7SEG0+0x394>)
 8000b8a:	f000 feaf 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000b8e:	e150      	b.n	8000e32 <display7SEG0+0x38a>
	case 2:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000b90:	2200      	movs	r2, #0
 8000b92:	2180      	movs	r1, #128	; 0x80
 8000b94:	48a9      	ldr	r0, [pc, #676]	; (8000e3c <display7SEG0+0x394>)
 8000b96:	f000 fea9 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba0:	48a6      	ldr	r0, [pc, #664]	; (8000e3c <display7SEG0+0x394>)
 8000ba2:	f000 fea3 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_SET ) ;
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bac:	48a3      	ldr	r0, [pc, #652]	; (8000e3c <display7SEG0+0x394>)
 8000bae:	f000 fe9d 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb8:	48a0      	ldr	r0, [pc, #640]	; (8000e3c <display7SEG0+0x394>)
 8000bba:	f000 fe97 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc4:	489d      	ldr	r0, [pc, #628]	; (8000e3c <display7SEG0+0x394>)
 8000bc6:	f000 fe91 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd0:	489a      	ldr	r0, [pc, #616]	; (8000e3c <display7SEG0+0x394>)
 8000bd2:	f000 fe8b 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bdc:	4897      	ldr	r0, [pc, #604]	; (8000e3c <display7SEG0+0x394>)
 8000bde:	f000 fe85 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000be2:	e126      	b.n	8000e32 <display7SEG0+0x38a>
	case 3:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000be4:	2200      	movs	r2, #0
 8000be6:	2180      	movs	r1, #128	; 0x80
 8000be8:	4894      	ldr	r0, [pc, #592]	; (8000e3c <display7SEG0+0x394>)
 8000bea:	f000 fe7f 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf4:	4891      	ldr	r0, [pc, #580]	; (8000e3c <display7SEG0+0x394>)
 8000bf6:	f000 fe79 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c00:	488e      	ldr	r0, [pc, #568]	; (8000e3c <display7SEG0+0x394>)
 8000c02:	f000 fe73 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c0c:	488b      	ldr	r0, [pc, #556]	; (8000e3c <display7SEG0+0x394>)
 8000c0e:	f000 fe6d 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c18:	4888      	ldr	r0, [pc, #544]	; (8000e3c <display7SEG0+0x394>)
 8000c1a:	f000 fe67 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c24:	4885      	ldr	r0, [pc, #532]	; (8000e3c <display7SEG0+0x394>)
 8000c26:	f000 fe61 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c30:	4882      	ldr	r0, [pc, #520]	; (8000e3c <display7SEG0+0x394>)
 8000c32:	f000 fe5b 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000c36:	e0fc      	b.n	8000e32 <display7SEG0+0x38a>
	case 4:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_SET ) ;
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	487f      	ldr	r0, [pc, #508]	; (8000e3c <display7SEG0+0x394>)
 8000c3e:	f000 fe55 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c48:	487c      	ldr	r0, [pc, #496]	; (8000e3c <display7SEG0+0x394>)
 8000c4a:	f000 fe4f 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c54:	4879      	ldr	r0, [pc, #484]	; (8000e3c <display7SEG0+0x394>)
 8000c56:	f000 fe49 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c60:	4876      	ldr	r0, [pc, #472]	; (8000e3c <display7SEG0+0x394>)
 8000c62:	f000 fe43 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c6c:	4873      	ldr	r0, [pc, #460]	; (8000e3c <display7SEG0+0x394>)
 8000c6e:	f000 fe3d 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c78:	4870      	ldr	r0, [pc, #448]	; (8000e3c <display7SEG0+0x394>)
 8000c7a:	f000 fe37 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c84:	486d      	ldr	r0, [pc, #436]	; (8000e3c <display7SEG0+0x394>)
 8000c86:	f000 fe31 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000c8a:	e0d2      	b.n	8000e32 <display7SEG0+0x38a>
	case 5:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2180      	movs	r1, #128	; 0x80
 8000c90:	486a      	ldr	r0, [pc, #424]	; (8000e3c <display7SEG0+0x394>)
 8000c92:	f000 fe2b 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_SET ) ;
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9c:	4867      	ldr	r0, [pc, #412]	; (8000e3c <display7SEG0+0x394>)
 8000c9e:	f000 fe25 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca8:	4864      	ldr	r0, [pc, #400]	; (8000e3c <display7SEG0+0x394>)
 8000caa:	f000 fe1f 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb4:	4861      	ldr	r0, [pc, #388]	; (8000e3c <display7SEG0+0x394>)
 8000cb6:	f000 fe19 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc0:	485e      	ldr	r0, [pc, #376]	; (8000e3c <display7SEG0+0x394>)
 8000cc2:	f000 fe13 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ccc:	485b      	ldr	r0, [pc, #364]	; (8000e3c <display7SEG0+0x394>)
 8000cce:	f000 fe0d 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd8:	4858      	ldr	r0, [pc, #352]	; (8000e3c <display7SEG0+0x394>)
 8000cda:	f000 fe07 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000cde:	e0a8      	b.n	8000e32 <display7SEG0+0x38a>
	case 6:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2180      	movs	r1, #128	; 0x80
 8000ce4:	4855      	ldr	r0, [pc, #340]	; (8000e3c <display7SEG0+0x394>)
 8000ce6:	f000 fe01 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_SET ) ;
 8000cea:	2201      	movs	r2, #1
 8000cec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf0:	4852      	ldr	r0, [pc, #328]	; (8000e3c <display7SEG0+0x394>)
 8000cf2:	f000 fdfb 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cfc:	484f      	ldr	r0, [pc, #316]	; (8000e3c <display7SEG0+0x394>)
 8000cfe:	f000 fdf5 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d08:	484c      	ldr	r0, [pc, #304]	; (8000e3c <display7SEG0+0x394>)
 8000d0a:	f000 fdef 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d14:	4849      	ldr	r0, [pc, #292]	; (8000e3c <display7SEG0+0x394>)
 8000d16:	f000 fde9 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d20:	4846      	ldr	r0, [pc, #280]	; (8000e3c <display7SEG0+0x394>)
 8000d22:	f000 fde3 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2c:	4843      	ldr	r0, [pc, #268]	; (8000e3c <display7SEG0+0x394>)
 8000d2e:	f000 fddd 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000d32:	e07e      	b.n	8000e32 <display7SEG0+0x38a>
	case 7:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000d34:	2200      	movs	r2, #0
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	4840      	ldr	r0, [pc, #256]	; (8000e3c <display7SEG0+0x394>)
 8000d3a:	f000 fdd7 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d44:	483d      	ldr	r0, [pc, #244]	; (8000e3c <display7SEG0+0x394>)
 8000d46:	f000 fdd1 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d50:	483a      	ldr	r0, [pc, #232]	; (8000e3c <display7SEG0+0x394>)
 8000d52:	f000 fdcb 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5c:	4837      	ldr	r0, [pc, #220]	; (8000e3c <display7SEG0+0x394>)
 8000d5e:	f000 fdc5 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d68:	4834      	ldr	r0, [pc, #208]	; (8000e3c <display7SEG0+0x394>)
 8000d6a:	f000 fdbf 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d74:	4831      	ldr	r0, [pc, #196]	; (8000e3c <display7SEG0+0x394>)
 8000d76:	f000 fdb9 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d80:	482e      	ldr	r0, [pc, #184]	; (8000e3c <display7SEG0+0x394>)
 8000d82:	f000 fdb3 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000d86:	e054      	b.n	8000e32 <display7SEG0+0x38a>
	case 8:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2180      	movs	r1, #128	; 0x80
 8000d8c:	482b      	ldr	r0, [pc, #172]	; (8000e3c <display7SEG0+0x394>)
 8000d8e:	f000 fdad 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d98:	4828      	ldr	r0, [pc, #160]	; (8000e3c <display7SEG0+0x394>)
 8000d9a:	f000 fda7 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da4:	4825      	ldr	r0, [pc, #148]	; (8000e3c <display7SEG0+0x394>)
 8000da6:	f000 fda1 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000db0:	4822      	ldr	r0, [pc, #136]	; (8000e3c <display7SEG0+0x394>)
 8000db2:	f000 fd9b 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dbc:	481f      	ldr	r0, [pc, #124]	; (8000e3c <display7SEG0+0x394>)
 8000dbe:	f000 fd95 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc8:	481c      	ldr	r0, [pc, #112]	; (8000e3c <display7SEG0+0x394>)
 8000dca:	f000 fd8f 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd4:	4819      	ldr	r0, [pc, #100]	; (8000e3c <display7SEG0+0x394>)
 8000dd6:	f000 fd89 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000dda:	e02a      	b.n	8000e32 <display7SEG0+0x38a>
	case 9:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	4816      	ldr	r0, [pc, #88]	; (8000e3c <display7SEG0+0x394>)
 8000de2:	f000 fd83 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dec:	4813      	ldr	r0, [pc, #76]	; (8000e3c <display7SEG0+0x394>)
 8000dee:	f000 fd7d 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <display7SEG0+0x394>)
 8000dfa:	f000 fd77 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <display7SEG0+0x394>)
 8000e06:	f000 fd71 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e10:	480a      	ldr	r0, [pc, #40]	; (8000e3c <display7SEG0+0x394>)
 8000e12:	f000 fd6b 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e1c:	4807      	ldr	r0, [pc, #28]	; (8000e3c <display7SEG0+0x394>)
 8000e1e:	f000 fd65 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <display7SEG0+0x394>)
 8000e2a:	f000 fd5f 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000e2e:	e000      	b.n	8000e32 <display7SEG0+0x38a>
	default:
		break;
 8000e30:	bf00      	nop
	}
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40010c00 	.word	0x40010c00

08000e40 <updateClockBuffer>:
int timeYELLOW = 2;

int led_buffer[4] = {0, 0, 0, 0};


void updateClockBuffer(int num0, int num1, int num2, int num3) {
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]
	led_buffer[0] = num0;
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <updateClockBuffer+0x30>)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num1;
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <updateClockBuffer+0x30>)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	6053      	str	r3, [r2, #4]
	led_buffer[2] = num2;
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <updateClockBuffer+0x30>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num3;
 8000e60:	4a03      	ldr	r2, [pc, #12]	; (8000e70 <updateClockBuffer+0x30>)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	60d3      	str	r3, [r2, #12]
}
 8000e66:	bf00      	nop
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	2000005c 	.word	0x2000005c

08000e74 <update7SEG>:

void update7SEG(int index) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	switch (index) {
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d003      	beq.n	8000e8a <update7SEG+0x16>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d017      	beq.n	8000eb8 <update7SEG+0x44>
		display7SEG0(led_buffer[3]);
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
		break;
	default:
		break;
 8000e88:	e02d      	b.n	8000ee6 <update7SEG+0x72>
		display7SEG(led_buffer[0]);
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <update7SEG+0x7c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fc7a 	bl	8000788 <display7SEG>
		display7SEG0(led_buffer[1]);
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <update7SEG+0x7c>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fe05 	bl	8000aa8 <display7SEG0>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea4:	4813      	ldr	r0, [pc, #76]	; (8000ef4 <update7SEG+0x80>)
 8000ea6:	f000 fd21 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb0:	4810      	ldr	r0, [pc, #64]	; (8000ef4 <update7SEG+0x80>)
 8000eb2:	f000 fd1b 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000eb6:	e016      	b.n	8000ee6 <update7SEG+0x72>
		display7SEG(led_buffer[2]);
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <update7SEG+0x7c>)
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fc63 	bl	8000788 <display7SEG>
		display7SEG0(led_buffer[3]);
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <update7SEG+0x7c>)
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fdee 	bl	8000aa8 <display7SEG0>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <update7SEG+0x80>)
 8000ed4:	f000 fd0a 	bl	80018ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <update7SEG+0x80>)
 8000ee0:	f000 fd04 	bl	80018ec <HAL_GPIO_WritePin>
		break;
 8000ee4:	bf00      	nop
	}
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000005c 	.word	0x2000005c
 8000ef4:	40010c00 	.word	0x40010c00

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f000 fa35 	bl	800136c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f851 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 f8d9 	bl	80010bc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f0a:	f000 f889 	bl	8001020 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f0e:	4823      	ldr	r0, [pc, #140]	; (8000f9c <main+0xa4>)
 8000f10:	f001 f94a 	bl	80021a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state = 0;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <main+0xa8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
  int led_idx = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
  int index = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
  setTimer0(1000);
 8000f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f26:	f000 f931 	bl	800118c <setTimer0>
  while (1)
  {
    /* USER CODE END WHILE */
	  if (timer0_flag == 1) {
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <main+0xac>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d12e      	bne.n	8000f90 <main+0x98>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d82d      	bhi.n	8000f94 <main+0x9c>
 8000f38:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <main+0x48>)
 8000f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3e:	bf00      	nop
 8000f40:	08000f51 	.word	0x08000f51
 8000f44:	08000f59 	.word	0x08000f59
 8000f48:	08000f71 	.word	0x08000f71
 8000f4c:	08000f79 	.word	0x08000f79
	  		  switch (led_idx) {
	  			  case 0:
	  				  led_idx++;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3301      	adds	r3, #1
 8000f54:	607b      	str	r3, [r7, #4]
	  				  break;
 8000f56:	e01e      	b.n	8000f96 <main+0x9e>
	  		  	  case 1:
	  		  		  index = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	603b      	str	r3, [r7, #0]
	  		  		  update7SEG(index);
 8000f5c:	6838      	ldr	r0, [r7, #0]
 8000f5e:	f7ff ff89 	bl	8000e74 <update7SEG>
	  		  		  setTimer0(500);
 8000f62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f66:	f000 f911 	bl	800118c <setTimer0>
	  		  		  led_idx = 2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	607b      	str	r3, [r7, #4]
	  		  		  break;
 8000f6e:	e012      	b.n	8000f96 <main+0x9e>
	  		  	  case 2:
	  		  		  led_idx++;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3301      	adds	r3, #1
 8000f74:	607b      	str	r3, [r7, #4]
	  		  		  break;
 8000f76:	e00e      	b.n	8000f96 <main+0x9e>
	  		  	  case 3:
	  		  		  index = 2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	603b      	str	r3, [r7, #0]
	  		  		  update7SEG(index);
 8000f7c:	6838      	ldr	r0, [r7, #0]
 8000f7e:	f7ff ff79 	bl	8000e74 <update7SEG>
	  		  		  setTimer0(500);
 8000f82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f86:	f000 f901 	bl	800118c <setTimer0>
	  		  		  led_idx = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
	  		  		  break;
 8000f8e:	e002      	b.n	8000f96 <main+0x9e>
	  		  	  default:
	  		  		  break;
	  		  }
	  	  }
 8000f90:	bf00      	nop
 8000f92:	e000      	b.n	8000f96 <main+0x9e>
	  		  		  break;
 8000f94:	bf00      	nop
	  	  fsm_run();
 8000f96:	f7ff f8eb 	bl	8000170 <fsm_run>
	  if (timer0_flag == 1) {
 8000f9a:	e7c6      	b.n	8000f2a <main+0x32>
 8000f9c:	20000084 	.word	0x20000084
 8000fa0:	20000058 	.word	0x20000058
 8000fa4:	20000070 	.word	0x20000070

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b090      	sub	sp, #64	; 0x40
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0318 	add.w	r3, r7, #24
 8000fb2:	2228      	movs	r2, #40	; 0x28
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fb74 	bl	80026a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd2:	2310      	movs	r3, #16
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fcb6 	bl	8001950 <HAL_RCC_OscConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fea:	f000 f8c9 	bl	8001180 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fee:	230f      	movs	r3, #15
 8000ff0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f000 ff22 	bl	8001e50 <HAL_RCC_ClockConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001012:	f000 f8b5 	bl	8001180 <Error_Handler>
  }
}
 8001016:	bf00      	nop
 8001018:	3740      	adds	r7, #64	; 0x40
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001034:	463b      	mov	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <MX_TIM2_Init+0x98>)
 800103e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001042:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MX_TIM2_Init+0x98>)
 8001046:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800104a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <MX_TIM2_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_TIM2_Init+0x98>)
 8001054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001058:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <MX_TIM2_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_TIM2_Init+0x98>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001066:	4814      	ldr	r0, [pc, #80]	; (80010b8 <MX_TIM2_Init+0x98>)
 8001068:	f001 f84e 	bl	8002108 <HAL_TIM_Base_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001072:	f000 f885 	bl	8001180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	4619      	mov	r1, r3
 8001082:	480d      	ldr	r0, [pc, #52]	; (80010b8 <MX_TIM2_Init+0x98>)
 8001084:	f001 f8dc 	bl	8002240 <HAL_TIM_ConfigClockSource>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800108e:	f000 f877 	bl	8001180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	4619      	mov	r1, r3
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <MX_TIM2_Init+0x98>)
 80010a0:	f001 fa84 	bl	80025ac <HAL_TIMEx_MasterConfigSynchronization>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010aa:	f000 f869 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000084 	.word	0x20000084

080010bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a27      	ldr	r2, [pc, #156]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b25      	ldr	r3, [pc, #148]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a21      	ldr	r2, [pc, #132]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <MX_GPIO_Init+0xb8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_0_Pin
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001106:	481c      	ldr	r0, [pc, #112]	; (8001178 <MX_GPIO_Init+0xbc>)
 8001108:	f000 fbf0 	bl	80018ec <HAL_GPIO_WritePin>
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|D0_Pin
 800110c:	2200      	movs	r2, #0
 800110e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001112:	481a      	ldr	r0, [pc, #104]	; (800117c <MX_GPIO_Init+0xc0>)
 8001114:	f000 fbea 	bl	80018ec <HAL_GPIO_WritePin>
                          |E0_Pin|F0_Pin|G0_Pin|EN1_Pin
                          |EN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A0_Pin|B0_Pin|C0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin BUT3_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin|BUT3_Pin;
 8001118:	230e      	movs	r3, #14
 800111a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	4619      	mov	r1, r3
 800112a:	4813      	ldr	r0, [pc, #76]	; (8001178 <MX_GPIO_Init+0xbc>)
 800112c:	f000 fa64 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_RED_0_Pin
                           LED_YELLOW_0_Pin LED_GREEN_0_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_0_Pin
 8001130:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001134:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2302      	movs	r3, #2
 8001140:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	4619      	mov	r1, r3
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <MX_GPIO_Init+0xbc>)
 800114a:	f000 fa55 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D0_Pin
                           E0_Pin F0_Pin G0_Pin EN1_Pin
                           EN2_Pin D_Pin E_Pin F_Pin
                           G_Pin A0_Pin B0_Pin C0_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D0_Pin
 800114e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001152:	60bb      	str	r3, [r7, #8]
                          |E0_Pin|F0_Pin|G0_Pin|EN1_Pin
                          |EN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A0_Pin|B0_Pin|C0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2302      	movs	r3, #2
 800115e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	4619      	mov	r1, r3
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_GPIO_Init+0xc0>)
 8001168:	f000 fa46 	bl	80015f8 <HAL_GPIO_Init>

}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000
 8001178:	40010800 	.word	0x40010800
 800117c:	40010c00 	.word	0x40010c00

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	e7fe      	b.n	8001188 <Error_Handler+0x8>
	...

0800118c <setTimer0>:
int timer1_counter = 0;
int timer1_flag = 0;
int timer2_counter = 0;
int timer2_flag = 0;
int TIMER_CYCLE = 10;
void setTimer0(int duration){
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/ TIMER_CYCLE;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <setTimer0+0x28>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	fb92 f3f3 	sdiv	r3, r2, r3
 800119e:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <setTimer0+0x2c>)
 80011a0:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <setTimer0+0x30>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	2000000c 	.word	0x2000000c
 80011b8:	2000006c 	.word	0x2000006c
 80011bc:	20000070 	.word	0x20000070

080011c0 <setTimer1>:

void setTimer1(int duration){
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/ TIMER_CYCLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <setTimer1+0x28>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80011d2:	4a06      	ldr	r2, [pc, #24]	; (80011ec <setTimer1+0x2c>)
 80011d4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <setTimer1+0x30>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	2000000c 	.word	0x2000000c
 80011ec:	20000074 	.word	0x20000074
 80011f0:	20000078 	.word	0x20000078

080011f4 <setTimer2>:

void setTimer2(int duration){
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/ TIMER_CYCLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <setTimer2+0x28>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	fb92 f3f3 	sdiv	r3, r2, r3
 8001206:	4a06      	ldr	r2, [pc, #24]	; (8001220 <setTimer2+0x2c>)
 8001208:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <setTimer2+0x30>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2000000c 	.word	0x2000000c
 8001220:	2000007c 	.word	0x2000007c
 8001224:	20000080 	.word	0x20000080

08001228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_MspInit+0x5c>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	4a14      	ldr	r2, [pc, #80]	; (8001284 <HAL_MspInit+0x5c>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6193      	str	r3, [r2, #24]
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_MspInit+0x5c>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_MspInit+0x5c>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <HAL_MspInit+0x5c>)
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001250:	61d3      	str	r3, [r2, #28]
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_MspInit+0x5c>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_MspInit+0x60>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_MspInit+0x60>)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	40021000 	.word	0x40021000
 8001288:	40010000 	.word	0x40010000

0800128c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800129c:	d10b      	bne.n	80012b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_TIM_Base_MspInit+0x34>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <HAL_TIM_Base_MspInit+0x34>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	61d3      	str	r3, [r2, #28]
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_TIM_Base_MspInit+0x34>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	40021000 	.word	0x40021000

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr

080012fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130a:	f000 f875 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}

08001312 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
	...

08001320 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001320:	f7ff fff7 	bl	8001312 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001324:	480b      	ldr	r0, [pc, #44]	; (8001354 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001326:	490c      	ldr	r1, [pc, #48]	; (8001358 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001328:	4a0c      	ldr	r2, [pc, #48]	; (800135c <LoopFillZerobss+0x16>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a09      	ldr	r2, [pc, #36]	; (8001360 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800133c:	4c09      	ldr	r4, [pc, #36]	; (8001364 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134a:	f001 f987 	bl	800265c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800134e:	f7ff fdd3 	bl	8000ef8 <main>
  bx lr
 8001352:	4770      	bx	lr
  ldr r0, =_sdata
 8001354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001358:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800135c:	080026f8 	.word	0x080026f8
  ldr r2, =_sbss
 8001360:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001364:	200000d0 	.word	0x200000d0

08001368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC1_2_IRQHandler>
	...

0800136c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_Init+0x28>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_Init+0x28>)
 8001376:	f043 0310 	orr.w	r3, r3, #16
 800137a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137c:	2003      	movs	r0, #3
 800137e:	f000 f907 	bl	8001590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001382:	200f      	movs	r0, #15
 8001384:	f000 f808 	bl	8001398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001388:	f7ff ff4e 	bl	8001228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40022000 	.word	0x40022000

08001398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x54>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x58>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f911 	bl	80015de <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00e      	b.n	80013e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d80a      	bhi.n	80013e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	f000 f8e7 	bl	80015a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <HAL_InitTick+0x5c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000010 	.word	0x20000010
 80013f0:	20000018 	.word	0x20000018
 80013f4:	20000014 	.word	0x20000014

080013f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x1c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x20>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a03      	ldr	r2, [pc, #12]	; (8001418 <HAL_IncTick+0x20>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	20000018 	.word	0x20000018
 8001418:	200000cc 	.word	0x200000cc

0800141c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <HAL_GetTick+0x10>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	200000cc 	.word	0x200000cc

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800155c:	d301      	bcc.n	8001562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155e:	2301      	movs	r3, #1
 8001560:	e00f      	b.n	8001582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <SysTick_Config+0x40>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156a:	210f      	movs	r1, #15
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f7ff ff90 	bl	8001494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <SysTick_Config+0x40>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <SysTick_Config+0x40>)
 800157c:	2207      	movs	r2, #7
 800157e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	e000e010 	.word	0xe000e010

08001590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ff49 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b8:	f7ff ff5e 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff90 	bl	80014e8 <NVIC_EncodePriority>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff5f 	bl	8001494 <__NVIC_SetPriority>
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffb0 	bl	800154c <SysTick_Config>
 80015ec:	4603      	mov	r3, r0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b08b      	sub	sp, #44	; 0x2c
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160a:	e148      	b.n	800189e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800160c:	2201      	movs	r2, #1
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	429a      	cmp	r2, r3
 8001626:	f040 8137 	bne.w	8001898 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4aa3      	ldr	r2, [pc, #652]	; (80018bc <HAL_GPIO_Init+0x2c4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d05e      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001634:	4aa1      	ldr	r2, [pc, #644]	; (80018bc <HAL_GPIO_Init+0x2c4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d875      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800163a:	4aa1      	ldr	r2, [pc, #644]	; (80018c0 <HAL_GPIO_Init+0x2c8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d058      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001640:	4a9f      	ldr	r2, [pc, #636]	; (80018c0 <HAL_GPIO_Init+0x2c8>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d86f      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001646:	4a9f      	ldr	r2, [pc, #636]	; (80018c4 <HAL_GPIO_Init+0x2cc>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d052      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 800164c:	4a9d      	ldr	r2, [pc, #628]	; (80018c4 <HAL_GPIO_Init+0x2cc>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d869      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001652:	4a9d      	ldr	r2, [pc, #628]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d04c      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001658:	4a9b      	ldr	r2, [pc, #620]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d863      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800165e:	4a9b      	ldr	r2, [pc, #620]	; (80018cc <HAL_GPIO_Init+0x2d4>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d046      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001664:	4a99      	ldr	r2, [pc, #612]	; (80018cc <HAL_GPIO_Init+0x2d4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d85d      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800166a:	2b12      	cmp	r3, #18
 800166c:	d82a      	bhi.n	80016c4 <HAL_GPIO_Init+0xcc>
 800166e:	2b12      	cmp	r3, #18
 8001670:	d859      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001672:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <HAL_GPIO_Init+0x80>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	080016f3 	.word	0x080016f3
 800167c:	080016cd 	.word	0x080016cd
 8001680:	080016df 	.word	0x080016df
 8001684:	08001721 	.word	0x08001721
 8001688:	08001727 	.word	0x08001727
 800168c:	08001727 	.word	0x08001727
 8001690:	08001727 	.word	0x08001727
 8001694:	08001727 	.word	0x08001727
 8001698:	08001727 	.word	0x08001727
 800169c:	08001727 	.word	0x08001727
 80016a0:	08001727 	.word	0x08001727
 80016a4:	08001727 	.word	0x08001727
 80016a8:	08001727 	.word	0x08001727
 80016ac:	08001727 	.word	0x08001727
 80016b0:	08001727 	.word	0x08001727
 80016b4:	08001727 	.word	0x08001727
 80016b8:	08001727 	.word	0x08001727
 80016bc:	080016d5 	.word	0x080016d5
 80016c0:	080016e9 	.word	0x080016e9
 80016c4:	4a82      	ldr	r2, [pc, #520]	; (80018d0 <HAL_GPIO_Init+0x2d8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d013      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ca:	e02c      	b.n	8001726 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	623b      	str	r3, [r7, #32]
          break;
 80016d2:	e029      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	3304      	adds	r3, #4
 80016da:	623b      	str	r3, [r7, #32]
          break;
 80016dc:	e024      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	3308      	adds	r3, #8
 80016e4:	623b      	str	r3, [r7, #32]
          break;
 80016e6:	e01f      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	330c      	adds	r3, #12
 80016ee:	623b      	str	r3, [r7, #32]
          break;
 80016f0:	e01a      	b.n	8001728 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016fa:	2304      	movs	r3, #4
 80016fc:	623b      	str	r3, [r7, #32]
          break;
 80016fe:	e013      	b.n	8001728 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001708:	2308      	movs	r3, #8
 800170a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	611a      	str	r2, [r3, #16]
          break;
 8001712:	e009      	b.n	8001728 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001714:	2308      	movs	r3, #8
 8001716:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	615a      	str	r2, [r3, #20]
          break;
 800171e:	e003      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e000      	b.n	8001728 <HAL_GPIO_Init+0x130>
          break;
 8001726:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2bff      	cmp	r3, #255	; 0xff
 800172c:	d801      	bhi.n	8001732 <HAL_GPIO_Init+0x13a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	e001      	b.n	8001736 <HAL_GPIO_Init+0x13e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3304      	adds	r3, #4
 8001736:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2bff      	cmp	r3, #255	; 0xff
 800173c:	d802      	bhi.n	8001744 <HAL_GPIO_Init+0x14c>
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	e002      	b.n	800174a <HAL_GPIO_Init+0x152>
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	3b08      	subs	r3, #8
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	210f      	movs	r1, #15
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	401a      	ands	r2, r3
 800175c:	6a39      	ldr	r1, [r7, #32]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	431a      	orrs	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8090 	beq.w	8001898 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001778:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <HAL_GPIO_Init+0x2dc>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a55      	ldr	r2, [pc, #340]	; (80018d4 <HAL_GPIO_Init+0x2dc>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <HAL_GPIO_Init+0x2dc>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001790:	4a51      	ldr	r2, [pc, #324]	; (80018d8 <HAL_GPIO_Init+0x2e0>)
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	220f      	movs	r2, #15
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4013      	ands	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a49      	ldr	r2, [pc, #292]	; (80018dc <HAL_GPIO_Init+0x2e4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00d      	beq.n	80017d8 <HAL_GPIO_Init+0x1e0>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a48      	ldr	r2, [pc, #288]	; (80018e0 <HAL_GPIO_Init+0x2e8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_Init+0x1dc>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a47      	ldr	r2, [pc, #284]	; (80018e4 <HAL_GPIO_Init+0x2ec>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d101      	bne.n	80017d0 <HAL_GPIO_Init+0x1d8>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e004      	b.n	80017da <HAL_GPIO_Init+0x1e2>
 80017d0:	2303      	movs	r3, #3
 80017d2:	e002      	b.n	80017da <HAL_GPIO_Init+0x1e2>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <HAL_GPIO_Init+0x1e2>
 80017d8:	2300      	movs	r3, #0
 80017da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017dc:	f002 0203 	and.w	r2, r2, #3
 80017e0:	0092      	lsls	r2, r2, #2
 80017e2:	4093      	lsls	r3, r2
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017ea:	493b      	ldr	r1, [pc, #236]	; (80018d8 <HAL_GPIO_Init+0x2e0>)
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001804:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	4937      	ldr	r1, [pc, #220]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	43db      	mvns	r3, r3
 800181a:	4933      	ldr	r1, [pc, #204]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800181c:	4013      	ands	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d006      	beq.n	800183a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800182c:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	492d      	ldr	r1, [pc, #180]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	60cb      	str	r3, [r1, #12]
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	43db      	mvns	r3, r3
 8001842:	4929      	ldr	r1, [pc, #164]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001844:	4013      	ands	r3, r2
 8001846:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4923      	ldr	r1, [pc, #140]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	43db      	mvns	r3, r3
 800186a:	491f      	ldr	r1, [pc, #124]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800186c:	4013      	ands	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4919      	ldr	r1, [pc, #100]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	43db      	mvns	r3, r3
 8001892:	4915      	ldr	r1, [pc, #84]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 8001894:	4013      	ands	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	3301      	adds	r3, #1
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f47f aeaf 	bne.w	800160c <HAL_GPIO_Init+0x14>
  }
}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	372c      	adds	r7, #44	; 0x2c
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	10320000 	.word	0x10320000
 80018c0:	10310000 	.word	0x10310000
 80018c4:	10220000 	.word	0x10220000
 80018c8:	10210000 	.word	0x10210000
 80018cc:	10120000 	.word	0x10120000
 80018d0:	10110000 	.word	0x10110000
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010000 	.word	0x40010000
 80018dc:	40010800 	.word	0x40010800
 80018e0:	40010c00 	.word	0x40010c00
 80018e4:	40011000 	.word	0x40011000
 80018e8:	40010400 	.word	0x40010400

080018ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
 80018f8:	4613      	mov	r3, r2
 80018fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018fc:	787b      	ldrb	r3, [r7, #1]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001902:	887a      	ldrh	r2, [r7, #2]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001908:	e003      	b.n	8001912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	041a      	lsls	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	611a      	str	r2, [r3, #16]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4013      	ands	r3, r2
 8001934:	041a      	lsls	r2, r3, #16
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43d9      	mvns	r1, r3
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	400b      	ands	r3, r1
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	611a      	str	r2, [r3, #16]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
	...

08001950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e26c      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8087 	beq.w	8001a7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001970:	4b92      	ldr	r3, [pc, #584]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b04      	cmp	r3, #4
 800197a:	d00c      	beq.n	8001996 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800197c:	4b8f      	ldr	r3, [pc, #572]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d112      	bne.n	80019ae <HAL_RCC_OscConfig+0x5e>
 8001988:	4b8c      	ldr	r3, [pc, #560]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001994:	d10b      	bne.n	80019ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001996:	4b89      	ldr	r3, [pc, #548]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d06c      	beq.n	8001a7c <HAL_RCC_OscConfig+0x12c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d168      	bne.n	8001a7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e246      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x76>
 80019b8:	4b80      	ldr	r3, [pc, #512]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a7f      	ldr	r2, [pc, #508]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e02e      	b.n	8001a24 <HAL_RCC_OscConfig+0xd4>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x98>
 80019ce:	4b7b      	ldr	r3, [pc, #492]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a7a      	ldr	r2, [pc, #488]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	4b78      	ldr	r3, [pc, #480]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a77      	ldr	r2, [pc, #476]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e01d      	b.n	8001a24 <HAL_RCC_OscConfig+0xd4>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0xbc>
 80019f2:	4b72      	ldr	r3, [pc, #456]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a71      	ldr	r2, [pc, #452]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b6f      	ldr	r3, [pc, #444]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6e      	ldr	r2, [pc, #440]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0xd4>
 8001a0c:	4b6b      	ldr	r3, [pc, #428]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a6a      	ldr	r2, [pc, #424]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b68      	ldr	r3, [pc, #416]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a67      	ldr	r2, [pc, #412]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d013      	beq.n	8001a54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fcf6 	bl	800141c <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fcf2 	bl	800141c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e1fa      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b5d      	ldr	r3, [pc, #372]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0xe4>
 8001a52:	e014      	b.n	8001a7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff fce2 	bl	800141c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fcde 	bl	800141c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e1e6      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	4b53      	ldr	r3, [pc, #332]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x10c>
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d063      	beq.n	8001b52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a8a:	4b4c      	ldr	r3, [pc, #304]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00b      	beq.n	8001aae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a96:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d11c      	bne.n	8001adc <HAL_RCC_OscConfig+0x18c>
 8001aa2:	4b46      	ldr	r3, [pc, #280]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d116      	bne.n	8001adc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aae:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x176>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e1ba      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4939      	ldr	r1, [pc, #228]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	e03a      	b.n	8001b52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d020      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae4:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aea:	f7ff fc97 	bl	800141c <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fc93 	bl	800141c <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e19b      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4927      	ldr	r1, [pc, #156]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	e015      	b.n	8001b52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b26:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fc76 	bl	800141c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b34:	f7ff fc72 	bl	800141c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e17a      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d03a      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d019      	beq.n	8001b9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_RCC_OscConfig+0x274>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6c:	f7ff fc56 	bl	800141c <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b74:	f7ff fc52 	bl	800141c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e15a      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b92:	2001      	movs	r0, #1
 8001b94:	f000 fa9a 	bl	80020cc <RCC_Delay>
 8001b98:	e01c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba0:	f7ff fc3c 	bl	800141c <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba6:	e00f      	b.n	8001bc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fc38 	bl	800141c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d908      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e140      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	42420000 	.word	0x42420000
 8001bc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc8:	4b9e      	ldr	r3, [pc, #632]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1e9      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80a6 	beq.w	8001d2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be6:	4b97      	ldr	r3, [pc, #604]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10d      	bne.n	8001c0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4b94      	ldr	r3, [pc, #592]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	4a93      	ldr	r2, [pc, #588]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	61d3      	str	r3, [r2, #28]
 8001bfe:	4b91      	ldr	r3, [pc, #580]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0e:	4b8e      	ldr	r3, [pc, #568]	; (8001e48 <HAL_RCC_OscConfig+0x4f8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d118      	bne.n	8001c4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1a:	4b8b      	ldr	r3, [pc, #556]	; (8001e48 <HAL_RCC_OscConfig+0x4f8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a8a      	ldr	r2, [pc, #552]	; (8001e48 <HAL_RCC_OscConfig+0x4f8>)
 8001c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c26:	f7ff fbf9 	bl	800141c <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2e:	f7ff fbf5 	bl	800141c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b64      	cmp	r3, #100	; 0x64
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e0fd      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	4b81      	ldr	r3, [pc, #516]	; (8001e48 <HAL_RCC_OscConfig+0x4f8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d106      	bne.n	8001c62 <HAL_RCC_OscConfig+0x312>
 8001c54:	4b7b      	ldr	r3, [pc, #492]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a7a      	ldr	r2, [pc, #488]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6213      	str	r3, [r2, #32]
 8001c60:	e02d      	b.n	8001cbe <HAL_RCC_OscConfig+0x36e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x334>
 8001c6a:	4b76      	ldr	r3, [pc, #472]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a75      	ldr	r2, [pc, #468]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	4b73      	ldr	r3, [pc, #460]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a72      	ldr	r2, [pc, #456]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	6213      	str	r3, [r2, #32]
 8001c82:	e01c      	b.n	8001cbe <HAL_RCC_OscConfig+0x36e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d10c      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x356>
 8001c8c:	4b6d      	ldr	r3, [pc, #436]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a6c      	ldr	r2, [pc, #432]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	4b6a      	ldr	r3, [pc, #424]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a69      	ldr	r2, [pc, #420]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6213      	str	r3, [r2, #32]
 8001ca4:	e00b      	b.n	8001cbe <HAL_RCC_OscConfig+0x36e>
 8001ca6:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a66      	ldr	r2, [pc, #408]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6213      	str	r3, [r2, #32]
 8001cb2:	4b64      	ldr	r3, [pc, #400]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a63      	ldr	r2, [pc, #396]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	f023 0304 	bic.w	r3, r3, #4
 8001cbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d015      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc6:	f7ff fba9 	bl	800141c <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f7ff fba5 	bl	800141c <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e0ab      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce4:	4b57      	ldr	r3, [pc, #348]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ee      	beq.n	8001cce <HAL_RCC_OscConfig+0x37e>
 8001cf0:	e014      	b.n	8001d1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fb93 	bl	800141c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7ff fb8f 	bl	800141c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e095      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d10:	4b4c      	ldr	r3, [pc, #304]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ee      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d105      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d22:	4b48      	ldr	r3, [pc, #288]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a47      	ldr	r2, [pc, #284]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8081 	beq.w	8001e3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d38:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d061      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d146      	bne.n	8001dda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4c:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <HAL_RCC_OscConfig+0x4fc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7ff fb63 	bl	800141c <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7ff fb5f 	bl	800141c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e067      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6c:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d80:	d108      	bne.n	8001d94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d82:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	492d      	ldr	r1, [pc, #180]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a19      	ldr	r1, [r3, #32]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	430b      	orrs	r3, r1
 8001da6:	4927      	ldr	r1, [pc, #156]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x4fc>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7ff fb33 	bl	800141c <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dba:	f7ff fb2f 	bl	800141c <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e037      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x46a>
 8001dd8:	e02f      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <HAL_RCC_OscConfig+0x4fc>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fb1c 	bl	800141c <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff fb18 	bl	800141c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e020      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x498>
 8001e06:	e018      	b.n	8001e3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e013      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40007000 	.word	0x40007000
 8001e4c:	42420060 	.word	0x42420060

08001e50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0d0      	b.n	8002006 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e64:	4b6a      	ldr	r3, [pc, #424]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d910      	bls.n	8001e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b67      	ldr	r3, [pc, #412]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 0207 	bic.w	r2, r3, #7
 8001e7a:	4965      	ldr	r1, [pc, #404]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0b8      	b.n	8002006 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eac:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4a58      	ldr	r2, [pc, #352]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a52      	ldr	r2, [pc, #328]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ece:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed0:	4b50      	ldr	r3, [pc, #320]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	494d      	ldr	r1, [pc, #308]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d040      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d115      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e07f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0e:	4b41      	ldr	r3, [pc, #260]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d109      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e073      	b.n	8002006 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1e:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e06b      	b.n	8002006 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2e:	4b39      	ldr	r3, [pc, #228]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f023 0203 	bic.w	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4936      	ldr	r1, [pc, #216]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f40:	f7ff fa6c 	bl	800141c <HAL_GetTick>
 8001f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	e00a      	b.n	8001f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f48:	f7ff fa68 	bl	800141c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e053      	b.n	8002006 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 020c 	and.w	r2, r3, #12
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d1eb      	bne.n	8001f48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f70:	4b27      	ldr	r3, [pc, #156]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d210      	bcs.n	8001fa0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 0207 	bic.w	r2, r3, #7
 8001f86:	4922      	ldr	r1, [pc, #136]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e032      	b.n	8002006 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4916      	ldr	r1, [pc, #88]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	490e      	ldr	r1, [pc, #56]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fde:	f000 f821 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	490a      	ldr	r1, [pc, #40]	; (8002018 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff0:	5ccb      	ldrb	r3, [r1, r3]
 8001ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <HAL_RCC_ClockConfig+0x1cc>)
 8001ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_RCC_ClockConfig+0x1d0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f9ca 	bl	8001398 <HAL_InitTick>

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40022000 	.word	0x40022000
 8002014:	40021000 	.word	0x40021000
 8002018:	080026cc 	.word	0x080026cc
 800201c:	20000010 	.word	0x20000010
 8002020:	20000014 	.word	0x20000014

08002024 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b04      	cmp	r3, #4
 800204c:	d002      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x30>
 800204e:	2b08      	cmp	r3, #8
 8002050:	d003      	beq.n	800205a <HAL_RCC_GetSysClockFreq+0x36>
 8002052:	e027      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002056:	613b      	str	r3, [r7, #16]
      break;
 8002058:	e027      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	0c9b      	lsrs	r3, r3, #18
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002064:	5cd3      	ldrb	r3, [r2, r3]
 8002066:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d010      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	0c5b      	lsrs	r3, r3, #17
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800207e:	5cd3      	ldrb	r3, [r2, r3]
 8002080:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002086:	fb02 f203 	mul.w	r2, r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	e004      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	613b      	str	r3, [r7, #16]
      break;
 80020a2:	e002      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_RCC_GetSysClockFreq+0x98>)
 80020a6:	613b      	str	r3, [r7, #16]
      break;
 80020a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020aa:	693b      	ldr	r3, [r7, #16]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	371c      	adds	r7, #28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	007a1200 	.word	0x007a1200
 80020c0:	080026dc 	.word	0x080026dc
 80020c4:	080026ec 	.word	0x080026ec
 80020c8:	003d0900 	.word	0x003d0900

080020cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <RCC_Delay+0x34>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <RCC_Delay+0x38>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0a5b      	lsrs	r3, r3, #9
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020e8:	bf00      	nop
  }
  while (Delay --);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1e5a      	subs	r2, r3, #1
 80020ee:	60fa      	str	r2, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f9      	bne.n	80020e8 <RCC_Delay+0x1c>
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	20000010 	.word	0x20000010
 8002104:	10624dd3 	.word	0x10624dd3

08002108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e041      	b.n	800219e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff f8ac 	bl	800128c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f000 f942 	bl	80023d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d001      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e035      	b.n	800222c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_TIM_Base_Start_IT+0x90>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d009      	beq.n	80021f6 <HAL_TIM_Base_Start_IT+0x4e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ea:	d004      	beq.n	80021f6 <HAL_TIM_Base_Start_IT+0x4e>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a12      	ldr	r2, [pc, #72]	; (800223c <HAL_TIM_Base_Start_IT+0x94>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d111      	bne.n	800221a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b06      	cmp	r3, #6
 8002206:	d010      	beq.n	800222a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002218:	e007      	b.n	800222a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40012c00 	.word	0x40012c00
 800223c:	40000400 	.word	0x40000400

08002240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_TIM_ConfigClockSource+0x1c>
 8002258:	2302      	movs	r3, #2
 800225a:	e0b4      	b.n	80023c6 <HAL_TIM_ConfigClockSource+0x186>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800227a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002282:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002294:	d03e      	beq.n	8002314 <HAL_TIM_ConfigClockSource+0xd4>
 8002296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229a:	f200 8087 	bhi.w	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 800229e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a2:	f000 8086 	beq.w	80023b2 <HAL_TIM_ConfigClockSource+0x172>
 80022a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022aa:	d87f      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022ac:	2b70      	cmp	r3, #112	; 0x70
 80022ae:	d01a      	beq.n	80022e6 <HAL_TIM_ConfigClockSource+0xa6>
 80022b0:	2b70      	cmp	r3, #112	; 0x70
 80022b2:	d87b      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022b4:	2b60      	cmp	r3, #96	; 0x60
 80022b6:	d050      	beq.n	800235a <HAL_TIM_ConfigClockSource+0x11a>
 80022b8:	2b60      	cmp	r3, #96	; 0x60
 80022ba:	d877      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022bc:	2b50      	cmp	r3, #80	; 0x50
 80022be:	d03c      	beq.n	800233a <HAL_TIM_ConfigClockSource+0xfa>
 80022c0:	2b50      	cmp	r3, #80	; 0x50
 80022c2:	d873      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022c4:	2b40      	cmp	r3, #64	; 0x40
 80022c6:	d058      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x13a>
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	d86f      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022cc:	2b30      	cmp	r3, #48	; 0x30
 80022ce:	d064      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x15a>
 80022d0:	2b30      	cmp	r3, #48	; 0x30
 80022d2:	d86b      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	d060      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x15a>
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d867      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d05c      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x15a>
 80022e0:	2b10      	cmp	r3, #16
 80022e2:	d05a      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x15a>
 80022e4:	e062      	b.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6899      	ldr	r1, [r3, #8]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f000 f93a 	bl	800256e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	609a      	str	r2, [r3, #8]
      break;
 8002312:	e04f      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6899      	ldr	r1, [r3, #8]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f000 f923 	bl	800256e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002336:	609a      	str	r2, [r3, #8]
      break;
 8002338:	e03c      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6859      	ldr	r1, [r3, #4]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	461a      	mov	r2, r3
 8002348:	f000 f89a 	bl	8002480 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2150      	movs	r1, #80	; 0x50
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f8f1 	bl	800253a <TIM_ITRx_SetConfig>
      break;
 8002358:	e02c      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	461a      	mov	r2, r3
 8002368:	f000 f8b8 	bl	80024dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2160      	movs	r1, #96	; 0x60
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f8e1 	bl	800253a <TIM_ITRx_SetConfig>
      break;
 8002378:	e01c      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	461a      	mov	r2, r3
 8002388:	f000 f87a 	bl	8002480 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2140      	movs	r1, #64	; 0x40
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f8d1 	bl	800253a <TIM_ITRx_SetConfig>
      break;
 8002398:	e00c      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4619      	mov	r1, r3
 80023a4:	4610      	mov	r0, r2
 80023a6:	f000 f8c8 	bl	800253a <TIM_ITRx_SetConfig>
      break;
 80023aa:	e003      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      break;
 80023b0:	e000      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a25      	ldr	r2, [pc, #148]	; (8002478 <TIM_Base_SetConfig+0xa8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d007      	beq.n	80023f8 <TIM_Base_SetConfig+0x28>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ee:	d003      	beq.n	80023f8 <TIM_Base_SetConfig+0x28>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a22      	ldr	r2, [pc, #136]	; (800247c <TIM_Base_SetConfig+0xac>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d108      	bne.n	800240a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a1a      	ldr	r2, [pc, #104]	; (8002478 <TIM_Base_SetConfig+0xa8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d007      	beq.n	8002422 <TIM_Base_SetConfig+0x52>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002418:	d003      	beq.n	8002422 <TIM_Base_SetConfig+0x52>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a17      	ldr	r2, [pc, #92]	; (800247c <TIM_Base_SetConfig+0xac>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d108      	bne.n	8002434 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a07      	ldr	r2, [pc, #28]	; (8002478 <TIM_Base_SetConfig+0xa8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d103      	bne.n	8002468 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	615a      	str	r2, [r3, #20]
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40000400 	.word	0x40000400

08002480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	f023 0201 	bic.w	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f023 030a 	bic.w	r3, r3, #10
 80024bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	621a      	str	r2, [r3, #32]
}
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f023 0210 	bic.w	r2, r3, #16
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	031b      	lsls	r3, r3, #12
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002518:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	621a      	str	r2, [r3, #32]
}
 8002530:	bf00      	nop
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800253a:	b480      	push	{r7}
 800253c:	b085      	sub	sp, #20
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	f043 0307 	orr.w	r3, r3, #7
 800255c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	609a      	str	r2, [r3, #8]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr

0800256e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800256e:	b480      	push	{r7}
 8002570:	b087      	sub	sp, #28
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002588:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	021a      	lsls	r2, r3, #8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	431a      	orrs	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4313      	orrs	r3, r2
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	609a      	str	r2, [r3, #8]
}
 80025a2:	bf00      	nop
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e041      	b.n	8002648 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a14      	ldr	r2, [pc, #80]	; (8002654 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d009      	beq.n	800261c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002610:	d004      	beq.n	800261c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a10      	ldr	r2, [pc, #64]	; (8002658 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d10c      	bne.n	8002636 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002622:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	4313      	orrs	r3, r2
 800262c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40012c00 	.word	0x40012c00
 8002658:	40000400 	.word	0x40000400

0800265c <__libc_init_array>:
 800265c:	b570      	push	{r4, r5, r6, lr}
 800265e:	2600      	movs	r6, #0
 8002660:	4d0c      	ldr	r5, [pc, #48]	; (8002694 <__libc_init_array+0x38>)
 8002662:	4c0d      	ldr	r4, [pc, #52]	; (8002698 <__libc_init_array+0x3c>)
 8002664:	1b64      	subs	r4, r4, r5
 8002666:	10a4      	asrs	r4, r4, #2
 8002668:	42a6      	cmp	r6, r4
 800266a:	d109      	bne.n	8002680 <__libc_init_array+0x24>
 800266c:	f000 f822 	bl	80026b4 <_init>
 8002670:	2600      	movs	r6, #0
 8002672:	4d0a      	ldr	r5, [pc, #40]	; (800269c <__libc_init_array+0x40>)
 8002674:	4c0a      	ldr	r4, [pc, #40]	; (80026a0 <__libc_init_array+0x44>)
 8002676:	1b64      	subs	r4, r4, r5
 8002678:	10a4      	asrs	r4, r4, #2
 800267a:	42a6      	cmp	r6, r4
 800267c:	d105      	bne.n	800268a <__libc_init_array+0x2e>
 800267e:	bd70      	pop	{r4, r5, r6, pc}
 8002680:	f855 3b04 	ldr.w	r3, [r5], #4
 8002684:	4798      	blx	r3
 8002686:	3601      	adds	r6, #1
 8002688:	e7ee      	b.n	8002668 <__libc_init_array+0xc>
 800268a:	f855 3b04 	ldr.w	r3, [r5], #4
 800268e:	4798      	blx	r3
 8002690:	3601      	adds	r6, #1
 8002692:	e7f2      	b.n	800267a <__libc_init_array+0x1e>
 8002694:	080026f0 	.word	0x080026f0
 8002698:	080026f0 	.word	0x080026f0
 800269c:	080026f0 	.word	0x080026f0
 80026a0:	080026f4 	.word	0x080026f4

080026a4 <memset>:
 80026a4:	4603      	mov	r3, r0
 80026a6:	4402      	add	r2, r0
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d100      	bne.n	80026ae <memset+0xa>
 80026ac:	4770      	bx	lr
 80026ae:	f803 1b01 	strb.w	r1, [r3], #1
 80026b2:	e7f9      	b.n	80026a8 <memset+0x4>

080026b4 <_init>:
 80026b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b6:	bf00      	nop
 80026b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ba:	bc08      	pop	{r3}
 80026bc:	469e      	mov	lr, r3
 80026be:	4770      	bx	lr

080026c0 <_fini>:
 80026c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c2:	bf00      	nop
 80026c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c6:	bc08      	pop	{r3}
 80026c8:	469e      	mov	lr, r3
 80026ca:	4770      	bx	lr
