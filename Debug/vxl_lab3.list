
vxl_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a18  08002a18  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a18  08002a18  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a18  08002a18  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a18  08002a18  00012a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a1c  08002a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000001c  08002a3c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002a3c  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008be0  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001920  00000000  00000000  00028c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002a548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002af38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016acd  00000000  00000000  0002b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1f5  00000000  00000000  0004230d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823aa  00000000  00000000  0004d502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf8ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d4  00000000  00000000  000cf900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080029dc 	.word	0x080029dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080029dc 	.word	0x080029dc

0800014c <isButton1Pressed>:
int TimeOutForNoKeyPress = 1000;
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000038 	.word	0x20000038

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	2000003c 	.word	0x2000003c

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000040 	.word	0x20000040

080001b8 <fsm_run>:
int tempYELLOW = 0;
int tempGREEN = 0;
int dis1 = 0;
int dis2 = 0;

void fsm_run() {
 80001b8:	b5b0      	push	{r4, r5, r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	switch (state) {
 80001bc:	4bac      	ldr	r3, [pc, #688]	; (8000470 <fsm_run+0x2b8>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b1e      	cmp	r3, #30
 80001c2:	f200 845c 	bhi.w	8000a7e <fsm_run+0x8c6>
 80001c6:	a201      	add	r2, pc, #4	; (adr r2, 80001cc <fsm_run+0x14>)
 80001c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001cc:	08000249 	.word	0x08000249
 80001d0:	080002c5 	.word	0x080002c5
 80001d4:	080005d7 	.word	0x080005d7
 80001d8:	080007d9 	.word	0x080007d9
 80001dc:	080009cd 	.word	0x080009cd
 80001e0:	08000a7f 	.word	0x08000a7f
 80001e4:	08000a7f 	.word	0x08000a7f
 80001e8:	08000a7f 	.word	0x08000a7f
 80001ec:	08000a7f 	.word	0x08000a7f
 80001f0:	08000a7f 	.word	0x08000a7f
 80001f4:	08000a7f 	.word	0x08000a7f
 80001f8:	08000a7f 	.word	0x08000a7f
 80001fc:	08000a7f 	.word	0x08000a7f
 8000200:	08000a7f 	.word	0x08000a7f
 8000204:	08000a7f 	.word	0x08000a7f
 8000208:	08000a7f 	.word	0x08000a7f
 800020c:	08000a7f 	.word	0x08000a7f
 8000210:	08000a7f 	.word	0x08000a7f
 8000214:	08000a7f 	.word	0x08000a7f
 8000218:	08000a7f 	.word	0x08000a7f
 800021c:	080006e5 	.word	0x080006e5
 8000220:	08000a7f 	.word	0x08000a7f
 8000224:	08000a7f 	.word	0x08000a7f
 8000228:	08000a7f 	.word	0x08000a7f
 800022c:	08000a7f 	.word	0x08000a7f
 8000230:	08000a7f 	.word	0x08000a7f
 8000234:	08000a7f 	.word	0x08000a7f
 8000238:	08000a7f 	.word	0x08000a7f
 800023c:	08000a7f 	.word	0x08000a7f
 8000240:	08000a7f 	.word	0x08000a7f
 8000244:	080008bd 	.word	0x080008bd
	case RESET:
		setTimer1(500);
 8000248:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800024c:	f001 f94c 	bl	80014e8 <setTimer1>
		setTimer2(1000);
 8000250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000254:	f001 f962 	bl	800151c <setTimer2>

		tempRED = timeRED;
 8000258:	4b86      	ldr	r3, [pc, #536]	; (8000474 <fsm_run+0x2bc>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a86      	ldr	r2, [pc, #536]	; (8000478 <fsm_run+0x2c0>)
 800025e:	6013      	str	r3, [r2, #0]
		tempYELLOW = timeYELLOW;
 8000260:	4b86      	ldr	r3, [pc, #536]	; (800047c <fsm_run+0x2c4>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a86      	ldr	r2, [pc, #536]	; (8000480 <fsm_run+0x2c8>)
 8000266:	6013      	str	r3, [r2, #0]
		tempGREEN = timeGREEN;
 8000268:	4b86      	ldr	r3, [pc, #536]	; (8000484 <fsm_run+0x2cc>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a86      	ldr	r2, [pc, #536]	; (8000488 <fsm_run+0x2d0>)
 800026e:	6013      	str	r3, [r2, #0]

		counter1 = 0;
 8000270:	4b86      	ldr	r3, [pc, #536]	; (800048c <fsm_run+0x2d4>)
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
		counter2 = 0;
 8000276:	4b86      	ldr	r3, [pc, #536]	; (8000490 <fsm_run+0x2d8>)
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800027c:	2201      	movs	r2, #1
 800027e:	2110      	movs	r1, #16
 8000280:	4884      	ldr	r0, [pc, #528]	; (8000494 <fsm_run+0x2dc>)
 8000282:	f001 fcc7 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000286:	2201      	movs	r2, #1
 8000288:	2140      	movs	r1, #64	; 0x40
 800028a:	4882      	ldr	r0, [pc, #520]	; (8000494 <fsm_run+0x2dc>)
 800028c:	f001 fcc2 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000290:	2201      	movs	r2, #1
 8000292:	2120      	movs	r1, #32
 8000294:	487f      	ldr	r0, [pc, #508]	; (8000494 <fsm_run+0x2dc>)
 8000296:	f001 fcbd 	bl	8001c14 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2180      	movs	r1, #128	; 0x80
 800029e:	487d      	ldr	r0, [pc, #500]	; (8000494 <fsm_run+0x2dc>)
 80002a0:	f001 fcb8 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80002a4:	2201      	movs	r2, #1
 80002a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002aa:	487a      	ldr	r0, [pc, #488]	; (8000494 <fsm_run+0x2dc>)
 80002ac:	f001 fcb2 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 80002b0:	2201      	movs	r2, #1
 80002b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b6:	4877      	ldr	r0, [pc, #476]	; (8000494 <fsm_run+0x2dc>)
 80002b8:	f001 fcac 	bl	8001c14 <HAL_GPIO_WritePin>

		state = MODE_1;
 80002bc:	4b6c      	ldr	r3, [pc, #432]	; (8000470 <fsm_run+0x2b8>)
 80002be:	2201      	movs	r2, #1
 80002c0:	601a      	str	r2, [r3, #0]
		break;
 80002c2:	e3e9      	b.n	8000a98 <fsm_run+0x8e0>
	case MODE_1:
		updateClockBuffer(dis1/10, dis1%10, dis2/10, dis2%10);
 80002c4:	4b74      	ldr	r3, [pc, #464]	; (8000498 <fsm_run+0x2e0>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a74      	ldr	r2, [pc, #464]	; (800049c <fsm_run+0x2e4>)
 80002ca:	fb82 1203 	smull	r1, r2, r2, r3
 80002ce:	1092      	asrs	r2, r2, #2
 80002d0:	17db      	asrs	r3, r3, #31
 80002d2:	1ad4      	subs	r4, r2, r3
 80002d4:	4b70      	ldr	r3, [pc, #448]	; (8000498 <fsm_run+0x2e0>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4b70      	ldr	r3, [pc, #448]	; (800049c <fsm_run+0x2e4>)
 80002da:	fb83 1302 	smull	r1, r3, r3, r2
 80002de:	1099      	asrs	r1, r3, #2
 80002e0:	17d3      	asrs	r3, r2, #31
 80002e2:	1ac9      	subs	r1, r1, r3
 80002e4:	460b      	mov	r3, r1
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	440b      	add	r3, r1
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	1ad1      	subs	r1, r2, r3
 80002ee:	4b6c      	ldr	r3, [pc, #432]	; (80004a0 <fsm_run+0x2e8>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a6a      	ldr	r2, [pc, #424]	; (800049c <fsm_run+0x2e4>)
 80002f4:	fb82 0203 	smull	r0, r2, r2, r3
 80002f8:	1092      	asrs	r2, r2, #2
 80002fa:	17db      	asrs	r3, r3, #31
 80002fc:	1ad5      	subs	r5, r2, r3
 80002fe:	4b68      	ldr	r3, [pc, #416]	; (80004a0 <fsm_run+0x2e8>)
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	4b66      	ldr	r3, [pc, #408]	; (800049c <fsm_run+0x2e4>)
 8000304:	fb83 0302 	smull	r0, r3, r3, r2
 8000308:	1098      	asrs	r0, r3, #2
 800030a:	17d3      	asrs	r3, r2, #31
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4603      	mov	r3, r0
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	4403      	add	r3, r0
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	1ad0      	subs	r0, r2, r3
 8000318:	4603      	mov	r3, r0
 800031a:	462a      	mov	r2, r5
 800031c:	4620      	mov	r0, r4
 800031e:	f000 ff23 	bl	8001168 <updateClockBuffer>

		if(timer1_flag == 1){
 8000322:	4b60      	ldr	r3, [pc, #384]	; (80004a4 <fsm_run+0x2ec>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b01      	cmp	r3, #1
 8000328:	f040 8121 	bne.w	800056e <fsm_run+0x3b6>
			counter1++;
 800032c:	4b57      	ldr	r3, [pc, #348]	; (800048c <fsm_run+0x2d4>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	3301      	adds	r3, #1
 8000332:	4a56      	ldr	r2, [pc, #344]	; (800048c <fsm_run+0x2d4>)
 8000334:	6013      	str	r3, [r2, #0]
			counter2++;
 8000336:	4b56      	ldr	r3, [pc, #344]	; (8000490 <fsm_run+0x2d8>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	3301      	adds	r3, #1
 800033c:	4a54      	ldr	r2, [pc, #336]	; (8000490 <fsm_run+0x2d8>)
 800033e:	6013      	str	r3, [r2, #0]

			if(counter1 <= timeRED){
 8000340:	4b52      	ldr	r3, [pc, #328]	; (800048c <fsm_run+0x2d4>)
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	4b4b      	ldr	r3, [pc, #300]	; (8000474 <fsm_run+0x2bc>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	429a      	cmp	r2, r3
 800034a:	dc16      	bgt.n	800037a <fsm_run+0x1c2>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	2110      	movs	r1, #16
 8000350:	4850      	ldr	r0, [pc, #320]	; (8000494 <fsm_run+0x2dc>)
 8000352:	f001 fc5f 	bl	8001c14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000356:	2201      	movs	r2, #1
 8000358:	2120      	movs	r1, #32
 800035a:	484e      	ldr	r0, [pc, #312]	; (8000494 <fsm_run+0x2dc>)
 800035c:	f001 fc5a 	bl	8001c14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000360:	2201      	movs	r2, #1
 8000362:	2140      	movs	r1, #64	; 0x40
 8000364:	484b      	ldr	r0, [pc, #300]	; (8000494 <fsm_run+0x2dc>)
 8000366:	f001 fc55 	bl	8001c14 <HAL_GPIO_WritePin>

				dis1 = timeRED - counter1;
 800036a:	4b42      	ldr	r3, [pc, #264]	; (8000474 <fsm_run+0x2bc>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	4b47      	ldr	r3, [pc, #284]	; (800048c <fsm_run+0x2d4>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	1ad3      	subs	r3, r2, r3
 8000374:	4a48      	ldr	r2, [pc, #288]	; (8000498 <fsm_run+0x2e0>)
 8000376:	6013      	str	r3, [r2, #0]
 8000378:	e04a      	b.n	8000410 <fsm_run+0x258>
			}
			else if(counter1 <= timeRED + timeGREEN){
 800037a:	4b3e      	ldr	r3, [pc, #248]	; (8000474 <fsm_run+0x2bc>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	4b41      	ldr	r3, [pc, #260]	; (8000484 <fsm_run+0x2cc>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	441a      	add	r2, r3
 8000384:	4b41      	ldr	r3, [pc, #260]	; (800048c <fsm_run+0x2d4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	429a      	cmp	r2, r3
 800038a:	db19      	blt.n	80003c0 <fsm_run+0x208>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2110      	movs	r1, #16
 8000390:	4840      	ldr	r0, [pc, #256]	; (8000494 <fsm_run+0x2dc>)
 8000392:	f001 fc3f 	bl	8001c14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	2120      	movs	r1, #32
 800039a:	483e      	ldr	r0, [pc, #248]	; (8000494 <fsm_run+0x2dc>)
 800039c:	f001 fc3a 	bl	8001c14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2140      	movs	r1, #64	; 0x40
 80003a4:	483b      	ldr	r0, [pc, #236]	; (8000494 <fsm_run+0x2dc>)
 80003a6:	f001 fc35 	bl	8001c14 <HAL_GPIO_WritePin>

				dis1 = timeRED + timeGREEN - counter1;
 80003aa:	4b32      	ldr	r3, [pc, #200]	; (8000474 <fsm_run+0x2bc>)
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	4b35      	ldr	r3, [pc, #212]	; (8000484 <fsm_run+0x2cc>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	441a      	add	r2, r3
 80003b4:	4b35      	ldr	r3, [pc, #212]	; (800048c <fsm_run+0x2d4>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	1ad3      	subs	r3, r2, r3
 80003ba:	4a37      	ldr	r2, [pc, #220]	; (8000498 <fsm_run+0x2e0>)
 80003bc:	6013      	str	r3, [r2, #0]
 80003be:	e027      	b.n	8000410 <fsm_run+0x258>
			}
			else if(counter1 <= timeRED + timeYELLOW + timeGREEN){
 80003c0:	4b2c      	ldr	r3, [pc, #176]	; (8000474 <fsm_run+0x2bc>)
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	4b2d      	ldr	r3, [pc, #180]	; (800047c <fsm_run+0x2c4>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	441a      	add	r2, r3
 80003ca:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <fsm_run+0x2cc>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	441a      	add	r2, r3
 80003d0:	4b2e      	ldr	r3, [pc, #184]	; (800048c <fsm_run+0x2d4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	db1b      	blt.n	8000410 <fsm_run+0x258>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2110      	movs	r1, #16
 80003dc:	482d      	ldr	r0, [pc, #180]	; (8000494 <fsm_run+0x2dc>)
 80003de:	f001 fc19 	bl	8001c14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2120      	movs	r1, #32
 80003e6:	482b      	ldr	r0, [pc, #172]	; (8000494 <fsm_run+0x2dc>)
 80003e8:	f001 fc14 	bl	8001c14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2140      	movs	r1, #64	; 0x40
 80003f0:	4828      	ldr	r0, [pc, #160]	; (8000494 <fsm_run+0x2dc>)
 80003f2:	f001 fc0f 	bl	8001c14 <HAL_GPIO_WritePin>

				dis1 = timeRED + timeYELLOW + timeGREEN - counter1;
 80003f6:	4b1f      	ldr	r3, [pc, #124]	; (8000474 <fsm_run+0x2bc>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	4b20      	ldr	r3, [pc, #128]	; (800047c <fsm_run+0x2c4>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	441a      	add	r2, r3
 8000400:	4b20      	ldr	r3, [pc, #128]	; (8000484 <fsm_run+0x2cc>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	441a      	add	r2, r3
 8000406:	4b21      	ldr	r3, [pc, #132]	; (800048c <fsm_run+0x2d4>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	1ad3      	subs	r3, r2, r3
 800040c:	4a22      	ldr	r2, [pc, #136]	; (8000498 <fsm_run+0x2e0>)
 800040e:	6013      	str	r3, [r2, #0]
			}
			if(counter1 >= timeRED + timeYELLOW + timeGREEN) counter1 = -1;
 8000410:	4b18      	ldr	r3, [pc, #96]	; (8000474 <fsm_run+0x2bc>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	4b19      	ldr	r3, [pc, #100]	; (800047c <fsm_run+0x2c4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	441a      	add	r2, r3
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <fsm_run+0x2cc>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	441a      	add	r2, r3
 8000420:	4b1a      	ldr	r3, [pc, #104]	; (800048c <fsm_run+0x2d4>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	429a      	cmp	r2, r3
 8000426:	dc03      	bgt.n	8000430 <fsm_run+0x278>
 8000428:	4b18      	ldr	r3, [pc, #96]	; (800048c <fsm_run+0x2d4>)
 800042a:	f04f 32ff 	mov.w	r2, #4294967295
 800042e:	601a      	str	r2, [r3, #0]

			if(counter2 <= timeGREEN){
 8000430:	4b17      	ldr	r3, [pc, #92]	; (8000490 <fsm_run+0x2d8>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <fsm_run+0x2cc>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	429a      	cmp	r2, r3
 800043a:	dc35      	bgt.n	80004a8 <fsm_run+0x2f0>

				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2180      	movs	r1, #128	; 0x80
 8000440:	4814      	ldr	r0, [pc, #80]	; (8000494 <fsm_run+0x2dc>)
 8000442:	f001 fbe7 	bl	8001c14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000446:	2201      	movs	r2, #1
 8000448:	f44f 7180 	mov.w	r1, #256	; 0x100
 800044c:	4811      	ldr	r0, [pc, #68]	; (8000494 <fsm_run+0x2dc>)
 800044e:	f001 fbe1 	bl	8001c14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000458:	480e      	ldr	r0, [pc, #56]	; (8000494 <fsm_run+0x2dc>)
 800045a:	f001 fbdb 	bl	8001c14 <HAL_GPIO_WritePin>

				dis2 = timeGREEN - counter2;
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <fsm_run+0x2cc>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <fsm_run+0x2d8>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	1ad3      	subs	r3, r2, r3
 8000468:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <fsm_run+0x2e8>)
 800046a:	6013      	str	r3, [r2, #0]
 800046c:	e06b      	b.n	8000546 <fsm_run+0x38e>
 800046e:	bf00      	nop
 8000470:	20000060 	.word	0x20000060
 8000474:	20000000 	.word	0x20000000
 8000478:	2000004c 	.word	0x2000004c
 800047c:	20000008 	.word	0x20000008
 8000480:	20000050 	.word	0x20000050
 8000484:	20000004 	.word	0x20000004
 8000488:	20000054 	.word	0x20000054
 800048c:	20000044 	.word	0x20000044
 8000490:	20000048 	.word	0x20000048
 8000494:	40010800 	.word	0x40010800
 8000498:	20000058 	.word	0x20000058
 800049c:	66666667 	.word	0x66666667
 80004a0:	2000005c 	.word	0x2000005c
 80004a4:	20000080 	.word	0x20000080
			}
			else if(counter2 <= timeGREEN + timeYELLOW){
 80004a8:	4b83      	ldr	r3, [pc, #524]	; (80006b8 <fsm_run+0x500>)
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	4b83      	ldr	r3, [pc, #524]	; (80006bc <fsm_run+0x504>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	441a      	add	r2, r3
 80004b2:	4b83      	ldr	r3, [pc, #524]	; (80006c0 <fsm_run+0x508>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	db1b      	blt.n	80004f2 <fsm_run+0x33a>

				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	4881      	ldr	r0, [pc, #516]	; (80006c4 <fsm_run+0x50c>)
 80004c0:	f001 fba8 	bl	8001c14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ca:	487e      	ldr	r0, [pc, #504]	; (80006c4 <fsm_run+0x50c>)
 80004cc:	f001 fba2 	bl	8001c14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d6:	487b      	ldr	r0, [pc, #492]	; (80006c4 <fsm_run+0x50c>)
 80004d8:	f001 fb9c 	bl	8001c14 <HAL_GPIO_WritePin>

				dis2 = timeGREEN + timeYELLOW - counter2;
 80004dc:	4b76      	ldr	r3, [pc, #472]	; (80006b8 <fsm_run+0x500>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b76      	ldr	r3, [pc, #472]	; (80006bc <fsm_run+0x504>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	441a      	add	r2, r3
 80004e6:	4b76      	ldr	r3, [pc, #472]	; (80006c0 <fsm_run+0x508>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	4a76      	ldr	r2, [pc, #472]	; (80006c8 <fsm_run+0x510>)
 80004ee:	6013      	str	r3, [r2, #0]
 80004f0:	e029      	b.n	8000546 <fsm_run+0x38e>
			}
			else if(counter2 <= timeRED + timeYELLOW + timeGREEN){
 80004f2:	4b76      	ldr	r3, [pc, #472]	; (80006cc <fsm_run+0x514>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	4b71      	ldr	r3, [pc, #452]	; (80006bc <fsm_run+0x504>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	441a      	add	r2, r3
 80004fc:	4b6e      	ldr	r3, [pc, #440]	; (80006b8 <fsm_run+0x500>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	441a      	add	r2, r3
 8000502:	4b6f      	ldr	r3, [pc, #444]	; (80006c0 <fsm_run+0x508>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	429a      	cmp	r2, r3
 8000508:	db1d      	blt.n	8000546 <fsm_run+0x38e>

				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	486d      	ldr	r0, [pc, #436]	; (80006c4 <fsm_run+0x50c>)
 8000510:	f001 fb80 	bl	8001c14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051a:	486a      	ldr	r0, [pc, #424]	; (80006c4 <fsm_run+0x50c>)
 800051c:	f001 fb7a 	bl	8001c14 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000526:	4867      	ldr	r0, [pc, #412]	; (80006c4 <fsm_run+0x50c>)
 8000528:	f001 fb74 	bl	8001c14 <HAL_GPIO_WritePin>

				dis2 = timeRED + timeYELLOW + timeGREEN - counter2;
 800052c:	4b67      	ldr	r3, [pc, #412]	; (80006cc <fsm_run+0x514>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b62      	ldr	r3, [pc, #392]	; (80006bc <fsm_run+0x504>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	441a      	add	r2, r3
 8000536:	4b60      	ldr	r3, [pc, #384]	; (80006b8 <fsm_run+0x500>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	441a      	add	r2, r3
 800053c:	4b60      	ldr	r3, [pc, #384]	; (80006c0 <fsm_run+0x508>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	4a61      	ldr	r2, [pc, #388]	; (80006c8 <fsm_run+0x510>)
 8000544:	6013      	str	r3, [r2, #0]
			}
			if(counter2 >= timeRED + timeYELLOW + timeGREEN) counter2 = -1;
 8000546:	4b61      	ldr	r3, [pc, #388]	; (80006cc <fsm_run+0x514>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	4b5c      	ldr	r3, [pc, #368]	; (80006bc <fsm_run+0x504>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	441a      	add	r2, r3
 8000550:	4b59      	ldr	r3, [pc, #356]	; (80006b8 <fsm_run+0x500>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	441a      	add	r2, r3
 8000556:	4b5a      	ldr	r3, [pc, #360]	; (80006c0 <fsm_run+0x508>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	429a      	cmp	r2, r3
 800055c:	dc03      	bgt.n	8000566 <fsm_run+0x3ae>
 800055e:	4b58      	ldr	r3, [pc, #352]	; (80006c0 <fsm_run+0x508>)
 8000560:	f04f 32ff 	mov.w	r2, #4294967295
 8000564:	601a      	str	r2, [r3, #0]

			setTimer1(1000);
 8000566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056a:	f000 ffbd 	bl	80014e8 <setTimer1>
		}



		if (isButton1Pressed() == 1) {
 800056e:	f7ff fded 	bl	800014c <isButton1Pressed>
 8000572:	4603      	mov	r3, r0
 8000574:	2b01      	cmp	r3, #1
 8000576:	f040 8284 	bne.w	8000a82 <fsm_run+0x8ca>
			setTimer2(500);
 800057a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800057e:	f000 ffcd 	bl	800151c <setTimer2>

			counter1 = 0;
 8000582:	4b53      	ldr	r3, [pc, #332]	; (80006d0 <fsm_run+0x518>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
			counter2 = 0;
 8000588:	4b4d      	ldr	r3, [pc, #308]	; (80006c0 <fsm_run+0x508>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]

			state = MODE_2;
 800058e:	4b51      	ldr	r3, [pc, #324]	; (80006d4 <fsm_run+0x51c>)
 8000590:	2202      	movs	r2, #2
 8000592:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2110      	movs	r1, #16
 8000598:	484a      	ldr	r0, [pc, #296]	; (80006c4 <fsm_run+0x50c>)
 800059a:	f001 fb3b 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	4848      	ldr	r0, [pc, #288]	; (80006c4 <fsm_run+0x50c>)
 80005a4:	f001 fb36 	bl	8001c14 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2120      	movs	r1, #32
 80005ac:	4845      	ldr	r0, [pc, #276]	; (80006c4 <fsm_run+0x50c>)
 80005ae:	f001 fb31 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b8:	4842      	ldr	r0, [pc, #264]	; (80006c4 <fsm_run+0x50c>)
 80005ba:	f001 fb2b 	bl	8001c14 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2140      	movs	r1, #64	; 0x40
 80005c2:	4840      	ldr	r0, [pc, #256]	; (80006c4 <fsm_run+0x50c>)
 80005c4:	f001 fb26 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ce:	483d      	ldr	r0, [pc, #244]	; (80006c4 <fsm_run+0x50c>)
 80005d0:	f001 fb20 	bl	8001c14 <HAL_GPIO_WritePin>
		}
		break;
 80005d4:	e255      	b.n	8000a82 <fsm_run+0x8ca>
	case MODE_2:
		updateClockBuffer(0, 2, tempRED/10, tempRED%10);
 80005d6:	4b40      	ldr	r3, [pc, #256]	; (80006d8 <fsm_run+0x520>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a40      	ldr	r2, [pc, #256]	; (80006dc <fsm_run+0x524>)
 80005dc:	fb82 1203 	smull	r1, r2, r2, r3
 80005e0:	1092      	asrs	r2, r2, #2
 80005e2:	17db      	asrs	r3, r3, #31
 80005e4:	1ad0      	subs	r0, r2, r3
 80005e6:	4b3c      	ldr	r3, [pc, #240]	; (80006d8 <fsm_run+0x520>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <fsm_run+0x524>)
 80005ec:	fb83 1302 	smull	r1, r3, r3, r2
 80005f0:	1099      	asrs	r1, r3, #2
 80005f2:	17d3      	asrs	r3, r2, #31
 80005f4:	1ac9      	subs	r1, r1, r3
 80005f6:	460b      	mov	r3, r1
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	440b      	add	r3, r1
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	1ad1      	subs	r1, r2, r3
 8000600:	460b      	mov	r3, r1
 8000602:	4602      	mov	r2, r0
 8000604:	2102      	movs	r1, #2
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fdae 	bl	8001168 <updateClockBuffer>

		if (timer2_flag == 1) {
 800060c:	4b34      	ldr	r3, [pc, #208]	; (80006e0 <fsm_run+0x528>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d10b      	bne.n	800062c <fsm_run+0x474>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000614:	2110      	movs	r1, #16
 8000616:	482b      	ldr	r0, [pc, #172]	; (80006c4 <fsm_run+0x50c>)
 8000618:	f001 fb14 	bl	8001c44 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	4829      	ldr	r0, [pc, #164]	; (80006c4 <fsm_run+0x50c>)
 8000620:	f001 fb10 	bl	8001c44 <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000624:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000628:	f000 ff78 	bl	800151c <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 800062c:	f7ff fd8e 	bl	800014c <isButton1Pressed>
 8000630:	4603      	mov	r3, r0
 8000632:	2b01      	cmp	r3, #1
 8000634:	d126      	bne.n	8000684 <fsm_run+0x4cc>
			setTimer2(500);
 8000636:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800063a:	f000 ff6f 	bl	800151c <setTimer2>

			state = MODE_3;
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <fsm_run+0x51c>)
 8000640:	2203      	movs	r2, #3
 8000642:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	2110      	movs	r1, #16
 8000648:	481e      	ldr	r0, [pc, #120]	; (80006c4 <fsm_run+0x50c>)
 800064a:	f001 fae3 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	481c      	ldr	r0, [pc, #112]	; (80006c4 <fsm_run+0x50c>)
 8000654:	f001 fade 	bl	8001c14 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2120      	movs	r1, #32
 800065c:	4819      	ldr	r0, [pc, #100]	; (80006c4 <fsm_run+0x50c>)
 800065e:	f001 fad9 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000668:	4816      	ldr	r0, [pc, #88]	; (80006c4 <fsm_run+0x50c>)
 800066a:	f001 fad3 	bl	8001c14 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2140      	movs	r1, #64	; 0x40
 8000672:	4814      	ldr	r0, [pc, #80]	; (80006c4 <fsm_run+0x50c>)
 8000674:	f001 face 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067e:	4811      	ldr	r0, [pc, #68]	; (80006c4 <fsm_run+0x50c>)
 8000680:	f001 fac8 	bl	8001c14 <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 8000684:	f7ff fd74 	bl	8000170 <isButton2Pressed>
 8000688:	4603      	mov	r3, r0
 800068a:	2b01      	cmp	r3, #1
 800068c:	f040 81fb 	bne.w	8000a86 <fsm_run+0x8ce>
			setTimer2(500);
 8000690:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000694:	f000 ff42 	bl	800151c <setTimer2>
			tempRED++;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <fsm_run+0x520>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3301      	adds	r3, #1
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <fsm_run+0x520>)
 80006a0:	6013      	str	r3, [r2, #0]
			if (tempRED >= 100) tempRED = 0;
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <fsm_run+0x520>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b63      	cmp	r3, #99	; 0x63
 80006a8:	dd02      	ble.n	80006b0 <fsm_run+0x4f8>
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <fsm_run+0x520>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
			state = MODI_2;
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <fsm_run+0x51c>)
 80006b2:	2214      	movs	r2, #20
 80006b4:	601a      	str	r2, [r3, #0]
		}
		break;
 80006b6:	e1e6      	b.n	8000a86 <fsm_run+0x8ce>
 80006b8:	20000004 	.word	0x20000004
 80006bc:	20000008 	.word	0x20000008
 80006c0:	20000048 	.word	0x20000048
 80006c4:	40010800 	.word	0x40010800
 80006c8:	2000005c 	.word	0x2000005c
 80006cc:	20000000 	.word	0x20000000
 80006d0:	20000044 	.word	0x20000044
 80006d4:	20000060 	.word	0x20000060
 80006d8:	2000004c 	.word	0x2000004c
 80006dc:	66666667 	.word	0x66666667
 80006e0:	20000088 	.word	0x20000088
	case MODI_2:
		updateClockBuffer(0, 2, tempRED/10, tempRED%10);
 80006e4:	4bb2      	ldr	r3, [pc, #712]	; (80009b0 <fsm_run+0x7f8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4ab2      	ldr	r2, [pc, #712]	; (80009b4 <fsm_run+0x7fc>)
 80006ea:	fb82 1203 	smull	r1, r2, r2, r3
 80006ee:	1092      	asrs	r2, r2, #2
 80006f0:	17db      	asrs	r3, r3, #31
 80006f2:	1ad0      	subs	r0, r2, r3
 80006f4:	4bae      	ldr	r3, [pc, #696]	; (80009b0 <fsm_run+0x7f8>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4bae      	ldr	r3, [pc, #696]	; (80009b4 <fsm_run+0x7fc>)
 80006fa:	fb83 1302 	smull	r1, r3, r3, r2
 80006fe:	1099      	asrs	r1, r3, #2
 8000700:	17d3      	asrs	r3, r2, #31
 8000702:	1ac9      	subs	r1, r1, r3
 8000704:	460b      	mov	r3, r1
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	440b      	add	r3, r1
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	1ad1      	subs	r1, r2, r3
 800070e:	460b      	mov	r3, r1
 8000710:	4602      	mov	r2, r0
 8000712:	2102      	movs	r1, #2
 8000714:	2000      	movs	r0, #0
 8000716:	f000 fd27 	bl	8001168 <updateClockBuffer>

		if (timer2_flag == 1) {
 800071a:	4ba7      	ldr	r3, [pc, #668]	; (80009b8 <fsm_run+0x800>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d10b      	bne.n	800073a <fsm_run+0x582>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000722:	2110      	movs	r1, #16
 8000724:	48a5      	ldr	r0, [pc, #660]	; (80009bc <fsm_run+0x804>)
 8000726:	f001 fa8d 	bl	8001c44 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	48a3      	ldr	r0, [pc, #652]	; (80009bc <fsm_run+0x804>)
 800072e:	f001 fa89 	bl	8001c44 <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000732:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000736:	f000 fef1 	bl	800151c <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 800073a:	f7ff fd07 	bl	800014c <isButton1Pressed>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d126      	bne.n	8000792 <fsm_run+0x5da>
			setTimer2(500);
 8000744:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000748:	f000 fee8 	bl	800151c <setTimer2>

			state = MODE_3;
 800074c:	4b9c      	ldr	r3, [pc, #624]	; (80009c0 <fsm_run+0x808>)
 800074e:	2203      	movs	r2, #3
 8000750:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	2110      	movs	r1, #16
 8000756:	4899      	ldr	r0, [pc, #612]	; (80009bc <fsm_run+0x804>)
 8000758:	f001 fa5c 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	4896      	ldr	r0, [pc, #600]	; (80009bc <fsm_run+0x804>)
 8000762:	f001 fa57 	bl	8001c14 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	2120      	movs	r1, #32
 800076a:	4894      	ldr	r0, [pc, #592]	; (80009bc <fsm_run+0x804>)
 800076c:	f001 fa52 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000776:	4891      	ldr	r0, [pc, #580]	; (80009bc <fsm_run+0x804>)
 8000778:	f001 fa4c 	bl	8001c14 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2140      	movs	r1, #64	; 0x40
 8000780:	488e      	ldr	r0, [pc, #568]	; (80009bc <fsm_run+0x804>)
 8000782:	f001 fa47 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078c:	488b      	ldr	r0, [pc, #556]	; (80009bc <fsm_run+0x804>)
 800078e:	f001 fa41 	bl	8001c14 <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 8000792:	f7ff fced 	bl	8000170 <isButton2Pressed>
 8000796:	4603      	mov	r3, r0
 8000798:	2b01      	cmp	r3, #1
 800079a:	d10f      	bne.n	80007bc <fsm_run+0x604>
			setTimer2(500);
 800079c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a0:	f000 febc 	bl	800151c <setTimer2>
			tempRED++;
 80007a4:	4b82      	ldr	r3, [pc, #520]	; (80009b0 <fsm_run+0x7f8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3301      	adds	r3, #1
 80007aa:	4a81      	ldr	r2, [pc, #516]	; (80009b0 <fsm_run+0x7f8>)
 80007ac:	6013      	str	r3, [r2, #0]
			if (tempRED >= 100) tempRED = 0;
 80007ae:	4b80      	ldr	r3, [pc, #512]	; (80009b0 <fsm_run+0x7f8>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b63      	cmp	r3, #99	; 0x63
 80007b4:	dd02      	ble.n	80007bc <fsm_run+0x604>
 80007b6:	4b7e      	ldr	r3, [pc, #504]	; (80009b0 <fsm_run+0x7f8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
		}

		if (isButton3Pressed() == 1) {
 80007bc:	f7ff fcea 	bl	8000194 <isButton3Pressed>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	f040 8161 	bne.w	8000a8a <fsm_run+0x8d2>
			timeRED = tempRED;
 80007c8:	4b79      	ldr	r3, [pc, #484]	; (80009b0 <fsm_run+0x7f8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a7d      	ldr	r2, [pc, #500]	; (80009c4 <fsm_run+0x80c>)
 80007ce:	6013      	str	r3, [r2, #0]
			state = MODE_2;
 80007d0:	4b7b      	ldr	r3, [pc, #492]	; (80009c0 <fsm_run+0x808>)
 80007d2:	2202      	movs	r2, #2
 80007d4:	601a      	str	r2, [r3, #0]
		}
		break;
 80007d6:	e158      	b.n	8000a8a <fsm_run+0x8d2>
	case MODE_3:
		updateClockBuffer(0, 3, tempYELLOW/10, tempYELLOW%10);
 80007d8:	4b7b      	ldr	r3, [pc, #492]	; (80009c8 <fsm_run+0x810>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a75      	ldr	r2, [pc, #468]	; (80009b4 <fsm_run+0x7fc>)
 80007de:	fb82 1203 	smull	r1, r2, r2, r3
 80007e2:	1092      	asrs	r2, r2, #2
 80007e4:	17db      	asrs	r3, r3, #31
 80007e6:	1ad0      	subs	r0, r2, r3
 80007e8:	4b77      	ldr	r3, [pc, #476]	; (80009c8 <fsm_run+0x810>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b71      	ldr	r3, [pc, #452]	; (80009b4 <fsm_run+0x7fc>)
 80007ee:	fb83 1302 	smull	r1, r3, r3, r2
 80007f2:	1099      	asrs	r1, r3, #2
 80007f4:	17d3      	asrs	r3, r2, #31
 80007f6:	1ac9      	subs	r1, r1, r3
 80007f8:	460b      	mov	r3, r1
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	440b      	add	r3, r1
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	1ad1      	subs	r1, r2, r3
 8000802:	460b      	mov	r3, r1
 8000804:	4602      	mov	r2, r0
 8000806:	2103      	movs	r1, #3
 8000808:	2000      	movs	r0, #0
 800080a:	f000 fcad 	bl	8001168 <updateClockBuffer>

		if (timer2_flag == 1) {
 800080e:	4b6a      	ldr	r3, [pc, #424]	; (80009b8 <fsm_run+0x800>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d10c      	bne.n	8000830 <fsm_run+0x678>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000816:	2120      	movs	r1, #32
 8000818:	4868      	ldr	r0, [pc, #416]	; (80009bc <fsm_run+0x804>)
 800081a:	f001 fa13 	bl	8001c44 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin);
 800081e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000822:	4866      	ldr	r0, [pc, #408]	; (80009bc <fsm_run+0x804>)
 8000824:	f001 fa0e 	bl	8001c44 <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000828:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082c:	f000 fe76 	bl	800151c <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000830:	f7ff fc8c 	bl	800014c <isButton1Pressed>
 8000834:	4603      	mov	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	d126      	bne.n	8000888 <fsm_run+0x6d0>
			setTimer2(500);
 800083a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800083e:	f000 fe6d 	bl	800151c <setTimer2>

			state = MODE_4;
 8000842:	4b5f      	ldr	r3, [pc, #380]	; (80009c0 <fsm_run+0x808>)
 8000844:	2204      	movs	r2, #4
 8000846:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2110      	movs	r1, #16
 800084c:	485b      	ldr	r0, [pc, #364]	; (80009bc <fsm_run+0x804>)
 800084e:	f001 f9e1 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	4859      	ldr	r0, [pc, #356]	; (80009bc <fsm_run+0x804>)
 8000858:	f001 f9dc 	bl	8001c14 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2120      	movs	r1, #32
 8000860:	4856      	ldr	r0, [pc, #344]	; (80009bc <fsm_run+0x804>)
 8000862:	f001 f9d7 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086c:	4853      	ldr	r0, [pc, #332]	; (80009bc <fsm_run+0x804>)
 800086e:	f001 f9d1 	bl	8001c14 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	4851      	ldr	r0, [pc, #324]	; (80009bc <fsm_run+0x804>)
 8000878:	f001 f9cc 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000882:	484e      	ldr	r0, [pc, #312]	; (80009bc <fsm_run+0x804>)
 8000884:	f001 f9c6 	bl	8001c14 <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 8000888:	f7ff fc72 	bl	8000170 <isButton2Pressed>
 800088c:	4603      	mov	r3, r0
 800088e:	2b01      	cmp	r3, #1
 8000890:	f040 80fd 	bne.w	8000a8e <fsm_run+0x8d6>
			setTimer2(500);
 8000894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000898:	f000 fe40 	bl	800151c <setTimer2>
			tempYELLOW++;
 800089c:	4b4a      	ldr	r3, [pc, #296]	; (80009c8 <fsm_run+0x810>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	4a49      	ldr	r2, [pc, #292]	; (80009c8 <fsm_run+0x810>)
 80008a4:	6013      	str	r3, [r2, #0]
			if (tempYELLOW >= 100) tempYELLOW = 0;
 80008a6:	4b48      	ldr	r3, [pc, #288]	; (80009c8 <fsm_run+0x810>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b63      	cmp	r3, #99	; 0x63
 80008ac:	dd02      	ble.n	80008b4 <fsm_run+0x6fc>
 80008ae:	4b46      	ldr	r3, [pc, #280]	; (80009c8 <fsm_run+0x810>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
			state = MODI_3;
 80008b4:	4b42      	ldr	r3, [pc, #264]	; (80009c0 <fsm_run+0x808>)
 80008b6:	221e      	movs	r2, #30
 80008b8:	601a      	str	r2, [r3, #0]
		}
		break;
 80008ba:	e0e8      	b.n	8000a8e <fsm_run+0x8d6>
	case MODI_3:
		updateClockBuffer(0, 3, tempYELLOW/10, tempYELLOW%10);
 80008bc:	4b42      	ldr	r3, [pc, #264]	; (80009c8 <fsm_run+0x810>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a3c      	ldr	r2, [pc, #240]	; (80009b4 <fsm_run+0x7fc>)
 80008c2:	fb82 1203 	smull	r1, r2, r2, r3
 80008c6:	1092      	asrs	r2, r2, #2
 80008c8:	17db      	asrs	r3, r3, #31
 80008ca:	1ad0      	subs	r0, r2, r3
 80008cc:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <fsm_run+0x810>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b38      	ldr	r3, [pc, #224]	; (80009b4 <fsm_run+0x7fc>)
 80008d2:	fb83 1302 	smull	r1, r3, r3, r2
 80008d6:	1099      	asrs	r1, r3, #2
 80008d8:	17d3      	asrs	r3, r2, #31
 80008da:	1ac9      	subs	r1, r1, r3
 80008dc:	460b      	mov	r3, r1
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	440b      	add	r3, r1
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	1ad1      	subs	r1, r2, r3
 80008e6:	460b      	mov	r3, r1
 80008e8:	4602      	mov	r2, r0
 80008ea:	2103      	movs	r1, #3
 80008ec:	2000      	movs	r0, #0
 80008ee:	f000 fc3b 	bl	8001168 <updateClockBuffer>

		if (timer2_flag == 1) {
 80008f2:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <fsm_run+0x800>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d10c      	bne.n	8000914 <fsm_run+0x75c>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80008fa:	2120      	movs	r1, #32
 80008fc:	482f      	ldr	r0, [pc, #188]	; (80009bc <fsm_run+0x804>)
 80008fe:	f001 f9a1 	bl	8001c44 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin);
 8000902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000906:	482d      	ldr	r0, [pc, #180]	; (80009bc <fsm_run+0x804>)
 8000908:	f001 f99c 	bl	8001c44 <HAL_GPIO_TogglePin>
			setTimer2(500);
 800090c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000910:	f000 fe04 	bl	800151c <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000914:	f7ff fc1a 	bl	800014c <isButton1Pressed>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d126      	bne.n	800096c <fsm_run+0x7b4>
			setTimer2(500);
 800091e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000922:	f000 fdfb 	bl	800151c <setTimer2>

			state = MODE_4;
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <fsm_run+0x808>)
 8000928:	2204      	movs	r2, #4
 800092a:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2110      	movs	r1, #16
 8000930:	4822      	ldr	r0, [pc, #136]	; (80009bc <fsm_run+0x804>)
 8000932:	f001 f96f 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	4820      	ldr	r0, [pc, #128]	; (80009bc <fsm_run+0x804>)
 800093c:	f001 f96a 	bl	8001c14 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2120      	movs	r1, #32
 8000944:	481d      	ldr	r0, [pc, #116]	; (80009bc <fsm_run+0x804>)
 8000946:	f001 f965 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000950:	481a      	ldr	r0, [pc, #104]	; (80009bc <fsm_run+0x804>)
 8000952:	f001 f95f 	bl	8001c14 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	2140      	movs	r1, #64	; 0x40
 800095a:	4818      	ldr	r0, [pc, #96]	; (80009bc <fsm_run+0x804>)
 800095c:	f001 f95a 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000966:	4815      	ldr	r0, [pc, #84]	; (80009bc <fsm_run+0x804>)
 8000968:	f001 f954 	bl	8001c14 <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 800096c:	f7ff fc00 	bl	8000170 <isButton2Pressed>
 8000970:	4603      	mov	r3, r0
 8000972:	2b01      	cmp	r3, #1
 8000974:	d10f      	bne.n	8000996 <fsm_run+0x7de>
			setTimer2(500);
 8000976:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800097a:	f000 fdcf 	bl	800151c <setTimer2>
			tempYELLOW++;
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <fsm_run+0x810>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3301      	adds	r3, #1
 8000984:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <fsm_run+0x810>)
 8000986:	6013      	str	r3, [r2, #0]
			if (tempYELLOW >= 100) tempYELLOW = 0;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <fsm_run+0x810>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b63      	cmp	r3, #99	; 0x63
 800098e:	dd02      	ble.n	8000996 <fsm_run+0x7de>
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <fsm_run+0x810>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
		}

		if (isButton3Pressed() == 1) {
 8000996:	f7ff fbfd 	bl	8000194 <isButton3Pressed>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d178      	bne.n	8000a92 <fsm_run+0x8da>
			tempYELLOW = tempYELLOW;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <fsm_run+0x810>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <fsm_run+0x810>)
 80009a6:	6013      	str	r3, [r2, #0]
			state = MODE_3;
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <fsm_run+0x808>)
 80009aa:	2203      	movs	r2, #3
 80009ac:	601a      	str	r2, [r3, #0]
		}
		break;
 80009ae:	e070      	b.n	8000a92 <fsm_run+0x8da>
 80009b0:	2000004c 	.word	0x2000004c
 80009b4:	66666667 	.word	0x66666667
 80009b8:	20000088 	.word	0x20000088
 80009bc:	40010800 	.word	0x40010800
 80009c0:	20000060 	.word	0x20000060
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000050 	.word	0x20000050
	case MODE_4:
		updateClockBuffer(0, 4, tempGREEN/10, tempGREEN%10);
 80009cc:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <fsm_run+0x8e4>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a33      	ldr	r2, [pc, #204]	; (8000aa0 <fsm_run+0x8e8>)
 80009d2:	fb82 1203 	smull	r1, r2, r2, r3
 80009d6:	1092      	asrs	r2, r2, #2
 80009d8:	17db      	asrs	r3, r3, #31
 80009da:	1ad0      	subs	r0, r2, r3
 80009dc:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <fsm_run+0x8e4>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <fsm_run+0x8e8>)
 80009e2:	fb83 1302 	smull	r1, r3, r3, r2
 80009e6:	1099      	asrs	r1, r3, #2
 80009e8:	17d3      	asrs	r3, r2, #31
 80009ea:	1ac9      	subs	r1, r1, r3
 80009ec:	460b      	mov	r3, r1
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	440b      	add	r3, r1
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	1ad1      	subs	r1, r2, r3
 80009f6:	460b      	mov	r3, r1
 80009f8:	4602      	mov	r2, r0
 80009fa:	2104      	movs	r1, #4
 80009fc:	2000      	movs	r0, #0
 80009fe:	f000 fbb3 	bl	8001168 <updateClockBuffer>

		if (timer2_flag == 1) {
 8000a02:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <fsm_run+0x8ec>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d10c      	bne.n	8000a24 <fsm_run+0x86c>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000a0a:	2140      	movs	r1, #64	; 0x40
 8000a0c:	4826      	ldr	r0, [pc, #152]	; (8000aa8 <fsm_run+0x8f0>)
 8000a0e:	f001 f919 	bl	8001c44 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
 8000a12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a16:	4824      	ldr	r0, [pc, #144]	; (8000aa8 <fsm_run+0x8f0>)
 8000a18:	f001 f914 	bl	8001c44 <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000a1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a20:	f000 fd7c 	bl	800151c <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000a24:	f7ff fb92 	bl	800014c <isButton1Pressed>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d133      	bne.n	8000a96 <fsm_run+0x8de>
			setTimer2(500);
 8000a2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a32:	f000 fd73 	bl	800151c <setTimer2>

			state = RESET;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <fsm_run+0x8f4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2110      	movs	r1, #16
 8000a40:	4819      	ldr	r0, [pc, #100]	; (8000aa8 <fsm_run+0x8f0>)
 8000a42:	f001 f8e7 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <fsm_run+0x8f0>)
 8000a4c:	f001 f8e2 	bl	8001c14 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2120      	movs	r1, #32
 8000a54:	4814      	ldr	r0, [pc, #80]	; (8000aa8 <fsm_run+0x8f0>)
 8000a56:	f001 f8dd 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <fsm_run+0x8f0>)
 8000a62:	f001 f8d7 	bl	8001c14 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2140      	movs	r1, #64	; 0x40
 8000a6a:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <fsm_run+0x8f0>)
 8000a6c:	f001 f8d2 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a76:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <fsm_run+0x8f0>)
 8000a78:	f001 f8cc 	bl	8001c14 <HAL_GPIO_WritePin>
		}

		break;
 8000a7c:	e00b      	b.n	8000a96 <fsm_run+0x8de>
	default:
		break;
 8000a7e:	bf00      	nop
 8000a80:	e00a      	b.n	8000a98 <fsm_run+0x8e0>
		break;
 8000a82:	bf00      	nop
 8000a84:	e008      	b.n	8000a98 <fsm_run+0x8e0>
		break;
 8000a86:	bf00      	nop
 8000a88:	e006      	b.n	8000a98 <fsm_run+0x8e0>
		break;
 8000a8a:	bf00      	nop
 8000a8c:	e004      	b.n	8000a98 <fsm_run+0x8e0>
		break;
 8000a8e:	bf00      	nop
 8000a90:	e002      	b.n	8000a98 <fsm_run+0x8e0>
		break;
 8000a92:	bf00      	nop
 8000a94:	e000      	b.n	8000a98 <fsm_run+0x8e0>
		break;
 8000a96:	bf00      	nop
	}
}
 8000a98:	bf00      	nop
 8000a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a9c:	20000054 	.word	0x20000054
 8000aa0:	66666667 	.word	0x66666667
 8000aa4:	20000088 	.word	0x20000088
 8000aa8:	40010800 	.word	0x40010800
 8000aac:	20000060 	.word	0x20000060

08000ab0 <display7SEG>:
 *      Author: Admin
 */

#include "global.h"

void display7SEG(int num){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b09      	cmp	r3, #9
 8000abc:	f200 8180 	bhi.w	8000dc0 <display7SEG+0x310>
 8000ac0:	a201      	add	r2, pc, #4	; (adr r2, 8000ac8 <display7SEG+0x18>)
 8000ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac6:	bf00      	nop
 8000ac8:	08000af1 	.word	0x08000af1
 8000acc:	08000b39 	.word	0x08000b39
 8000ad0:	08000b81 	.word	0x08000b81
 8000ad4:	08000bc9 	.word	0x08000bc9
 8000ad8:	08000c11 	.word	0x08000c11
 8000adc:	08000c59 	.word	0x08000c59
 8000ae0:	08000ca1 	.word	0x08000ca1
 8000ae4:	08000ce9 	.word	0x08000ce9
 8000ae8:	08000d31 	.word	0x08000d31
 8000aec:	08000d79 	.word	0x08000d79
	switch(num){
	case 0:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000af0:	2200      	movs	r2, #0
 8000af2:	2101      	movs	r1, #1
 8000af4:	48b5      	ldr	r0, [pc, #724]	; (8000dcc <display7SEG+0x31c>)
 8000af6:	f001 f88d 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000afa:	2200      	movs	r2, #0
 8000afc:	2102      	movs	r1, #2
 8000afe:	48b3      	ldr	r0, [pc, #716]	; (8000dcc <display7SEG+0x31c>)
 8000b00:	f001 f888 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000b04:	2200      	movs	r2, #0
 8000b06:	2104      	movs	r1, #4
 8000b08:	48b0      	ldr	r0, [pc, #704]	; (8000dcc <display7SEG+0x31c>)
 8000b0a:	f001 f883 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2108      	movs	r1, #8
 8000b12:	48ae      	ldr	r0, [pc, #696]	; (8000dcc <display7SEG+0x31c>)
 8000b14:	f001 f87e 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2110      	movs	r1, #16
 8000b1c:	48ab      	ldr	r0, [pc, #684]	; (8000dcc <display7SEG+0x31c>)
 8000b1e:	f001 f879 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000b22:	2200      	movs	r2, #0
 8000b24:	2120      	movs	r1, #32
 8000b26:	48a9      	ldr	r0, [pc, #676]	; (8000dcc <display7SEG+0x31c>)
 8000b28:	f001 f874 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2140      	movs	r1, #64	; 0x40
 8000b30:	48a6      	ldr	r0, [pc, #664]	; (8000dcc <display7SEG+0x31c>)
 8000b32:	f001 f86f 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8000b36:	e144      	b.n	8000dc2 <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	48a3      	ldr	r0, [pc, #652]	; (8000dcc <display7SEG+0x31c>)
 8000b3e:	f001 f869 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000b42:	2200      	movs	r2, #0
 8000b44:	2102      	movs	r1, #2
 8000b46:	48a1      	ldr	r0, [pc, #644]	; (8000dcc <display7SEG+0x31c>)
 8000b48:	f001 f864 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2104      	movs	r1, #4
 8000b50:	489e      	ldr	r0, [pc, #632]	; (8000dcc <display7SEG+0x31c>)
 8000b52:	f001 f85f 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000b56:	2201      	movs	r2, #1
 8000b58:	2108      	movs	r1, #8
 8000b5a:	489c      	ldr	r0, [pc, #624]	; (8000dcc <display7SEG+0x31c>)
 8000b5c:	f001 f85a 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000b60:	2201      	movs	r2, #1
 8000b62:	2110      	movs	r1, #16
 8000b64:	4899      	ldr	r0, [pc, #612]	; (8000dcc <display7SEG+0x31c>)
 8000b66:	f001 f855 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	4897      	ldr	r0, [pc, #604]	; (8000dcc <display7SEG+0x31c>)
 8000b70:	f001 f850 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000b74:	2201      	movs	r2, #1
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	4894      	ldr	r0, [pc, #592]	; (8000dcc <display7SEG+0x31c>)
 8000b7a:	f001 f84b 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8000b7e:	e120      	b.n	8000dc2 <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000b80:	2200      	movs	r2, #0
 8000b82:	2101      	movs	r1, #1
 8000b84:	4891      	ldr	r0, [pc, #580]	; (8000dcc <display7SEG+0x31c>)
 8000b86:	f001 f845 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	488f      	ldr	r0, [pc, #572]	; (8000dcc <display7SEG+0x31c>)
 8000b90:	f001 f840 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_SET ) ;
 8000b94:	2201      	movs	r2, #1
 8000b96:	2104      	movs	r1, #4
 8000b98:	488c      	ldr	r0, [pc, #560]	; (8000dcc <display7SEG+0x31c>)
 8000b9a:	f001 f83b 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	488a      	ldr	r0, [pc, #552]	; (8000dcc <display7SEG+0x31c>)
 8000ba4:	f001 f836 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2110      	movs	r1, #16
 8000bac:	4887      	ldr	r0, [pc, #540]	; (8000dcc <display7SEG+0x31c>)
 8000bae:	f001 f831 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	4885      	ldr	r0, [pc, #532]	; (8000dcc <display7SEG+0x31c>)
 8000bb8:	f001 f82c 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	4882      	ldr	r0, [pc, #520]	; (8000dcc <display7SEG+0x31c>)
 8000bc2:	f001 f827 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8000bc6:	e0fc      	b.n	8000dc2 <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2101      	movs	r1, #1
 8000bcc:	487f      	ldr	r0, [pc, #508]	; (8000dcc <display7SEG+0x31c>)
 8000bce:	f001 f821 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	487d      	ldr	r0, [pc, #500]	; (8000dcc <display7SEG+0x31c>)
 8000bd8:	f001 f81c 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2104      	movs	r1, #4
 8000be0:	487a      	ldr	r0, [pc, #488]	; (8000dcc <display7SEG+0x31c>)
 8000be2:	f001 f817 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000be6:	2200      	movs	r2, #0
 8000be8:	2108      	movs	r1, #8
 8000bea:	4878      	ldr	r0, [pc, #480]	; (8000dcc <display7SEG+0x31c>)
 8000bec:	f001 f812 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	4875      	ldr	r0, [pc, #468]	; (8000dcc <display7SEG+0x31c>)
 8000bf6:	f001 f80d 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	4873      	ldr	r0, [pc, #460]	; (8000dcc <display7SEG+0x31c>)
 8000c00:	f001 f808 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000c04:	2200      	movs	r2, #0
 8000c06:	2140      	movs	r1, #64	; 0x40
 8000c08:	4870      	ldr	r0, [pc, #448]	; (8000dcc <display7SEG+0x31c>)
 8000c0a:	f001 f803 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8000c0e:	e0d8      	b.n	8000dc2 <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 8000c10:	2201      	movs	r2, #1
 8000c12:	2101      	movs	r1, #1
 8000c14:	486d      	ldr	r0, [pc, #436]	; (8000dcc <display7SEG+0x31c>)
 8000c16:	f000 fffd 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	486b      	ldr	r0, [pc, #428]	; (8000dcc <display7SEG+0x31c>)
 8000c20:	f000 fff8 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000c24:	2200      	movs	r2, #0
 8000c26:	2104      	movs	r1, #4
 8000c28:	4868      	ldr	r0, [pc, #416]	; (8000dcc <display7SEG+0x31c>)
 8000c2a:	f000 fff3 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2108      	movs	r1, #8
 8000c32:	4866      	ldr	r0, [pc, #408]	; (8000dcc <display7SEG+0x31c>)
 8000c34:	f000 ffee 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	4863      	ldr	r0, [pc, #396]	; (8000dcc <display7SEG+0x31c>)
 8000c3e:	f000 ffe9 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000c42:	2200      	movs	r2, #0
 8000c44:	2120      	movs	r1, #32
 8000c46:	4861      	ldr	r0, [pc, #388]	; (8000dcc <display7SEG+0x31c>)
 8000c48:	f000 ffe4 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2140      	movs	r1, #64	; 0x40
 8000c50:	485e      	ldr	r0, [pc, #376]	; (8000dcc <display7SEG+0x31c>)
 8000c52:	f000 ffdf 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8000c56:	e0b4      	b.n	8000dc2 <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	485b      	ldr	r0, [pc, #364]	; (8000dcc <display7SEG+0x31c>)
 8000c5e:	f000 ffd9 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 8000c62:	2201      	movs	r2, #1
 8000c64:	2102      	movs	r1, #2
 8000c66:	4859      	ldr	r0, [pc, #356]	; (8000dcc <display7SEG+0x31c>)
 8000c68:	f000 ffd4 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2104      	movs	r1, #4
 8000c70:	4856      	ldr	r0, [pc, #344]	; (8000dcc <display7SEG+0x31c>)
 8000c72:	f000 ffcf 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000c76:	2200      	movs	r2, #0
 8000c78:	2108      	movs	r1, #8
 8000c7a:	4854      	ldr	r0, [pc, #336]	; (8000dcc <display7SEG+0x31c>)
 8000c7c:	f000 ffca 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000c80:	2201      	movs	r2, #1
 8000c82:	2110      	movs	r1, #16
 8000c84:	4851      	ldr	r0, [pc, #324]	; (8000dcc <display7SEG+0x31c>)
 8000c86:	f000 ffc5 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	484f      	ldr	r0, [pc, #316]	; (8000dcc <display7SEG+0x31c>)
 8000c90:	f000 ffc0 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000c94:	2200      	movs	r2, #0
 8000c96:	2140      	movs	r1, #64	; 0x40
 8000c98:	484c      	ldr	r0, [pc, #304]	; (8000dcc <display7SEG+0x31c>)
 8000c9a:	f000 ffbb 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8000c9e:	e090      	b.n	8000dc2 <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4849      	ldr	r0, [pc, #292]	; (8000dcc <display7SEG+0x31c>)
 8000ca6:	f000 ffb5 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 8000caa:	2201      	movs	r2, #1
 8000cac:	2102      	movs	r1, #2
 8000cae:	4847      	ldr	r0, [pc, #284]	; (8000dcc <display7SEG+0x31c>)
 8000cb0:	f000 ffb0 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2104      	movs	r1, #4
 8000cb8:	4844      	ldr	r0, [pc, #272]	; (8000dcc <display7SEG+0x31c>)
 8000cba:	f000 ffab 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	4842      	ldr	r0, [pc, #264]	; (8000dcc <display7SEG+0x31c>)
 8000cc4:	f000 ffa6 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2110      	movs	r1, #16
 8000ccc:	483f      	ldr	r0, [pc, #252]	; (8000dcc <display7SEG+0x31c>)
 8000cce:	f000 ffa1 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2120      	movs	r1, #32
 8000cd6:	483d      	ldr	r0, [pc, #244]	; (8000dcc <display7SEG+0x31c>)
 8000cd8:	f000 ff9c 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2140      	movs	r1, #64	; 0x40
 8000ce0:	483a      	ldr	r0, [pc, #232]	; (8000dcc <display7SEG+0x31c>)
 8000ce2:	f000 ff97 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8000ce6:	e06c      	b.n	8000dc2 <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2101      	movs	r1, #1
 8000cec:	4837      	ldr	r0, [pc, #220]	; (8000dcc <display7SEG+0x31c>)
 8000cee:	f000 ff91 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	4835      	ldr	r0, [pc, #212]	; (8000dcc <display7SEG+0x31c>)
 8000cf8:	f000 ff8c 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2104      	movs	r1, #4
 8000d00:	4832      	ldr	r0, [pc, #200]	; (8000dcc <display7SEG+0x31c>)
 8000d02:	f000 ff87 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000d06:	2201      	movs	r2, #1
 8000d08:	2108      	movs	r1, #8
 8000d0a:	4830      	ldr	r0, [pc, #192]	; (8000dcc <display7SEG+0x31c>)
 8000d0c:	f000 ff82 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000d10:	2201      	movs	r2, #1
 8000d12:	2110      	movs	r1, #16
 8000d14:	482d      	ldr	r0, [pc, #180]	; (8000dcc <display7SEG+0x31c>)
 8000d16:	f000 ff7d 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2120      	movs	r1, #32
 8000d1e:	482b      	ldr	r0, [pc, #172]	; (8000dcc <display7SEG+0x31c>)
 8000d20:	f000 ff78 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000d24:	2201      	movs	r2, #1
 8000d26:	2140      	movs	r1, #64	; 0x40
 8000d28:	4828      	ldr	r0, [pc, #160]	; (8000dcc <display7SEG+0x31c>)
 8000d2a:	f000 ff73 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8000d2e:	e048      	b.n	8000dc2 <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000d30:	2200      	movs	r2, #0
 8000d32:	2101      	movs	r1, #1
 8000d34:	4825      	ldr	r0, [pc, #148]	; (8000dcc <display7SEG+0x31c>)
 8000d36:	f000 ff6d 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	4823      	ldr	r0, [pc, #140]	; (8000dcc <display7SEG+0x31c>)
 8000d40:	f000 ff68 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000d44:	2200      	movs	r2, #0
 8000d46:	2104      	movs	r1, #4
 8000d48:	4820      	ldr	r0, [pc, #128]	; (8000dcc <display7SEG+0x31c>)
 8000d4a:	f000 ff63 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2108      	movs	r1, #8
 8000d52:	481e      	ldr	r0, [pc, #120]	; (8000dcc <display7SEG+0x31c>)
 8000d54:	f000 ff5e 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	481b      	ldr	r0, [pc, #108]	; (8000dcc <display7SEG+0x31c>)
 8000d5e:	f000 ff59 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000d62:	2200      	movs	r2, #0
 8000d64:	2120      	movs	r1, #32
 8000d66:	4819      	ldr	r0, [pc, #100]	; (8000dcc <display7SEG+0x31c>)
 8000d68:	f000 ff54 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2140      	movs	r1, #64	; 0x40
 8000d70:	4816      	ldr	r0, [pc, #88]	; (8000dcc <display7SEG+0x31c>)
 8000d72:	f000 ff4f 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8000d76:	e024      	b.n	8000dc2 <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	4813      	ldr	r0, [pc, #76]	; (8000dcc <display7SEG+0x31c>)
 8000d7e:	f000 ff49 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000d82:	2200      	movs	r2, #0
 8000d84:	2102      	movs	r1, #2
 8000d86:	4811      	ldr	r0, [pc, #68]	; (8000dcc <display7SEG+0x31c>)
 8000d88:	f000 ff44 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2104      	movs	r1, #4
 8000d90:	480e      	ldr	r0, [pc, #56]	; (8000dcc <display7SEG+0x31c>)
 8000d92:	f000 ff3f 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000d96:	2200      	movs	r2, #0
 8000d98:	2108      	movs	r1, #8
 8000d9a:	480c      	ldr	r0, [pc, #48]	; (8000dcc <display7SEG+0x31c>)
 8000d9c:	f000 ff3a 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000da0:	2201      	movs	r2, #1
 8000da2:	2110      	movs	r1, #16
 8000da4:	4809      	ldr	r0, [pc, #36]	; (8000dcc <display7SEG+0x31c>)
 8000da6:	f000 ff35 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000daa:	2200      	movs	r2, #0
 8000dac:	2120      	movs	r1, #32
 8000dae:	4807      	ldr	r0, [pc, #28]	; (8000dcc <display7SEG+0x31c>)
 8000db0:	f000 ff30 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000db4:	2200      	movs	r2, #0
 8000db6:	2140      	movs	r1, #64	; 0x40
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <display7SEG+0x31c>)
 8000dba:	f000 ff2b 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8000dbe:	e000      	b.n	8000dc2 <display7SEG+0x312>
	default:
		break;
 8000dc0:	bf00      	nop
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40010c00 	.word	0x40010c00

08000dd0 <display7SEG0>:
void display7SEG0(int num){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b09      	cmp	r3, #9
 8000ddc:	f200 81bc 	bhi.w	8001158 <display7SEG0+0x388>
 8000de0:	a201      	add	r2, pc, #4	; (adr r2, 8000de8 <display7SEG0+0x18>)
 8000de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de6:	bf00      	nop
 8000de8:	08000e11 	.word	0x08000e11
 8000dec:	08000e65 	.word	0x08000e65
 8000df0:	08000eb9 	.word	0x08000eb9
 8000df4:	08000f0d 	.word	0x08000f0d
 8000df8:	08000f61 	.word	0x08000f61
 8000dfc:	08000fb5 	.word	0x08000fb5
 8000e00:	08001009 	.word	0x08001009
 8000e04:	0800105d 	.word	0x0800105d
 8000e08:	080010b1 	.word	0x080010b1
 8000e0c:	08001105 	.word	0x08001105
	switch(num){
	case 0:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000e10:	2200      	movs	r2, #0
 8000e12:	2180      	movs	r1, #128	; 0x80
 8000e14:	48d3      	ldr	r0, [pc, #844]	; (8001164 <display7SEG0+0x394>)
 8000e16:	f000 fefd 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e20:	48d0      	ldr	r0, [pc, #832]	; (8001164 <display7SEG0+0x394>)
 8000e22:	f000 fef7 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2c:	48cd      	ldr	r0, [pc, #820]	; (8001164 <display7SEG0+0x394>)
 8000e2e:	f000 fef1 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e38:	48ca      	ldr	r0, [pc, #808]	; (8001164 <display7SEG0+0x394>)
 8000e3a:	f000 feeb 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e44:	48c7      	ldr	r0, [pc, #796]	; (8001164 <display7SEG0+0x394>)
 8000e46:	f000 fee5 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e50:	48c4      	ldr	r0, [pc, #784]	; (8001164 <display7SEG0+0x394>)
 8000e52:	f000 fedf 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e5c:	48c1      	ldr	r0, [pc, #772]	; (8001164 <display7SEG0+0x394>)
 8000e5e:	f000 fed9 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8000e62:	e17a      	b.n	800115a <display7SEG0+0x38a>
	case 1:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_SET ) ;
 8000e64:	2201      	movs	r2, #1
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	48be      	ldr	r0, [pc, #760]	; (8001164 <display7SEG0+0x394>)
 8000e6a:	f000 fed3 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e74:	48bb      	ldr	r0, [pc, #748]	; (8001164 <display7SEG0+0x394>)
 8000e76:	f000 fecd 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e80:	48b8      	ldr	r0, [pc, #736]	; (8001164 <display7SEG0+0x394>)
 8000e82:	f000 fec7 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8c:	48b5      	ldr	r0, [pc, #724]	; (8001164 <display7SEG0+0x394>)
 8000e8e:	f000 fec1 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000e92:	2201      	movs	r2, #1
 8000e94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e98:	48b2      	ldr	r0, [pc, #712]	; (8001164 <display7SEG0+0x394>)
 8000e9a:	f000 febb 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea4:	48af      	ldr	r0, [pc, #700]	; (8001164 <display7SEG0+0x394>)
 8000ea6:	f000 feb5 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb0:	48ac      	ldr	r0, [pc, #688]	; (8001164 <display7SEG0+0x394>)
 8000eb2:	f000 feaf 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8000eb6:	e150      	b.n	800115a <display7SEG0+0x38a>
	case 2:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2180      	movs	r1, #128	; 0x80
 8000ebc:	48a9      	ldr	r0, [pc, #676]	; (8001164 <display7SEG0+0x394>)
 8000ebe:	f000 fea9 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec8:	48a6      	ldr	r0, [pc, #664]	; (8001164 <display7SEG0+0x394>)
 8000eca:	f000 fea3 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_SET ) ;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed4:	48a3      	ldr	r0, [pc, #652]	; (8001164 <display7SEG0+0x394>)
 8000ed6:	f000 fe9d 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee0:	48a0      	ldr	r0, [pc, #640]	; (8001164 <display7SEG0+0x394>)
 8000ee2:	f000 fe97 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eec:	489d      	ldr	r0, [pc, #628]	; (8001164 <display7SEG0+0x394>)
 8000eee:	f000 fe91 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef8:	489a      	ldr	r0, [pc, #616]	; (8001164 <display7SEG0+0x394>)
 8000efa:	f000 fe8b 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f04:	4897      	ldr	r0, [pc, #604]	; (8001164 <display7SEG0+0x394>)
 8000f06:	f000 fe85 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8000f0a:	e126      	b.n	800115a <display7SEG0+0x38a>
	case 3:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	4894      	ldr	r0, [pc, #592]	; (8001164 <display7SEG0+0x394>)
 8000f12:	f000 fe7f 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1c:	4891      	ldr	r0, [pc, #580]	; (8001164 <display7SEG0+0x394>)
 8000f1e:	f000 fe79 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f28:	488e      	ldr	r0, [pc, #568]	; (8001164 <display7SEG0+0x394>)
 8000f2a:	f000 fe73 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f34:	488b      	ldr	r0, [pc, #556]	; (8001164 <display7SEG0+0x394>)
 8000f36:	f000 fe6d 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f40:	4888      	ldr	r0, [pc, #544]	; (8001164 <display7SEG0+0x394>)
 8000f42:	f000 fe67 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f4c:	4885      	ldr	r0, [pc, #532]	; (8001164 <display7SEG0+0x394>)
 8000f4e:	f000 fe61 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f58:	4882      	ldr	r0, [pc, #520]	; (8001164 <display7SEG0+0x394>)
 8000f5a:	f000 fe5b 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8000f5e:	e0fc      	b.n	800115a <display7SEG0+0x38a>
	case 4:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_SET ) ;
 8000f60:	2201      	movs	r2, #1
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	487f      	ldr	r0, [pc, #508]	; (8001164 <display7SEG0+0x394>)
 8000f66:	f000 fe55 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f70:	487c      	ldr	r0, [pc, #496]	; (8001164 <display7SEG0+0x394>)
 8000f72:	f000 fe4f 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7c:	4879      	ldr	r0, [pc, #484]	; (8001164 <display7SEG0+0x394>)
 8000f7e:	f000 fe49 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 8000f82:	2201      	movs	r2, #1
 8000f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f88:	4876      	ldr	r0, [pc, #472]	; (8001164 <display7SEG0+0x394>)
 8000f8a:	f000 fe43 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f94:	4873      	ldr	r0, [pc, #460]	; (8001164 <display7SEG0+0x394>)
 8000f96:	f000 fe3d 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa0:	4870      	ldr	r0, [pc, #448]	; (8001164 <display7SEG0+0x394>)
 8000fa2:	f000 fe37 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	486d      	ldr	r0, [pc, #436]	; (8001164 <display7SEG0+0x394>)
 8000fae:	f000 fe31 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8000fb2:	e0d2      	b.n	800115a <display7SEG0+0x38a>
	case 5:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	486a      	ldr	r0, [pc, #424]	; (8001164 <display7SEG0+0x394>)
 8000fba:	f000 fe2b 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_SET ) ;
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc4:	4867      	ldr	r0, [pc, #412]	; (8001164 <display7SEG0+0x394>)
 8000fc6:	f000 fe25 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd0:	4864      	ldr	r0, [pc, #400]	; (8001164 <display7SEG0+0x394>)
 8000fd2:	f000 fe1f 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fdc:	4861      	ldr	r0, [pc, #388]	; (8001164 <display7SEG0+0x394>)
 8000fde:	f000 fe19 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fe8:	485e      	ldr	r0, [pc, #376]	; (8001164 <display7SEG0+0x394>)
 8000fea:	f000 fe13 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff4:	485b      	ldr	r0, [pc, #364]	; (8001164 <display7SEG0+0x394>)
 8000ff6:	f000 fe0d 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001000:	4858      	ldr	r0, [pc, #352]	; (8001164 <display7SEG0+0x394>)
 8001002:	f000 fe07 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8001006:	e0a8      	b.n	800115a <display7SEG0+0x38a>
	case 6:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8001008:	2200      	movs	r2, #0
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	4855      	ldr	r0, [pc, #340]	; (8001164 <display7SEG0+0x394>)
 800100e:	f000 fe01 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_SET ) ;
 8001012:	2201      	movs	r2, #1
 8001014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001018:	4852      	ldr	r0, [pc, #328]	; (8001164 <display7SEG0+0x394>)
 800101a:	f000 fdfb 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001024:	484f      	ldr	r0, [pc, #316]	; (8001164 <display7SEG0+0x394>)
 8001026:	f000 fdf5 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001030:	484c      	ldr	r0, [pc, #304]	; (8001164 <display7SEG0+0x394>)
 8001032:	f000 fdef 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103c:	4849      	ldr	r0, [pc, #292]	; (8001164 <display7SEG0+0x394>)
 800103e:	f000 fde9 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001048:	4846      	ldr	r0, [pc, #280]	; (8001164 <display7SEG0+0x394>)
 800104a:	f000 fde3 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001054:	4843      	ldr	r0, [pc, #268]	; (8001164 <display7SEG0+0x394>)
 8001056:	f000 fddd 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 800105a:	e07e      	b.n	800115a <display7SEG0+0x38a>
	case 7:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 800105c:	2200      	movs	r2, #0
 800105e:	2180      	movs	r1, #128	; 0x80
 8001060:	4840      	ldr	r0, [pc, #256]	; (8001164 <display7SEG0+0x394>)
 8001062:	f000 fdd7 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106c:	483d      	ldr	r0, [pc, #244]	; (8001164 <display7SEG0+0x394>)
 800106e:	f000 fdd1 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001078:	483a      	ldr	r0, [pc, #232]	; (8001164 <display7SEG0+0x394>)
 800107a:	f000 fdcb 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001084:	4837      	ldr	r0, [pc, #220]	; (8001164 <display7SEG0+0x394>)
 8001086:	f000 fdc5 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001090:	4834      	ldr	r0, [pc, #208]	; (8001164 <display7SEG0+0x394>)
 8001092:	f000 fdbf 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109c:	4831      	ldr	r0, [pc, #196]	; (8001164 <display7SEG0+0x394>)
 800109e:	f000 fdb9 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a8:	482e      	ldr	r0, [pc, #184]	; (8001164 <display7SEG0+0x394>)
 80010aa:	f000 fdb3 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 80010ae:	e054      	b.n	800115a <display7SEG0+0x38a>
	case 8:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 80010b0:	2200      	movs	r2, #0
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	482b      	ldr	r0, [pc, #172]	; (8001164 <display7SEG0+0x394>)
 80010b6:	f000 fdad 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	4828      	ldr	r0, [pc, #160]	; (8001164 <display7SEG0+0x394>)
 80010c2:	f000 fda7 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	4825      	ldr	r0, [pc, #148]	; (8001164 <display7SEG0+0x394>)
 80010ce:	f000 fda1 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d8:	4822      	ldr	r0, [pc, #136]	; (8001164 <display7SEG0+0x394>)
 80010da:	f000 fd9b 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e4:	481f      	ldr	r0, [pc, #124]	; (8001164 <display7SEG0+0x394>)
 80010e6:	f000 fd95 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f0:	481c      	ldr	r0, [pc, #112]	; (8001164 <display7SEG0+0x394>)
 80010f2:	f000 fd8f 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fc:	4819      	ldr	r0, [pc, #100]	; (8001164 <display7SEG0+0x394>)
 80010fe:	f000 fd89 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8001102:	e02a      	b.n	800115a <display7SEG0+0x38a>
	case 9:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8001104:	2200      	movs	r2, #0
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	4816      	ldr	r0, [pc, #88]	; (8001164 <display7SEG0+0x394>)
 800110a:	f000 fd83 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <display7SEG0+0x394>)
 8001116:	f000 fd7d 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001120:	4810      	ldr	r0, [pc, #64]	; (8001164 <display7SEG0+0x394>)
 8001122:	f000 fd77 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8001126:	2200      	movs	r2, #0
 8001128:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <display7SEG0+0x394>)
 800112e:	f000 fd71 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <display7SEG0+0x394>)
 800113a:	f000 fd6b 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001144:	4807      	ldr	r0, [pc, #28]	; (8001164 <display7SEG0+0x394>)
 8001146:	f000 fd65 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <display7SEG0+0x394>)
 8001152:	f000 fd5f 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 8001156:	e000      	b.n	800115a <display7SEG0+0x38a>
	default:
		break;
 8001158:	bf00      	nop
	}
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40010c00 	.word	0x40010c00

08001168 <updateClockBuffer>:
int timeYELLOW = 2;

int led_buffer[4] = {0, 0, 0, 0};


void updateClockBuffer(int num0, int num1, int num2, int num3) {
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	603b      	str	r3, [r7, #0]
	led_buffer[0] = num0;
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <updateClockBuffer+0x30>)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num1;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <updateClockBuffer+0x30>)
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	6053      	str	r3, [r2, #4]
	led_buffer[2] = num2;
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <updateClockBuffer+0x30>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num3;
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <updateClockBuffer+0x30>)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	60d3      	str	r3, [r2, #12]
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	20000064 	.word	0x20000064

0800119c <update7SEG>:

void update7SEG(int index) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	switch (index) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d003      	beq.n	80011b2 <update7SEG+0x16>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d017      	beq.n	80011e0 <update7SEG+0x44>
		display7SEG0(led_buffer[3]);
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
		break;
	default:
		break;
 80011b0:	e02d      	b.n	800120e <update7SEG+0x72>
		display7SEG(led_buffer[0]);
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <update7SEG+0x7c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fc7a 	bl	8000ab0 <display7SEG>
		display7SEG0(led_buffer[1]);
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <update7SEG+0x7c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe05 	bl	8000dd0 <display7SEG0>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011cc:	4813      	ldr	r0, [pc, #76]	; (800121c <update7SEG+0x80>)
 80011ce:	f000 fd21 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d8:	4810      	ldr	r0, [pc, #64]	; (800121c <update7SEG+0x80>)
 80011da:	f000 fd1b 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 80011de:	e016      	b.n	800120e <update7SEG+0x72>
		display7SEG(led_buffer[2]);
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <update7SEG+0x7c>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fc63 	bl	8000ab0 <display7SEG>
		display7SEG0(led_buffer[3]);
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <update7SEG+0x7c>)
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fdee 	bl	8000dd0 <display7SEG0>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <update7SEG+0x80>)
 80011fc:	f000 fd0a 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <update7SEG+0x80>)
 8001208:	f000 fd04 	bl	8001c14 <HAL_GPIO_WritePin>
		break;
 800120c:	bf00      	nop
	}
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000064 	.word	0x20000064
 800121c:	40010c00 	.word	0x40010c00

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001226:	f000 fa35 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122a:	f000 f851 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122e:	f000 f8d9 	bl	80013e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001232:	f000 f889 	bl	8001348 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001236:	4823      	ldr	r0, [pc, #140]	; (80012c4 <main+0xa4>)
 8001238:	f001 f94a 	bl	80024d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state = 0;
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <main+0xa8>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
  int led_idx = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
  int index = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
  setTimer0(1000);
 800124a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800124e:	f000 f931 	bl	80014b4 <setTimer0>
  while (1)
  {
    /* USER CODE END WHILE */
	  if (timer0_flag == 1) {
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <main+0xac>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d12e      	bne.n	80012b8 <main+0x98>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b03      	cmp	r3, #3
 800125e:	d82d      	bhi.n	80012bc <main+0x9c>
 8001260:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <main+0x48>)
 8001262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001266:	bf00      	nop
 8001268:	08001279 	.word	0x08001279
 800126c:	08001281 	.word	0x08001281
 8001270:	08001299 	.word	0x08001299
 8001274:	080012a1 	.word	0x080012a1
	  	  switch (led_idx) {
	  	  	case 0:
	  	  		led_idx++;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3301      	adds	r3, #1
 800127c:	607b      	str	r3, [r7, #4]
	  	  		break;
 800127e:	e01e      	b.n	80012be <main+0x9e>
	  	  	case 1:
	  	  		index = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	603b      	str	r3, [r7, #0]
	  	  		update7SEG(index);
 8001284:	6838      	ldr	r0, [r7, #0]
 8001286:	f7ff ff89 	bl	800119c <update7SEG>
	  	  		setTimer0(500);
 800128a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800128e:	f000 f911 	bl	80014b4 <setTimer0>
	  	  		led_idx = 2;
 8001292:	2302      	movs	r3, #2
 8001294:	607b      	str	r3, [r7, #4]
	  	  		break;
 8001296:	e012      	b.n	80012be <main+0x9e>
	  	  	case 2:
	  	  		led_idx++;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3301      	adds	r3, #1
 800129c:	607b      	str	r3, [r7, #4]
	  	  		break;
 800129e:	e00e      	b.n	80012be <main+0x9e>
	  	  	case 3:
	  	  		index = 2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	603b      	str	r3, [r7, #0]
	  	  		update7SEG(index);
 80012a4:	6838      	ldr	r0, [r7, #0]
 80012a6:	f7ff ff79 	bl	800119c <update7SEG>
	  	  		setTimer0(500);
 80012aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ae:	f000 f901 	bl	80014b4 <setTimer0>
	  	  		led_idx = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
	  	  		break;
 80012b6:	e002      	b.n	80012be <main+0x9e>
	  	    default:
	  	  		break;
	  	  		  }
	  	  	  }
 80012b8:	bf00      	nop
 80012ba:	e000      	b.n	80012be <main+0x9e>
	  	  		break;
 80012bc:	bf00      	nop
	  fsm_run();
 80012be:	f7fe ff7b 	bl	80001b8 <fsm_run>
	  if (timer0_flag == 1) {
 80012c2:	e7c6      	b.n	8001252 <main+0x32>
 80012c4:	2000008c 	.word	0x2000008c
 80012c8:	20000060 	.word	0x20000060
 80012cc:	20000078 	.word	0x20000078

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b090      	sub	sp, #64	; 0x40
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	2228      	movs	r2, #40	; 0x28
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fb74 	bl	80029cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f6:	2301      	movs	r3, #1
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012fa:	2310      	movs	r3, #16
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012fe:	2300      	movs	r3, #0
 8001300:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fcb6 	bl	8001c78 <HAL_RCC_OscConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001312:	f000 f8c9 	bl	80014a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001316:	230f      	movs	r3, #15
 8001318:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f000 ff22 	bl	8002178 <HAL_RCC_ClockConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800133a:	f000 f8b5 	bl	80014a8 <Error_Handler>
  }
}
 800133e:	bf00      	nop
 8001340:	3740      	adds	r7, #64	; 0x40
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	463b      	mov	r3, r7
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <MX_TIM2_Init+0x98>)
 8001366:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800136a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_TIM2_Init+0x98>)
 800136e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001372:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_TIM2_Init+0x98>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <MX_TIM2_Init+0x98>)
 800137c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001380:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <MX_TIM2_Init+0x98>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <MX_TIM2_Init+0x98>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800138e:	4814      	ldr	r0, [pc, #80]	; (80013e0 <MX_TIM2_Init+0x98>)
 8001390:	f001 f84e 	bl	8002430 <HAL_TIM_Base_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800139a:	f000 f885 	bl	80014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4619      	mov	r1, r3
 80013aa:	480d      	ldr	r0, [pc, #52]	; (80013e0 <MX_TIM2_Init+0x98>)
 80013ac:	f001 f8dc 	bl	8002568 <HAL_TIM_ConfigClockSource>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013b6:	f000 f877 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c2:	463b      	mov	r3, r7
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <MX_TIM2_Init+0x98>)
 80013c8:	f001 fa84 	bl	80028d4 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013d2:	f000 f869 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000008c 	.word	0x2000008c

080013e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <MX_GPIO_Init+0xb8>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a27      	ldr	r2, [pc, #156]	; (800149c <MX_GPIO_Init+0xb8>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b25      	ldr	r3, [pc, #148]	; (800149c <MX_GPIO_Init+0xb8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b22      	ldr	r3, [pc, #136]	; (800149c <MX_GPIO_Init+0xb8>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a21      	ldr	r2, [pc, #132]	; (800149c <MX_GPIO_Init+0xb8>)
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b1f      	ldr	r3, [pc, #124]	; (800149c <MX_GPIO_Init+0xb8>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_0_Pin
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800142e:	481c      	ldr	r0, [pc, #112]	; (80014a0 <MX_GPIO_Init+0xbc>)
 8001430:	f000 fbf0 	bl	8001c14 <HAL_GPIO_WritePin>
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|D0_Pin
 8001434:	2200      	movs	r2, #0
 8001436:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800143a:	481a      	ldr	r0, [pc, #104]	; (80014a4 <MX_GPIO_Init+0xc0>)
 800143c:	f000 fbea 	bl	8001c14 <HAL_GPIO_WritePin>
                          |E0_Pin|F0_Pin|G0_Pin|EN1_Pin
                          |EN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A0_Pin|B0_Pin|C0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin BUT3_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin|BUT3_Pin;
 8001440:	230e      	movs	r3, #14
 8001442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	4619      	mov	r1, r3
 8001452:	4813      	ldr	r0, [pc, #76]	; (80014a0 <MX_GPIO_Init+0xbc>)
 8001454:	f000 fa64 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_RED_0_Pin
                           LED_YELLOW_0_Pin LED_GREEN_0_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_0_Pin
 8001458:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 800145c:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2302      	movs	r3, #2
 8001468:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	4619      	mov	r1, r3
 8001470:	480b      	ldr	r0, [pc, #44]	; (80014a0 <MX_GPIO_Init+0xbc>)
 8001472:	f000 fa55 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D0_Pin
                           E0_Pin F0_Pin G0_Pin EN1_Pin
                           EN2_Pin D_Pin E_Pin F_Pin
                           G_Pin A0_Pin B0_Pin C0_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D0_Pin
 8001476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800147a:	60bb      	str	r3, [r7, #8]
                          |E0_Pin|F0_Pin|G0_Pin|EN1_Pin
                          |EN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A0_Pin|B0_Pin|C0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2302      	movs	r3, #2
 8001486:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	4619      	mov	r1, r3
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_GPIO_Init+0xc0>)
 8001490:	f000 fa46 	bl	8001920 <HAL_GPIO_Init>

}
 8001494:	bf00      	nop
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010800 	.word	0x40010800
 80014a4:	40010c00 	.word	0x40010c00

080014a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ac:	b672      	cpsid	i
}
 80014ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <Error_Handler+0x8>
	...

080014b4 <setTimer0>:
int timer1_counter = 0;
int timer1_flag = 0;
int timer2_counter = 0;
int timer2_flag = 0;
int TIMER_CYCLE = 10;
void setTimer0(int duration){
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/ TIMER_CYCLE;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <setTimer0+0x28>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80014c6:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <setTimer0+0x2c>)
 80014c8:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <setTimer0+0x30>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	2000000c 	.word	0x2000000c
 80014e0:	20000074 	.word	0x20000074
 80014e4:	20000078 	.word	0x20000078

080014e8 <setTimer1>:

void setTimer1(int duration){
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/ TIMER_CYCLE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <setTimer1+0x28>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80014fa:	4a06      	ldr	r2, [pc, #24]	; (8001514 <setTimer1+0x2c>)
 80014fc:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <setTimer1+0x30>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2000000c 	.word	0x2000000c
 8001514:	2000007c 	.word	0x2000007c
 8001518:	20000080 	.word	0x20000080

0800151c <setTimer2>:

void setTimer2(int duration){
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/ TIMER_CYCLE;
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <setTimer2+0x28>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	fb92 f3f3 	sdiv	r3, r2, r3
 800152e:	4a06      	ldr	r2, [pc, #24]	; (8001548 <setTimer2+0x2c>)
 8001530:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <setTimer2+0x30>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	2000000c 	.word	0x2000000c
 8001548:	20000084 	.word	0x20000084
 800154c:	20000088 	.word	0x20000088

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_MspInit+0x5c>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_MspInit+0x5c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6193      	str	r3, [r2, #24]
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_MspInit+0x5c>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_MspInit+0x5c>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_MspInit+0x5c>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_MspInit+0x5c>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_MspInit+0x60>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <HAL_MspInit+0x60>)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010000 	.word	0x40010000

080015b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c4:	d10b      	bne.n	80015de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_TIM_Base_MspInit+0x34>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_TIM_Base_MspInit+0x34>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	61d3      	str	r3, [r2, #28]
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_TIM_Base_MspInit+0x34>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <NMI_Handler+0x4>

080015f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <MemManage_Handler+0x4>

080015fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler+0x4>

0800160a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001632:	f000 f875 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}

0800163a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
	...

08001648 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001648:	f7ff fff7 	bl	800163a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800164e:	490c      	ldr	r1, [pc, #48]	; (8001680 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a09      	ldr	r2, [pc, #36]	; (8001688 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001664:	4c09      	ldr	r4, [pc, #36]	; (800168c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001672:	f001 f987 	bl	8002984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001676:	f7ff fdd3 	bl	8001220 <main>
  bx lr
 800167a:	4770      	bx	lr
  ldr r0, =_sdata
 800167c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001680:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001684:	08002a20 	.word	0x08002a20
  ldr r2, =_sbss
 8001688:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800168c:	200000d8 	.word	0x200000d8

08001690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC1_2_IRQHandler>
	...

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <HAL_Init+0x28>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a07      	ldr	r2, [pc, #28]	; (80016bc <HAL_Init+0x28>)
 800169e:	f043 0310 	orr.w	r3, r3, #16
 80016a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f000 f907 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016aa:	200f      	movs	r0, #15
 80016ac:	f000 f808 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b0:	f7ff ff4e 	bl	8001550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40022000 	.word	0x40022000

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x54>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x58>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f911 	bl	8001906 <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f000 f8e7 	bl	80018ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	; (800171c <HAL_InitTick+0x5c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000010 	.word	0x20000010
 8001718:	20000018 	.word	0x20000018
 800171c:	20000014 	.word	0x20000014

08001720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_IncTick+0x1c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_IncTick+0x20>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a03      	ldr	r2, [pc, #12]	; (8001740 <HAL_IncTick+0x20>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	20000018 	.word	0x20000018
 8001740:	200000d4 	.word	0x200000d4

08001744 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b02      	ldr	r3, [pc, #8]	; (8001754 <HAL_GetTick+0x10>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	200000d4 	.word	0x200000d4

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	490c      	ldr	r1, [pc, #48]	; (8001808 <__NVIC_SetPriority+0x4c>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4908      	ldr	r1, [pc, #32]	; (800180c <__NVIC_SetPriority+0x50>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3b04      	subs	r3, #4
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	f04f 32ff 	mov.w	r2, #4294967295
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43d9      	mvns	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	4313      	orrs	r3, r2
         );
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff90 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff49 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff5e 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff90 	bl	8001810 <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5f 	bl	80017bc <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffb0 	bl	8001874 <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001920:	b480      	push	{r7}
 8001922:	b08b      	sub	sp, #44	; 0x2c
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001932:	e148      	b.n	8001bc6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001934:	2201      	movs	r2, #1
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	429a      	cmp	r2, r3
 800194e:	f040 8137 	bne.w	8001bc0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4aa3      	ldr	r2, [pc, #652]	; (8001be4 <HAL_GPIO_Init+0x2c4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d05e      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
 800195c:	4aa1      	ldr	r2, [pc, #644]	; (8001be4 <HAL_GPIO_Init+0x2c4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d875      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 8001962:	4aa1      	ldr	r2, [pc, #644]	; (8001be8 <HAL_GPIO_Init+0x2c8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d058      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
 8001968:	4a9f      	ldr	r2, [pc, #636]	; (8001be8 <HAL_GPIO_Init+0x2c8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d86f      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 800196e:	4a9f      	ldr	r2, [pc, #636]	; (8001bec <HAL_GPIO_Init+0x2cc>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d052      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
 8001974:	4a9d      	ldr	r2, [pc, #628]	; (8001bec <HAL_GPIO_Init+0x2cc>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d869      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 800197a:	4a9d      	ldr	r2, [pc, #628]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d04c      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
 8001980:	4a9b      	ldr	r2, [pc, #620]	; (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d863      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 8001986:	4a9b      	ldr	r2, [pc, #620]	; (8001bf4 <HAL_GPIO_Init+0x2d4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d046      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
 800198c:	4a99      	ldr	r2, [pc, #612]	; (8001bf4 <HAL_GPIO_Init+0x2d4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d85d      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 8001992:	2b12      	cmp	r3, #18
 8001994:	d82a      	bhi.n	80019ec <HAL_GPIO_Init+0xcc>
 8001996:	2b12      	cmp	r3, #18
 8001998:	d859      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 800199a:	a201      	add	r2, pc, #4	; (adr r2, 80019a0 <HAL_GPIO_Init+0x80>)
 800199c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a0:	08001a1b 	.word	0x08001a1b
 80019a4:	080019f5 	.word	0x080019f5
 80019a8:	08001a07 	.word	0x08001a07
 80019ac:	08001a49 	.word	0x08001a49
 80019b0:	08001a4f 	.word	0x08001a4f
 80019b4:	08001a4f 	.word	0x08001a4f
 80019b8:	08001a4f 	.word	0x08001a4f
 80019bc:	08001a4f 	.word	0x08001a4f
 80019c0:	08001a4f 	.word	0x08001a4f
 80019c4:	08001a4f 	.word	0x08001a4f
 80019c8:	08001a4f 	.word	0x08001a4f
 80019cc:	08001a4f 	.word	0x08001a4f
 80019d0:	08001a4f 	.word	0x08001a4f
 80019d4:	08001a4f 	.word	0x08001a4f
 80019d8:	08001a4f 	.word	0x08001a4f
 80019dc:	08001a4f 	.word	0x08001a4f
 80019e0:	08001a4f 	.word	0x08001a4f
 80019e4:	080019fd 	.word	0x080019fd
 80019e8:	08001a11 	.word	0x08001a11
 80019ec:	4a82      	ldr	r2, [pc, #520]	; (8001bf8 <HAL_GPIO_Init+0x2d8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d013      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019f2:	e02c      	b.n	8001a4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	623b      	str	r3, [r7, #32]
          break;
 80019fa:	e029      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	3304      	adds	r3, #4
 8001a02:	623b      	str	r3, [r7, #32]
          break;
 8001a04:	e024      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	623b      	str	r3, [r7, #32]
          break;
 8001a0e:	e01f      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	330c      	adds	r3, #12
 8001a16:	623b      	str	r3, [r7, #32]
          break;
 8001a18:	e01a      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a22:	2304      	movs	r3, #4
 8001a24:	623b      	str	r3, [r7, #32]
          break;
 8001a26:	e013      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a30:	2308      	movs	r3, #8
 8001a32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	611a      	str	r2, [r3, #16]
          break;
 8001a3a:	e009      	b.n	8001a50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	615a      	str	r2, [r3, #20]
          break;
 8001a46:	e003      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
          break;
 8001a4c:	e000      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          break;
 8001a4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2bff      	cmp	r3, #255	; 0xff
 8001a54:	d801      	bhi.n	8001a5a <HAL_GPIO_Init+0x13a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	e001      	b.n	8001a5e <HAL_GPIO_Init+0x13e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2bff      	cmp	r3, #255	; 0xff
 8001a64:	d802      	bhi.n	8001a6c <HAL_GPIO_Init+0x14c>
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	e002      	b.n	8001a72 <HAL_GPIO_Init+0x152>
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	3b08      	subs	r3, #8
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	210f      	movs	r1, #15
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	401a      	ands	r2, r3
 8001a84:	6a39      	ldr	r1, [r7, #32]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8090 	beq.w	8001bc0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa0:	4b56      	ldr	r3, [pc, #344]	; (8001bfc <HAL_GPIO_Init+0x2dc>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a55      	ldr	r2, [pc, #340]	; (8001bfc <HAL_GPIO_Init+0x2dc>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6193      	str	r3, [r2, #24]
 8001aac:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_GPIO_Init+0x2dc>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ab8:	4a51      	ldr	r2, [pc, #324]	; (8001c00 <HAL_GPIO_Init+0x2e0>)
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a49      	ldr	r2, [pc, #292]	; (8001c04 <HAL_GPIO_Init+0x2e4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00d      	beq.n	8001b00 <HAL_GPIO_Init+0x1e0>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a48      	ldr	r2, [pc, #288]	; (8001c08 <HAL_GPIO_Init+0x2e8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d007      	beq.n	8001afc <HAL_GPIO_Init+0x1dc>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a47      	ldr	r2, [pc, #284]	; (8001c0c <HAL_GPIO_Init+0x2ec>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d101      	bne.n	8001af8 <HAL_GPIO_Init+0x1d8>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e004      	b.n	8001b02 <HAL_GPIO_Init+0x1e2>
 8001af8:	2303      	movs	r3, #3
 8001afa:	e002      	b.n	8001b02 <HAL_GPIO_Init+0x1e2>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_GPIO_Init+0x1e2>
 8001b00:	2300      	movs	r3, #0
 8001b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b04:	f002 0203 	and.w	r2, r2, #3
 8001b08:	0092      	lsls	r2, r2, #2
 8001b0a:	4093      	lsls	r3, r2
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b12:	493b      	ldr	r1, [pc, #236]	; (8001c00 <HAL_GPIO_Init+0x2e0>)
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	3302      	adds	r3, #2
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d006      	beq.n	8001b3a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b2c:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	4937      	ldr	r1, [pc, #220]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	608b      	str	r3, [r1, #8]
 8001b38:	e006      	b.n	8001b48 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b3a:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	4933      	ldr	r1, [pc, #204]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b54:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	492d      	ldr	r1, [pc, #180]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	60cb      	str	r3, [r1, #12]
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b62:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4929      	ldr	r1, [pc, #164]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	4923      	ldr	r1, [pc, #140]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b8a:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	491f      	ldr	r1, [pc, #124]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4919      	ldr	r1, [pc, #100]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	4915      	ldr	r1, [pc, #84]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f47f aeaf 	bne.w	8001934 <HAL_GPIO_Init+0x14>
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	bf00      	nop
 8001bda:	372c      	adds	r7, #44	; 0x2c
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	10320000 	.word	0x10320000
 8001be8:	10310000 	.word	0x10310000
 8001bec:	10220000 	.word	0x10220000
 8001bf0:	10210000 	.word	0x10210000
 8001bf4:	10120000 	.word	0x10120000
 8001bf8:	10110000 	.word	0x10110000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010000 	.word	0x40010000
 8001c04:	40010800 	.word	0x40010800
 8001c08:	40010c00 	.word	0x40010c00
 8001c0c:	40011000 	.word	0x40011000
 8001c10:	40010400 	.word	0x40010400

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c30:	e003      	b.n	8001c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	611a      	str	r2, [r3, #16]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	041a      	lsls	r2, r3, #16
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	43d9      	mvns	r1, r3
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	400b      	ands	r3, r1
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	611a      	str	r2, [r3, #16]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
	...

08001c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e26c      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 8087 	beq.w	8001da6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c98:	4b92      	ldr	r3, [pc, #584]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d00c      	beq.n	8001cbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca4:	4b8f      	ldr	r3, [pc, #572]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 030c 	and.w	r3, r3, #12
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d112      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x5e>
 8001cb0:	4b8c      	ldr	r3, [pc, #560]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbc:	d10b      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbe:	4b89      	ldr	r3, [pc, #548]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d06c      	beq.n	8001da4 <HAL_RCC_OscConfig+0x12c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d168      	bne.n	8001da4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e246      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x76>
 8001ce0:	4b80      	ldr	r3, [pc, #512]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a7f      	ldr	r2, [pc, #508]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	e02e      	b.n	8001d4c <HAL_RCC_OscConfig+0xd4>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x98>
 8001cf6:	4b7b      	ldr	r3, [pc, #492]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a7a      	ldr	r2, [pc, #488]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	4b78      	ldr	r3, [pc, #480]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a77      	ldr	r2, [pc, #476]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e01d      	b.n	8001d4c <HAL_RCC_OscConfig+0xd4>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0xbc>
 8001d1a:	4b72      	ldr	r3, [pc, #456]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a71      	ldr	r2, [pc, #452]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b6f      	ldr	r3, [pc, #444]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a6e      	ldr	r2, [pc, #440]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e00b      	b.n	8001d4c <HAL_RCC_OscConfig+0xd4>
 8001d34:	4b6b      	ldr	r3, [pc, #428]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a6a      	ldr	r2, [pc, #424]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b68      	ldr	r3, [pc, #416]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a67      	ldr	r2, [pc, #412]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff fcf6 	bl	8001744 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fcf2 	bl	8001744 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e1fa      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b5d      	ldr	r3, [pc, #372]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0xe4>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fce2 	bl	8001744 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fcde 	bl	8001744 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e1e6      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x10c>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d063      	beq.n	8001e7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001db2:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dbe:	4b49      	ldr	r3, [pc, #292]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d11c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x18c>
 8001dca:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd6:	4b43      	ldr	r3, [pc, #268]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_RCC_OscConfig+0x176>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e1ba      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4939      	ldr	r1, [pc, #228]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	e03a      	b.n	8001e7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d020      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0c:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7ff fc97 	bl	8001744 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff fc93 	bl	8001744 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e19b      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4927      	ldr	r1, [pc, #156]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <HAL_RCC_OscConfig+0x270>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fc76 	bl	8001744 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5c:	f7ff fc72 	bl	8001744 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e17a      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d03a      	beq.n	8001efc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d019      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e94:	f7ff fc56 	bl	8001744 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fc52 	bl	8001744 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e15a      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f000 fa9a 	bl	80023f4 <RCC_Delay>
 8001ec0:	e01c      	b.n	8001efc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_OscConfig+0x274>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec8:	f7ff fc3c 	bl	8001744 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ece:	e00f      	b.n	8001ef0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed0:	f7ff fc38 	bl	8001744 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d908      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e140      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	42420000 	.word	0x42420000
 8001eec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef0:	4b9e      	ldr	r3, [pc, #632]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1e9      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 80a6 	beq.w	8002056 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0e:	4b97      	ldr	r3, [pc, #604]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10d      	bne.n	8001f36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	4b94      	ldr	r3, [pc, #592]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	4a93      	ldr	r2, [pc, #588]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f24:	61d3      	str	r3, [r2, #28]
 8001f26:	4b91      	ldr	r3, [pc, #580]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f32:	2301      	movs	r3, #1
 8001f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f36:	4b8e      	ldr	r3, [pc, #568]	; (8002170 <HAL_RCC_OscConfig+0x4f8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d118      	bne.n	8001f74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f42:	4b8b      	ldr	r3, [pc, #556]	; (8002170 <HAL_RCC_OscConfig+0x4f8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a8a      	ldr	r2, [pc, #552]	; (8002170 <HAL_RCC_OscConfig+0x4f8>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4e:	f7ff fbf9 	bl	8001744 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f56:	f7ff fbf5 	bl	8001744 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b64      	cmp	r3, #100	; 0x64
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0fd      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	4b81      	ldr	r3, [pc, #516]	; (8002170 <HAL_RCC_OscConfig+0x4f8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x312>
 8001f7c:	4b7b      	ldr	r3, [pc, #492]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4a7a      	ldr	r2, [pc, #488]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6213      	str	r3, [r2, #32]
 8001f88:	e02d      	b.n	8001fe6 <HAL_RCC_OscConfig+0x36e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0x334>
 8001f92:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4a75      	ldr	r2, [pc, #468]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	6213      	str	r3, [r2, #32]
 8001f9e:	4b73      	ldr	r3, [pc, #460]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a72      	ldr	r2, [pc, #456]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	f023 0304 	bic.w	r3, r3, #4
 8001fa8:	6213      	str	r3, [r2, #32]
 8001faa:	e01c      	b.n	8001fe6 <HAL_RCC_OscConfig+0x36e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b05      	cmp	r3, #5
 8001fb2:	d10c      	bne.n	8001fce <HAL_RCC_OscConfig+0x356>
 8001fb4:	4b6d      	ldr	r3, [pc, #436]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a6c      	ldr	r2, [pc, #432]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	4b6a      	ldr	r3, [pc, #424]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a69      	ldr	r2, [pc, #420]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	e00b      	b.n	8001fe6 <HAL_RCC_OscConfig+0x36e>
 8001fce:	4b67      	ldr	r3, [pc, #412]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a66      	ldr	r2, [pc, #408]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	6213      	str	r3, [r2, #32]
 8001fda:	4b64      	ldr	r3, [pc, #400]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a63      	ldr	r2, [pc, #396]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	f023 0304 	bic.w	r3, r3, #4
 8001fe4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d015      	beq.n	800201a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fee:	f7ff fba9 	bl	8001744 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7ff fba5 	bl	8001744 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	; 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e0ab      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200c:	4b57      	ldr	r3, [pc, #348]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0ee      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x37e>
 8002018:	e014      	b.n	8002044 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201a:	f7ff fb93 	bl	8001744 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002020:	e00a      	b.n	8002038 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7ff fb8f 	bl	8001744 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e095      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002038:	4b4c      	ldr	r3, [pc, #304]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1ee      	bne.n	8002022 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002044:	7dfb      	ldrb	r3, [r7, #23]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d105      	bne.n	8002056 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204a:	4b48      	ldr	r3, [pc, #288]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4a47      	ldr	r2, [pc, #284]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8002050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002054:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 8081 	beq.w	8002162 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002060:	4b42      	ldr	r3, [pc, #264]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b08      	cmp	r3, #8
 800206a:	d061      	beq.n	8002130 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d146      	bne.n	8002102 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002074:	4b3f      	ldr	r3, [pc, #252]	; (8002174 <HAL_RCC_OscConfig+0x4fc>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7ff fb63 	bl	8001744 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002082:	f7ff fb5f 	bl	8001744 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e067      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002094:	4b35      	ldr	r3, [pc, #212]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f0      	bne.n	8002082 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a8:	d108      	bne.n	80020bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020aa:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	492d      	ldr	r1, [pc, #180]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020bc:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a19      	ldr	r1, [r3, #32]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	430b      	orrs	r3, r1
 80020ce:	4927      	ldr	r1, [pc, #156]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d4:	4b27      	ldr	r3, [pc, #156]	; (8002174 <HAL_RCC_OscConfig+0x4fc>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7ff fb33 	bl	8001744 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e2:	f7ff fb2f 	bl	8001744 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e037      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f4:	4b1d      	ldr	r3, [pc, #116]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x46a>
 8002100:	e02f      	b.n	8002162 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002102:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_RCC_OscConfig+0x4fc>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fb1c 	bl	8001744 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002110:	f7ff fb18 	bl	8001744 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e020      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x498>
 800212e:	e018      	b.n	8002162 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e013      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_OscConfig+0x4f4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	429a      	cmp	r2, r3
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	40007000 	.word	0x40007000
 8002174:	42420060 	.word	0x42420060

08002178 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0d0      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800218c:	4b6a      	ldr	r3, [pc, #424]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d910      	bls.n	80021bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b67      	ldr	r3, [pc, #412]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 0207 	bic.w	r2, r3, #7
 80021a2:	4965      	ldr	r1, [pc, #404]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b63      	ldr	r3, [pc, #396]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0b8      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d020      	beq.n	800220a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d4:	4b59      	ldr	r3, [pc, #356]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a58      	ldr	r2, [pc, #352]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021ec:	4b53      	ldr	r3, [pc, #332]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a52      	ldr	r2, [pc, #328]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f8:	4b50      	ldr	r3, [pc, #320]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	494d      	ldr	r1, [pc, #308]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d040      	beq.n	8002298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d115      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e07f      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002236:	4b41      	ldr	r3, [pc, #260]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e073      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	4b3d      	ldr	r3, [pc, #244]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e06b      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002256:	4b39      	ldr	r3, [pc, #228]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f023 0203 	bic.w	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4936      	ldr	r1, [pc, #216]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002268:	f7ff fa6c 	bl	8001744 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	e00a      	b.n	8002286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002270:	f7ff fa68 	bl	8001744 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e053      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	4b2d      	ldr	r3, [pc, #180]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 020c 	and.w	r2, r3, #12
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	429a      	cmp	r2, r3
 8002296:	d1eb      	bne.n	8002270 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002298:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d210      	bcs.n	80022c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 0207 	bic.w	r2, r3, #7
 80022ae:	4922      	ldr	r1, [pc, #136]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e032      	b.n	800232e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4916      	ldr	r1, [pc, #88]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	490e      	ldr	r1, [pc, #56]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002306:	f000 f821 	bl	800234c <HAL_RCC_GetSysClockFreq>
 800230a:	4602      	mov	r2, r0
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	490a      	ldr	r1, [pc, #40]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	5ccb      	ldrb	r3, [r1, r3]
 800231a:	fa22 f303 	lsr.w	r3, r2, r3
 800231e:	4a09      	ldr	r2, [pc, #36]	; (8002344 <HAL_RCC_ClockConfig+0x1cc>)
 8002320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_ClockConfig+0x1d0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff f9ca 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40022000 	.word	0x40022000
 800233c:	40021000 	.word	0x40021000
 8002340:	080029f4 	.word	0x080029f4
 8002344:	20000010 	.word	0x20000010
 8002348:	20000014 	.word	0x20000014

0800234c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002366:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b04      	cmp	r3, #4
 8002374:	d002      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x30>
 8002376:	2b08      	cmp	r3, #8
 8002378:	d003      	beq.n	8002382 <HAL_RCC_GetSysClockFreq+0x36>
 800237a:	e027      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800237e:	613b      	str	r3, [r7, #16]
      break;
 8002380:	e027      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	0c9b      	lsrs	r3, r3, #18
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800238c:	5cd3      	ldrb	r3, [r2, r3]
 800238e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d010      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	0c5b      	lsrs	r3, r3, #17
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	4a11      	ldr	r2, [pc, #68]	; (80023ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a0d      	ldr	r2, [pc, #52]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ae:	fb02 f203 	mul.w	r2, r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e004      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a0c      	ldr	r2, [pc, #48]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023c0:	fb02 f303 	mul.w	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	613b      	str	r3, [r7, #16]
      break;
 80023ca:	e002      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ce:	613b      	str	r3, [r7, #16]
      break;
 80023d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d2:	693b      	ldr	r3, [r7, #16]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	007a1200 	.word	0x007a1200
 80023e8:	08002a04 	.word	0x08002a04
 80023ec:	08002a14 	.word	0x08002a14
 80023f0:	003d0900 	.word	0x003d0900

080023f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <RCC_Delay+0x34>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0a      	ldr	r2, [pc, #40]	; (800242c <RCC_Delay+0x38>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0a5b      	lsrs	r3, r3, #9
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002410:	bf00      	nop
  }
  while (Delay --);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1e5a      	subs	r2, r3, #1
 8002416:	60fa      	str	r2, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f9      	bne.n	8002410 <RCC_Delay+0x1c>
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	20000010 	.word	0x20000010
 800242c:	10624dd3 	.word	0x10624dd3

08002430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e041      	b.n	80024c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff f8ac 	bl	80015b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3304      	adds	r3, #4
 800246c:	4619      	mov	r1, r3
 800246e:	4610      	mov	r0, r2
 8002470:	f000 f942 	bl	80026f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d001      	beq.n	80024e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e035      	b.n	8002554 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a16      	ldr	r2, [pc, #88]	; (8002560 <HAL_TIM_Base_Start_IT+0x90>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d009      	beq.n	800251e <HAL_TIM_Base_Start_IT+0x4e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002512:	d004      	beq.n	800251e <HAL_TIM_Base_Start_IT+0x4e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a12      	ldr	r2, [pc, #72]	; (8002564 <HAL_TIM_Base_Start_IT+0x94>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d111      	bne.n	8002542 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b06      	cmp	r3, #6
 800252e:	d010      	beq.n	8002552 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002540:	e007      	b.n	8002552 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0201 	orr.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40012c00 	.word	0x40012c00
 8002564:	40000400 	.word	0x40000400

08002568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_TIM_ConfigClockSource+0x1c>
 8002580:	2302      	movs	r3, #2
 8002582:	e0b4      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x186>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025bc:	d03e      	beq.n	800263c <HAL_TIM_ConfigClockSource+0xd4>
 80025be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c2:	f200 8087 	bhi.w	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ca:	f000 8086 	beq.w	80026da <HAL_TIM_ConfigClockSource+0x172>
 80025ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d2:	d87f      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025d4:	2b70      	cmp	r3, #112	; 0x70
 80025d6:	d01a      	beq.n	800260e <HAL_TIM_ConfigClockSource+0xa6>
 80025d8:	2b70      	cmp	r3, #112	; 0x70
 80025da:	d87b      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025dc:	2b60      	cmp	r3, #96	; 0x60
 80025de:	d050      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0x11a>
 80025e0:	2b60      	cmp	r3, #96	; 0x60
 80025e2:	d877      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025e4:	2b50      	cmp	r3, #80	; 0x50
 80025e6:	d03c      	beq.n	8002662 <HAL_TIM_ConfigClockSource+0xfa>
 80025e8:	2b50      	cmp	r3, #80	; 0x50
 80025ea:	d873      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025ec:	2b40      	cmp	r3, #64	; 0x40
 80025ee:	d058      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x13a>
 80025f0:	2b40      	cmp	r3, #64	; 0x40
 80025f2:	d86f      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025f4:	2b30      	cmp	r3, #48	; 0x30
 80025f6:	d064      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x15a>
 80025f8:	2b30      	cmp	r3, #48	; 0x30
 80025fa:	d86b      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d060      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002600:	2b20      	cmp	r3, #32
 8002602:	d867      	bhi.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002604:	2b00      	cmp	r3, #0
 8002606:	d05c      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002608:	2b10      	cmp	r3, #16
 800260a:	d05a      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x15a>
 800260c:	e062      	b.n	80026d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6899      	ldr	r1, [r3, #8]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f000 f93a 	bl	8002896 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002630:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	609a      	str	r2, [r3, #8]
      break;
 800263a:	e04f      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6899      	ldr	r1, [r3, #8]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f000 f923 	bl	8002896 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800265e:	609a      	str	r2, [r3, #8]
      break;
 8002660:	e03c      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	461a      	mov	r2, r3
 8002670:	f000 f89a 	bl	80027a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2150      	movs	r1, #80	; 0x50
 800267a:	4618      	mov	r0, r3
 800267c:	f000 f8f1 	bl	8002862 <TIM_ITRx_SetConfig>
      break;
 8002680:	e02c      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	461a      	mov	r2, r3
 8002690:	f000 f8b8 	bl	8002804 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2160      	movs	r1, #96	; 0x60
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f8e1 	bl	8002862 <TIM_ITRx_SetConfig>
      break;
 80026a0:	e01c      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f000 f87a 	bl	80027a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2140      	movs	r1, #64	; 0x40
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f8d1 	bl	8002862 <TIM_ITRx_SetConfig>
      break;
 80026c0:	e00c      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4619      	mov	r1, r3
 80026cc:	4610      	mov	r0, r2
 80026ce:	f000 f8c8 	bl	8002862 <TIM_ITRx_SetConfig>
      break;
 80026d2:	e003      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
      break;
 80026d8:	e000      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a25      	ldr	r2, [pc, #148]	; (80027a0 <TIM_Base_SetConfig+0xa8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d007      	beq.n	8002720 <TIM_Base_SetConfig+0x28>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002716:	d003      	beq.n	8002720 <TIM_Base_SetConfig+0x28>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a22      	ldr	r2, [pc, #136]	; (80027a4 <TIM_Base_SetConfig+0xac>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d108      	bne.n	8002732 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1a      	ldr	r2, [pc, #104]	; (80027a0 <TIM_Base_SetConfig+0xa8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <TIM_Base_SetConfig+0x52>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002740:	d003      	beq.n	800274a <TIM_Base_SetConfig+0x52>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <TIM_Base_SetConfig+0xac>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d108      	bne.n	800275c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a07      	ldr	r2, [pc, #28]	; (80027a0 <TIM_Base_SetConfig+0xa8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d103      	bne.n	8002790 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	615a      	str	r2, [r3, #20]
}
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	40000400 	.word	0x40000400

080027a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f023 0201 	bic.w	r2, r3, #1
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f023 030a 	bic.w	r3, r3, #10
 80027e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	621a      	str	r2, [r3, #32]
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f023 0210 	bic.w	r2, r3, #16
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800282e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	031b      	lsls	r3, r3, #12
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002840:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	621a      	str	r2, [r3, #32]
}
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	f043 0307 	orr.w	r3, r3, #7
 8002884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	609a      	str	r2, [r3, #8]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002896:	b480      	push	{r7}
 8002898:	b087      	sub	sp, #28
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	021a      	lsls	r2, r3, #8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	431a      	orrs	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	4313      	orrs	r3, r2
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	609a      	str	r2, [r3, #8]
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e041      	b.n	8002970 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a14      	ldr	r2, [pc, #80]	; (800297c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d009      	beq.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002938:	d004      	beq.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a10      	ldr	r2, [pc, #64]	; (8002980 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d10c      	bne.n	800295e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800294a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4313      	orrs	r3, r2
 8002954:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40012c00 	.word	0x40012c00
 8002980:	40000400 	.word	0x40000400

08002984 <__libc_init_array>:
 8002984:	b570      	push	{r4, r5, r6, lr}
 8002986:	2600      	movs	r6, #0
 8002988:	4d0c      	ldr	r5, [pc, #48]	; (80029bc <__libc_init_array+0x38>)
 800298a:	4c0d      	ldr	r4, [pc, #52]	; (80029c0 <__libc_init_array+0x3c>)
 800298c:	1b64      	subs	r4, r4, r5
 800298e:	10a4      	asrs	r4, r4, #2
 8002990:	42a6      	cmp	r6, r4
 8002992:	d109      	bne.n	80029a8 <__libc_init_array+0x24>
 8002994:	f000 f822 	bl	80029dc <_init>
 8002998:	2600      	movs	r6, #0
 800299a:	4d0a      	ldr	r5, [pc, #40]	; (80029c4 <__libc_init_array+0x40>)
 800299c:	4c0a      	ldr	r4, [pc, #40]	; (80029c8 <__libc_init_array+0x44>)
 800299e:	1b64      	subs	r4, r4, r5
 80029a0:	10a4      	asrs	r4, r4, #2
 80029a2:	42a6      	cmp	r6, r4
 80029a4:	d105      	bne.n	80029b2 <__libc_init_array+0x2e>
 80029a6:	bd70      	pop	{r4, r5, r6, pc}
 80029a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ac:	4798      	blx	r3
 80029ae:	3601      	adds	r6, #1
 80029b0:	e7ee      	b.n	8002990 <__libc_init_array+0xc>
 80029b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b6:	4798      	blx	r3
 80029b8:	3601      	adds	r6, #1
 80029ba:	e7f2      	b.n	80029a2 <__libc_init_array+0x1e>
 80029bc:	08002a18 	.word	0x08002a18
 80029c0:	08002a18 	.word	0x08002a18
 80029c4:	08002a18 	.word	0x08002a18
 80029c8:	08002a1c 	.word	0x08002a1c

080029cc <memset>:
 80029cc:	4603      	mov	r3, r0
 80029ce:	4402      	add	r2, r0
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d100      	bne.n	80029d6 <memset+0xa>
 80029d4:	4770      	bx	lr
 80029d6:	f803 1b01 	strb.w	r1, [r3], #1
 80029da:	e7f9      	b.n	80029d0 <memset+0x4>

080029dc <_init>:
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029de:	bf00      	nop
 80029e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e2:	bc08      	pop	{r3}
 80029e4:	469e      	mov	lr, r3
 80029e6:	4770      	bx	lr

080029e8 <_fini>:
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ea:	bf00      	nop
 80029ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ee:	bc08      	pop	{r3}
 80029f0:	469e      	mov	lr, r3
 80029f2:	4770      	bx	lr
