
vxl_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002788  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002894  08002894  00012894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028b8  080028b8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080028b8  080028b8  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028b8  080028b8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028b8  080028b8  000128b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028bc  080028bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080028c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000001c  080028dc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080028dc  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008be0  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001920  00000000  00000000  00028c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002a548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002af38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016acd  00000000  00000000  0002b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b18d  00000000  00000000  0004230d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823aa  00000000  00000000  0004d49a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf844  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d4  00000000  00000000  000cf898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800287c 	.word	0x0800287c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	0800287c 	.word	0x0800287c

0800014c <isButton1Pressed>:
int TimeOutForNoKeyPress = 1000;
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000038 	.word	0x20000038

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	2000003c 	.word	0x2000003c

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000040 	.word	0x20000040

080001b8 <fsm_run>:
int tempYELLOW = 0;
int tempGREEN = 0;
int dis1 = 0;
int dis2 = 0;

void fsm_run() {
 80001b8:	b5b0      	push	{r4, r5, r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	switch (state) {
 80001bc:	4ba2      	ldr	r3, [pc, #648]	; (8000448 <fsm_run+0x290>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b14      	cmp	r3, #20
 80001c2:	f200 83a8 	bhi.w	8000916 <fsm_run+0x75e>
 80001c6:	a201      	add	r2, pc, #4	; (adr r2, 80001cc <fsm_run+0x14>)
 80001c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001cc:	08000221 	.word	0x08000221
 80001d0:	0800029d 	.word	0x0800029d
 80001d4:	080005af 	.word	0x080005af
 80001d8:	080007b1 	.word	0x080007b1
 80001dc:	08000865 	.word	0x08000865
 80001e0:	08000917 	.word	0x08000917
 80001e4:	08000917 	.word	0x08000917
 80001e8:	08000917 	.word	0x08000917
 80001ec:	08000917 	.word	0x08000917
 80001f0:	08000917 	.word	0x08000917
 80001f4:	08000917 	.word	0x08000917
 80001f8:	08000917 	.word	0x08000917
 80001fc:	08000917 	.word	0x08000917
 8000200:	08000917 	.word	0x08000917
 8000204:	08000917 	.word	0x08000917
 8000208:	08000917 	.word	0x08000917
 800020c:	08000917 	.word	0x08000917
 8000210:	08000917 	.word	0x08000917
 8000214:	08000917 	.word	0x08000917
 8000218:	08000917 	.word	0x08000917
 800021c:	080006bd 	.word	0x080006bd
	case RESET:
		setTimer1(500);
 8000220:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000224:	f001 f8b0 	bl	8001388 <setTimer1>
		setTimer2(1000);
 8000228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022c:	f001 f8c6 	bl	80013bc <setTimer2>

		tempRED = timeRED;
 8000230:	4b86      	ldr	r3, [pc, #536]	; (800044c <fsm_run+0x294>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a86      	ldr	r2, [pc, #536]	; (8000450 <fsm_run+0x298>)
 8000236:	6013      	str	r3, [r2, #0]
		tempYELLOW = timeYELLOW;
 8000238:	4b86      	ldr	r3, [pc, #536]	; (8000454 <fsm_run+0x29c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a86      	ldr	r2, [pc, #536]	; (8000458 <fsm_run+0x2a0>)
 800023e:	6013      	str	r3, [r2, #0]
		tempGREEN = timeGREEN;
 8000240:	4b86      	ldr	r3, [pc, #536]	; (800045c <fsm_run+0x2a4>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a86      	ldr	r2, [pc, #536]	; (8000460 <fsm_run+0x2a8>)
 8000246:	6013      	str	r3, [r2, #0]

		counter1 = 0;
 8000248:	4b86      	ldr	r3, [pc, #536]	; (8000464 <fsm_run+0x2ac>)
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
		counter2 = 0;
 800024e:	4b86      	ldr	r3, [pc, #536]	; (8000468 <fsm_run+0x2b0>)
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	2110      	movs	r1, #16
 8000258:	4884      	ldr	r0, [pc, #528]	; (800046c <fsm_run+0x2b4>)
 800025a:	f001 fc2b 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800025e:	2201      	movs	r2, #1
 8000260:	2140      	movs	r1, #64	; 0x40
 8000262:	4882      	ldr	r0, [pc, #520]	; (800046c <fsm_run+0x2b4>)
 8000264:	f001 fc26 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	2120      	movs	r1, #32
 800026c:	487f      	ldr	r0, [pc, #508]	; (800046c <fsm_run+0x2b4>)
 800026e:	f001 fc21 	bl	8001ab4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000272:	2201      	movs	r2, #1
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	487d      	ldr	r0, [pc, #500]	; (800046c <fsm_run+0x2b4>)
 8000278:	f001 fc1c 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800027c:	2201      	movs	r2, #1
 800027e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000282:	487a      	ldr	r0, [pc, #488]	; (800046c <fsm_run+0x2b4>)
 8000284:	f001 fc16 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028e:	4877      	ldr	r0, [pc, #476]	; (800046c <fsm_run+0x2b4>)
 8000290:	f001 fc10 	bl	8001ab4 <HAL_GPIO_WritePin>

		state = MODE_1;
 8000294:	4b6c      	ldr	r3, [pc, #432]	; (8000448 <fsm_run+0x290>)
 8000296:	2201      	movs	r2, #1
 8000298:	601a      	str	r2, [r3, #0]
		break;
 800029a:	e347      	b.n	800092c <fsm_run+0x774>
	case MODE_1:
		updateClockBuffer(dis1/10, dis1%10, dis2/10, dis2%10);
 800029c:	4b74      	ldr	r3, [pc, #464]	; (8000470 <fsm_run+0x2b8>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a74      	ldr	r2, [pc, #464]	; (8000474 <fsm_run+0x2bc>)
 80002a2:	fb82 1203 	smull	r1, r2, r2, r3
 80002a6:	1092      	asrs	r2, r2, #2
 80002a8:	17db      	asrs	r3, r3, #31
 80002aa:	1ad4      	subs	r4, r2, r3
 80002ac:	4b70      	ldr	r3, [pc, #448]	; (8000470 <fsm_run+0x2b8>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	4b70      	ldr	r3, [pc, #448]	; (8000474 <fsm_run+0x2bc>)
 80002b2:	fb83 1302 	smull	r1, r3, r3, r2
 80002b6:	1099      	asrs	r1, r3, #2
 80002b8:	17d3      	asrs	r3, r2, #31
 80002ba:	1ac9      	subs	r1, r1, r3
 80002bc:	460b      	mov	r3, r1
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	440b      	add	r3, r1
 80002c2:	005b      	lsls	r3, r3, #1
 80002c4:	1ad1      	subs	r1, r2, r3
 80002c6:	4b6c      	ldr	r3, [pc, #432]	; (8000478 <fsm_run+0x2c0>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a6a      	ldr	r2, [pc, #424]	; (8000474 <fsm_run+0x2bc>)
 80002cc:	fb82 0203 	smull	r0, r2, r2, r3
 80002d0:	1092      	asrs	r2, r2, #2
 80002d2:	17db      	asrs	r3, r3, #31
 80002d4:	1ad5      	subs	r5, r2, r3
 80002d6:	4b68      	ldr	r3, [pc, #416]	; (8000478 <fsm_run+0x2c0>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	4b66      	ldr	r3, [pc, #408]	; (8000474 <fsm_run+0x2bc>)
 80002dc:	fb83 0302 	smull	r0, r3, r3, r2
 80002e0:	1098      	asrs	r0, r3, #2
 80002e2:	17d3      	asrs	r3, r2, #31
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4603      	mov	r3, r0
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	4403      	add	r3, r0
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	1ad0      	subs	r0, r2, r3
 80002f0:	4603      	mov	r3, r0
 80002f2:	462a      	mov	r2, r5
 80002f4:	4620      	mov	r0, r4
 80002f6:	f000 fe87 	bl	8001008 <updateClockBuffer>

		if(timer1_flag == 1){
 80002fa:	4b60      	ldr	r3, [pc, #384]	; (800047c <fsm_run+0x2c4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	f040 8121 	bne.w	8000546 <fsm_run+0x38e>
			counter1++;
 8000304:	4b57      	ldr	r3, [pc, #348]	; (8000464 <fsm_run+0x2ac>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3301      	adds	r3, #1
 800030a:	4a56      	ldr	r2, [pc, #344]	; (8000464 <fsm_run+0x2ac>)
 800030c:	6013      	str	r3, [r2, #0]
			counter2++;
 800030e:	4b56      	ldr	r3, [pc, #344]	; (8000468 <fsm_run+0x2b0>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	3301      	adds	r3, #1
 8000314:	4a54      	ldr	r2, [pc, #336]	; (8000468 <fsm_run+0x2b0>)
 8000316:	6013      	str	r3, [r2, #0]

			if(counter1 <= timeRED){
 8000318:	4b52      	ldr	r3, [pc, #328]	; (8000464 <fsm_run+0x2ac>)
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	4b4b      	ldr	r3, [pc, #300]	; (800044c <fsm_run+0x294>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	429a      	cmp	r2, r3
 8000322:	dc16      	bgt.n	8000352 <fsm_run+0x19a>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	2110      	movs	r1, #16
 8000328:	4850      	ldr	r0, [pc, #320]	; (800046c <fsm_run+0x2b4>)
 800032a:	f001 fbc3 	bl	8001ab4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800032e:	2201      	movs	r2, #1
 8000330:	2120      	movs	r1, #32
 8000332:	484e      	ldr	r0, [pc, #312]	; (800046c <fsm_run+0x2b4>)
 8000334:	f001 fbbe 	bl	8001ab4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	2140      	movs	r1, #64	; 0x40
 800033c:	484b      	ldr	r0, [pc, #300]	; (800046c <fsm_run+0x2b4>)
 800033e:	f001 fbb9 	bl	8001ab4 <HAL_GPIO_WritePin>

				dis1 = timeRED - counter1;
 8000342:	4b42      	ldr	r3, [pc, #264]	; (800044c <fsm_run+0x294>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	4b47      	ldr	r3, [pc, #284]	; (8000464 <fsm_run+0x2ac>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	1ad3      	subs	r3, r2, r3
 800034c:	4a48      	ldr	r2, [pc, #288]	; (8000470 <fsm_run+0x2b8>)
 800034e:	6013      	str	r3, [r2, #0]
 8000350:	e04a      	b.n	80003e8 <fsm_run+0x230>
			}
			else if(counter1 <= timeRED + timeGREEN){
 8000352:	4b3e      	ldr	r3, [pc, #248]	; (800044c <fsm_run+0x294>)
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	4b41      	ldr	r3, [pc, #260]	; (800045c <fsm_run+0x2a4>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	441a      	add	r2, r3
 800035c:	4b41      	ldr	r3, [pc, #260]	; (8000464 <fsm_run+0x2ac>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	429a      	cmp	r2, r3
 8000362:	db19      	blt.n	8000398 <fsm_run+0x1e0>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000364:	2201      	movs	r2, #1
 8000366:	2110      	movs	r1, #16
 8000368:	4840      	ldr	r0, [pc, #256]	; (800046c <fsm_run+0x2b4>)
 800036a:	f001 fba3 	bl	8001ab4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2120      	movs	r1, #32
 8000372:	483e      	ldr	r0, [pc, #248]	; (800046c <fsm_run+0x2b4>)
 8000374:	f001 fb9e 	bl	8001ab4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	483b      	ldr	r0, [pc, #236]	; (800046c <fsm_run+0x2b4>)
 800037e:	f001 fb99 	bl	8001ab4 <HAL_GPIO_WritePin>

				dis1 = timeRED + timeGREEN - counter1;
 8000382:	4b32      	ldr	r3, [pc, #200]	; (800044c <fsm_run+0x294>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b35      	ldr	r3, [pc, #212]	; (800045c <fsm_run+0x2a4>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	441a      	add	r2, r3
 800038c:	4b35      	ldr	r3, [pc, #212]	; (8000464 <fsm_run+0x2ac>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	4a37      	ldr	r2, [pc, #220]	; (8000470 <fsm_run+0x2b8>)
 8000394:	6013      	str	r3, [r2, #0]
 8000396:	e027      	b.n	80003e8 <fsm_run+0x230>
			}
			else if(counter1 <= timeRED + timeYELLOW + timeGREEN){
 8000398:	4b2c      	ldr	r3, [pc, #176]	; (800044c <fsm_run+0x294>)
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	4b2d      	ldr	r3, [pc, #180]	; (8000454 <fsm_run+0x29c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	441a      	add	r2, r3
 80003a2:	4b2e      	ldr	r3, [pc, #184]	; (800045c <fsm_run+0x2a4>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	441a      	add	r2, r3
 80003a8:	4b2e      	ldr	r3, [pc, #184]	; (8000464 <fsm_run+0x2ac>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	db1b      	blt.n	80003e8 <fsm_run+0x230>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	2110      	movs	r1, #16
 80003b4:	482d      	ldr	r0, [pc, #180]	; (800046c <fsm_run+0x2b4>)
 80003b6:	f001 fb7d 	bl	8001ab4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2120      	movs	r1, #32
 80003be:	482b      	ldr	r0, [pc, #172]	; (800046c <fsm_run+0x2b4>)
 80003c0:	f001 fb78 	bl	8001ab4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2140      	movs	r1, #64	; 0x40
 80003c8:	4828      	ldr	r0, [pc, #160]	; (800046c <fsm_run+0x2b4>)
 80003ca:	f001 fb73 	bl	8001ab4 <HAL_GPIO_WritePin>

				dis1 = timeRED + timeYELLOW + timeGREEN - counter1;
 80003ce:	4b1f      	ldr	r3, [pc, #124]	; (800044c <fsm_run+0x294>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4b20      	ldr	r3, [pc, #128]	; (8000454 <fsm_run+0x29c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	441a      	add	r2, r3
 80003d8:	4b20      	ldr	r3, [pc, #128]	; (800045c <fsm_run+0x2a4>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	441a      	add	r2, r3
 80003de:	4b21      	ldr	r3, [pc, #132]	; (8000464 <fsm_run+0x2ac>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	1ad3      	subs	r3, r2, r3
 80003e4:	4a22      	ldr	r2, [pc, #136]	; (8000470 <fsm_run+0x2b8>)
 80003e6:	6013      	str	r3, [r2, #0]
			}
			if(counter1 >= timeRED + timeYELLOW + timeGREEN) counter1 = -1;
 80003e8:	4b18      	ldr	r3, [pc, #96]	; (800044c <fsm_run+0x294>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	4b19      	ldr	r3, [pc, #100]	; (8000454 <fsm_run+0x29c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	441a      	add	r2, r3
 80003f2:	4b1a      	ldr	r3, [pc, #104]	; (800045c <fsm_run+0x2a4>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	441a      	add	r2, r3
 80003f8:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <fsm_run+0x2ac>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	dc03      	bgt.n	8000408 <fsm_run+0x250>
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <fsm_run+0x2ac>)
 8000402:	f04f 32ff 	mov.w	r2, #4294967295
 8000406:	601a      	str	r2, [r3, #0]

			if(counter2 <= timeGREEN){
 8000408:	4b17      	ldr	r3, [pc, #92]	; (8000468 <fsm_run+0x2b0>)
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <fsm_run+0x2a4>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	429a      	cmp	r2, r3
 8000412:	dc35      	bgt.n	8000480 <fsm_run+0x2c8>

				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000414:	2201      	movs	r2, #1
 8000416:	2180      	movs	r1, #128	; 0x80
 8000418:	4814      	ldr	r0, [pc, #80]	; (800046c <fsm_run+0x2b4>)
 800041a:	f001 fb4b 	bl	8001ab4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000424:	4811      	ldr	r0, [pc, #68]	; (800046c <fsm_run+0x2b4>)
 8000426:	f001 fb45 	bl	8001ab4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000430:	480e      	ldr	r0, [pc, #56]	; (800046c <fsm_run+0x2b4>)
 8000432:	f001 fb3f 	bl	8001ab4 <HAL_GPIO_WritePin>

				dis2 = timeGREEN - counter2;
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <fsm_run+0x2a4>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <fsm_run+0x2b0>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	4a0d      	ldr	r2, [pc, #52]	; (8000478 <fsm_run+0x2c0>)
 8000442:	6013      	str	r3, [r2, #0]
 8000444:	e06b      	b.n	800051e <fsm_run+0x366>
 8000446:	bf00      	nop
 8000448:	20000060 	.word	0x20000060
 800044c:	20000000 	.word	0x20000000
 8000450:	2000004c 	.word	0x2000004c
 8000454:	20000008 	.word	0x20000008
 8000458:	20000050 	.word	0x20000050
 800045c:	20000004 	.word	0x20000004
 8000460:	20000054 	.word	0x20000054
 8000464:	20000044 	.word	0x20000044
 8000468:	20000048 	.word	0x20000048
 800046c:	40010800 	.word	0x40010800
 8000470:	20000058 	.word	0x20000058
 8000474:	66666667 	.word	0x66666667
 8000478:	2000005c 	.word	0x2000005c
 800047c:	20000080 	.word	0x20000080
			}
			else if(counter2 <= timeGREEN + timeYELLOW){
 8000480:	4b83      	ldr	r3, [pc, #524]	; (8000690 <fsm_run+0x4d8>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	4b83      	ldr	r3, [pc, #524]	; (8000694 <fsm_run+0x4dc>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	441a      	add	r2, r3
 800048a:	4b83      	ldr	r3, [pc, #524]	; (8000698 <fsm_run+0x4e0>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	429a      	cmp	r2, r3
 8000490:	db1b      	blt.n	80004ca <fsm_run+0x312>

				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000492:	2201      	movs	r2, #1
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	4881      	ldr	r0, [pc, #516]	; (800069c <fsm_run+0x4e4>)
 8000498:	f001 fb0c 	bl	8001ab4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a2:	487e      	ldr	r0, [pc, #504]	; (800069c <fsm_run+0x4e4>)
 80004a4:	f001 fb06 	bl	8001ab4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ae:	487b      	ldr	r0, [pc, #492]	; (800069c <fsm_run+0x4e4>)
 80004b0:	f001 fb00 	bl	8001ab4 <HAL_GPIO_WritePin>

				dis2 = timeGREEN + timeYELLOW - counter2;
 80004b4:	4b76      	ldr	r3, [pc, #472]	; (8000690 <fsm_run+0x4d8>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4b76      	ldr	r3, [pc, #472]	; (8000694 <fsm_run+0x4dc>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	441a      	add	r2, r3
 80004be:	4b76      	ldr	r3, [pc, #472]	; (8000698 <fsm_run+0x4e0>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	1ad3      	subs	r3, r2, r3
 80004c4:	4a76      	ldr	r2, [pc, #472]	; (80006a0 <fsm_run+0x4e8>)
 80004c6:	6013      	str	r3, [r2, #0]
 80004c8:	e029      	b.n	800051e <fsm_run+0x366>
			}
			else if(counter2 <= timeRED + timeYELLOW + timeGREEN){
 80004ca:	4b76      	ldr	r3, [pc, #472]	; (80006a4 <fsm_run+0x4ec>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	4b71      	ldr	r3, [pc, #452]	; (8000694 <fsm_run+0x4dc>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	441a      	add	r2, r3
 80004d4:	4b6e      	ldr	r3, [pc, #440]	; (8000690 <fsm_run+0x4d8>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	441a      	add	r2, r3
 80004da:	4b6f      	ldr	r3, [pc, #444]	; (8000698 <fsm_run+0x4e0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	429a      	cmp	r2, r3
 80004e0:	db1d      	blt.n	800051e <fsm_run+0x366>

				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	486d      	ldr	r0, [pc, #436]	; (800069c <fsm_run+0x4e4>)
 80004e8:	f001 fae4 	bl	8001ab4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f2:	486a      	ldr	r0, [pc, #424]	; (800069c <fsm_run+0x4e4>)
 80004f4:	f001 fade 	bl	8001ab4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fe:	4867      	ldr	r0, [pc, #412]	; (800069c <fsm_run+0x4e4>)
 8000500:	f001 fad8 	bl	8001ab4 <HAL_GPIO_WritePin>

				dis2 = timeRED + timeYELLOW + timeGREEN - counter2;
 8000504:	4b67      	ldr	r3, [pc, #412]	; (80006a4 <fsm_run+0x4ec>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b62      	ldr	r3, [pc, #392]	; (8000694 <fsm_run+0x4dc>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	441a      	add	r2, r3
 800050e:	4b60      	ldr	r3, [pc, #384]	; (8000690 <fsm_run+0x4d8>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	441a      	add	r2, r3
 8000514:	4b60      	ldr	r3, [pc, #384]	; (8000698 <fsm_run+0x4e0>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	4a61      	ldr	r2, [pc, #388]	; (80006a0 <fsm_run+0x4e8>)
 800051c:	6013      	str	r3, [r2, #0]
			}
			if(counter2 >= timeRED + timeYELLOW + timeGREEN) counter2 = -1;
 800051e:	4b61      	ldr	r3, [pc, #388]	; (80006a4 <fsm_run+0x4ec>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	4b5c      	ldr	r3, [pc, #368]	; (8000694 <fsm_run+0x4dc>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	441a      	add	r2, r3
 8000528:	4b59      	ldr	r3, [pc, #356]	; (8000690 <fsm_run+0x4d8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	441a      	add	r2, r3
 800052e:	4b5a      	ldr	r3, [pc, #360]	; (8000698 <fsm_run+0x4e0>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	429a      	cmp	r2, r3
 8000534:	dc03      	bgt.n	800053e <fsm_run+0x386>
 8000536:	4b58      	ldr	r3, [pc, #352]	; (8000698 <fsm_run+0x4e0>)
 8000538:	f04f 32ff 	mov.w	r2, #4294967295
 800053c:	601a      	str	r2, [r3, #0]

			setTimer1(1000);
 800053e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000542:	f000 ff21 	bl	8001388 <setTimer1>
		}



		if (isButton1Pressed() == 1) {
 8000546:	f7ff fe01 	bl	800014c <isButton1Pressed>
 800054a:	4603      	mov	r3, r0
 800054c:	2b01      	cmp	r3, #1
 800054e:	f040 81e4 	bne.w	800091a <fsm_run+0x762>
			setTimer2(500);
 8000552:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000556:	f000 ff31 	bl	80013bc <setTimer2>

			counter1 = 0;
 800055a:	4b53      	ldr	r3, [pc, #332]	; (80006a8 <fsm_run+0x4f0>)
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
			counter2 = 0;
 8000560:	4b4d      	ldr	r3, [pc, #308]	; (8000698 <fsm_run+0x4e0>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]

			state = MODE_2;
 8000566:	4b51      	ldr	r3, [pc, #324]	; (80006ac <fsm_run+0x4f4>)
 8000568:	2202      	movs	r2, #2
 800056a:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2110      	movs	r1, #16
 8000570:	484a      	ldr	r0, [pc, #296]	; (800069c <fsm_run+0x4e4>)
 8000572:	f001 fa9f 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	4848      	ldr	r0, [pc, #288]	; (800069c <fsm_run+0x4e4>)
 800057c:	f001 fa9a 	bl	8001ab4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2120      	movs	r1, #32
 8000584:	4845      	ldr	r0, [pc, #276]	; (800069c <fsm_run+0x4e4>)
 8000586:	f001 fa95 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000590:	4842      	ldr	r0, [pc, #264]	; (800069c <fsm_run+0x4e4>)
 8000592:	f001 fa8f 	bl	8001ab4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2140      	movs	r1, #64	; 0x40
 800059a:	4840      	ldr	r0, [pc, #256]	; (800069c <fsm_run+0x4e4>)
 800059c:	f001 fa8a 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a6:	483d      	ldr	r0, [pc, #244]	; (800069c <fsm_run+0x4e4>)
 80005a8:	f001 fa84 	bl	8001ab4 <HAL_GPIO_WritePin>
		}
		break;
 80005ac:	e1b5      	b.n	800091a <fsm_run+0x762>
	case MODE_2:
		updateClockBuffer(0, 2, tempRED/10, tempRED%10);
 80005ae:	4b40      	ldr	r3, [pc, #256]	; (80006b0 <fsm_run+0x4f8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a40      	ldr	r2, [pc, #256]	; (80006b4 <fsm_run+0x4fc>)
 80005b4:	fb82 1203 	smull	r1, r2, r2, r3
 80005b8:	1092      	asrs	r2, r2, #2
 80005ba:	17db      	asrs	r3, r3, #31
 80005bc:	1ad0      	subs	r0, r2, r3
 80005be:	4b3c      	ldr	r3, [pc, #240]	; (80006b0 <fsm_run+0x4f8>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	4b3c      	ldr	r3, [pc, #240]	; (80006b4 <fsm_run+0x4fc>)
 80005c4:	fb83 1302 	smull	r1, r3, r3, r2
 80005c8:	1099      	asrs	r1, r3, #2
 80005ca:	17d3      	asrs	r3, r2, #31
 80005cc:	1ac9      	subs	r1, r1, r3
 80005ce:	460b      	mov	r3, r1
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	440b      	add	r3, r1
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	1ad1      	subs	r1, r2, r3
 80005d8:	460b      	mov	r3, r1
 80005da:	4602      	mov	r2, r0
 80005dc:	2102      	movs	r1, #2
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 fd12 	bl	8001008 <updateClockBuffer>

		if (timer2_flag == 1) {
 80005e4:	4b34      	ldr	r3, [pc, #208]	; (80006b8 <fsm_run+0x500>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d10b      	bne.n	8000604 <fsm_run+0x44c>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80005ec:	2110      	movs	r1, #16
 80005ee:	482b      	ldr	r0, [pc, #172]	; (800069c <fsm_run+0x4e4>)
 80005f0:	f001 fa78 	bl	8001ae4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 80005f4:	2180      	movs	r1, #128	; 0x80
 80005f6:	4829      	ldr	r0, [pc, #164]	; (800069c <fsm_run+0x4e4>)
 80005f8:	f001 fa74 	bl	8001ae4 <HAL_GPIO_TogglePin>
			setTimer2(500);
 80005fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000600:	f000 fedc 	bl	80013bc <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000604:	f7ff fda2 	bl	800014c <isButton1Pressed>
 8000608:	4603      	mov	r3, r0
 800060a:	2b01      	cmp	r3, #1
 800060c:	d126      	bne.n	800065c <fsm_run+0x4a4>
			setTimer2(500);
 800060e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000612:	f000 fed3 	bl	80013bc <setTimer2>

			state = MODE_3;
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <fsm_run+0x4f4>)
 8000618:	2203      	movs	r2, #3
 800061a:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2110      	movs	r1, #16
 8000620:	481e      	ldr	r0, [pc, #120]	; (800069c <fsm_run+0x4e4>)
 8000622:	f001 fa47 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	481c      	ldr	r0, [pc, #112]	; (800069c <fsm_run+0x4e4>)
 800062c:	f001 fa42 	bl	8001ab4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2120      	movs	r1, #32
 8000634:	4819      	ldr	r0, [pc, #100]	; (800069c <fsm_run+0x4e4>)
 8000636:	f001 fa3d 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000640:	4816      	ldr	r0, [pc, #88]	; (800069c <fsm_run+0x4e4>)
 8000642:	f001 fa37 	bl	8001ab4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000646:	2201      	movs	r2, #1
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	4814      	ldr	r0, [pc, #80]	; (800069c <fsm_run+0x4e4>)
 800064c:	f001 fa32 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000656:	4811      	ldr	r0, [pc, #68]	; (800069c <fsm_run+0x4e4>)
 8000658:	f001 fa2c 	bl	8001ab4 <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 800065c:	f7ff fd88 	bl	8000170 <isButton2Pressed>
 8000660:	4603      	mov	r3, r0
 8000662:	2b01      	cmp	r3, #1
 8000664:	f040 815b 	bne.w	800091e <fsm_run+0x766>
			setTimer2(500);
 8000668:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800066c:	f000 fea6 	bl	80013bc <setTimer2>
			tempRED++;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <fsm_run+0x4f8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <fsm_run+0x4f8>)
 8000678:	6013      	str	r3, [r2, #0]
			if (tempRED >= 100) tempRED = 0;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <fsm_run+0x4f8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b63      	cmp	r3, #99	; 0x63
 8000680:	dd02      	ble.n	8000688 <fsm_run+0x4d0>
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <fsm_run+0x4f8>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
			state = MODI_2;
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <fsm_run+0x4f4>)
 800068a:	2214      	movs	r2, #20
 800068c:	601a      	str	r2, [r3, #0]
		}
		break;
 800068e:	e146      	b.n	800091e <fsm_run+0x766>
 8000690:	20000004 	.word	0x20000004
 8000694:	20000008 	.word	0x20000008
 8000698:	20000048 	.word	0x20000048
 800069c:	40010800 	.word	0x40010800
 80006a0:	2000005c 	.word	0x2000005c
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000044 	.word	0x20000044
 80006ac:	20000060 	.word	0x20000060
 80006b0:	2000004c 	.word	0x2000004c
 80006b4:	66666667 	.word	0x66666667
 80006b8:	20000088 	.word	0x20000088
	case MODI_2:
		updateClockBuffer(0, 2, tempRED/10, tempRED%10);
 80006bc:	4b9c      	ldr	r3, [pc, #624]	; (8000930 <fsm_run+0x778>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a9c      	ldr	r2, [pc, #624]	; (8000934 <fsm_run+0x77c>)
 80006c2:	fb82 1203 	smull	r1, r2, r2, r3
 80006c6:	1092      	asrs	r2, r2, #2
 80006c8:	17db      	asrs	r3, r3, #31
 80006ca:	1ad0      	subs	r0, r2, r3
 80006cc:	4b98      	ldr	r3, [pc, #608]	; (8000930 <fsm_run+0x778>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b98      	ldr	r3, [pc, #608]	; (8000934 <fsm_run+0x77c>)
 80006d2:	fb83 1302 	smull	r1, r3, r3, r2
 80006d6:	1099      	asrs	r1, r3, #2
 80006d8:	17d3      	asrs	r3, r2, #31
 80006da:	1ac9      	subs	r1, r1, r3
 80006dc:	460b      	mov	r3, r1
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	1ad1      	subs	r1, r2, r3
 80006e6:	460b      	mov	r3, r1
 80006e8:	4602      	mov	r2, r0
 80006ea:	2102      	movs	r1, #2
 80006ec:	2000      	movs	r0, #0
 80006ee:	f000 fc8b 	bl	8001008 <updateClockBuffer>

		if (timer2_flag == 1) {
 80006f2:	4b91      	ldr	r3, [pc, #580]	; (8000938 <fsm_run+0x780>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d10b      	bne.n	8000712 <fsm_run+0x55a>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80006fa:	2110      	movs	r1, #16
 80006fc:	488f      	ldr	r0, [pc, #572]	; (800093c <fsm_run+0x784>)
 80006fe:	f001 f9f1 	bl	8001ae4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	488d      	ldr	r0, [pc, #564]	; (800093c <fsm_run+0x784>)
 8000706:	f001 f9ed 	bl	8001ae4 <HAL_GPIO_TogglePin>
			setTimer2(500);
 800070a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800070e:	f000 fe55 	bl	80013bc <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000712:	f7ff fd1b 	bl	800014c <isButton1Pressed>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d126      	bne.n	800076a <fsm_run+0x5b2>
			setTimer2(500);
 800071c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000720:	f000 fe4c 	bl	80013bc <setTimer2>

			state = MODE_3;
 8000724:	4b86      	ldr	r3, [pc, #536]	; (8000940 <fsm_run+0x788>)
 8000726:	2203      	movs	r2, #3
 8000728:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2110      	movs	r1, #16
 800072e:	4883      	ldr	r0, [pc, #524]	; (800093c <fsm_run+0x784>)
 8000730:	f001 f9c0 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	4880      	ldr	r0, [pc, #512]	; (800093c <fsm_run+0x784>)
 800073a:	f001 f9bb 	bl	8001ab4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2120      	movs	r1, #32
 8000742:	487e      	ldr	r0, [pc, #504]	; (800093c <fsm_run+0x784>)
 8000744:	f001 f9b6 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	487b      	ldr	r0, [pc, #492]	; (800093c <fsm_run+0x784>)
 8000750:	f001 f9b0 	bl	8001ab4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2140      	movs	r1, #64	; 0x40
 8000758:	4878      	ldr	r0, [pc, #480]	; (800093c <fsm_run+0x784>)
 800075a:	f001 f9ab 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000764:	4875      	ldr	r0, [pc, #468]	; (800093c <fsm_run+0x784>)
 8000766:	f001 f9a5 	bl	8001ab4 <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 800076a:	f7ff fd01 	bl	8000170 <isButton2Pressed>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d10f      	bne.n	8000794 <fsm_run+0x5dc>
			setTimer2(500);
 8000774:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000778:	f000 fe20 	bl	80013bc <setTimer2>
			tempRED++;
 800077c:	4b6c      	ldr	r3, [pc, #432]	; (8000930 <fsm_run+0x778>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	4a6b      	ldr	r2, [pc, #428]	; (8000930 <fsm_run+0x778>)
 8000784:	6013      	str	r3, [r2, #0]
			if (tempRED >= 100) tempRED = 0;
 8000786:	4b6a      	ldr	r3, [pc, #424]	; (8000930 <fsm_run+0x778>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b63      	cmp	r3, #99	; 0x63
 800078c:	dd02      	ble.n	8000794 <fsm_run+0x5dc>
 800078e:	4b68      	ldr	r3, [pc, #416]	; (8000930 <fsm_run+0x778>)
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
		}

		if (isButton3Pressed() == 1) {
 8000794:	f7ff fcfe 	bl	8000194 <isButton3Pressed>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	f040 80c1 	bne.w	8000922 <fsm_run+0x76a>
			timeRED = tempRED;
 80007a0:	4b63      	ldr	r3, [pc, #396]	; (8000930 <fsm_run+0x778>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a67      	ldr	r2, [pc, #412]	; (8000944 <fsm_run+0x78c>)
 80007a6:	6013      	str	r3, [r2, #0]
			state = MODE_2;
 80007a8:	4b65      	ldr	r3, [pc, #404]	; (8000940 <fsm_run+0x788>)
 80007aa:	2202      	movs	r2, #2
 80007ac:	601a      	str	r2, [r3, #0]
		}
		break;
 80007ae:	e0b8      	b.n	8000922 <fsm_run+0x76a>
	case MODE_3:
		updateClockBuffer(0, 3, tempYELLOW/10, tempYELLOW%10);
 80007b0:	4b65      	ldr	r3, [pc, #404]	; (8000948 <fsm_run+0x790>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a5f      	ldr	r2, [pc, #380]	; (8000934 <fsm_run+0x77c>)
 80007b6:	fb82 1203 	smull	r1, r2, r2, r3
 80007ba:	1092      	asrs	r2, r2, #2
 80007bc:	17db      	asrs	r3, r3, #31
 80007be:	1ad0      	subs	r0, r2, r3
 80007c0:	4b61      	ldr	r3, [pc, #388]	; (8000948 <fsm_run+0x790>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b5b      	ldr	r3, [pc, #364]	; (8000934 <fsm_run+0x77c>)
 80007c6:	fb83 1302 	smull	r1, r3, r3, r2
 80007ca:	1099      	asrs	r1, r3, #2
 80007cc:	17d3      	asrs	r3, r2, #31
 80007ce:	1ac9      	subs	r1, r1, r3
 80007d0:	460b      	mov	r3, r1
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	1ad1      	subs	r1, r2, r3
 80007da:	460b      	mov	r3, r1
 80007dc:	4602      	mov	r2, r0
 80007de:	2103      	movs	r1, #3
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 fc11 	bl	8001008 <updateClockBuffer>

		if (timer2_flag == 1) {
 80007e6:	4b54      	ldr	r3, [pc, #336]	; (8000938 <fsm_run+0x780>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d10c      	bne.n	8000808 <fsm_run+0x650>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80007ee:	2120      	movs	r1, #32
 80007f0:	4852      	ldr	r0, [pc, #328]	; (800093c <fsm_run+0x784>)
 80007f2:	f001 f977 	bl	8001ae4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin);
 80007f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fa:	4850      	ldr	r0, [pc, #320]	; (800093c <fsm_run+0x784>)
 80007fc:	f001 f972 	bl	8001ae4 <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000800:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000804:	f000 fdda 	bl	80013bc <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000808:	f7ff fca0 	bl	800014c <isButton1Pressed>
 800080c:	4603      	mov	r3, r0
 800080e:	2b01      	cmp	r3, #1
 8000810:	f040 8089 	bne.w	8000926 <fsm_run+0x76e>
			setTimer2(500);
 8000814:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000818:	f000 fdd0 	bl	80013bc <setTimer2>

			state = MODE_4;
 800081c:	4b48      	ldr	r3, [pc, #288]	; (8000940 <fsm_run+0x788>)
 800081e:	2204      	movs	r2, #4
 8000820:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2110      	movs	r1, #16
 8000826:	4845      	ldr	r0, [pc, #276]	; (800093c <fsm_run+0x784>)
 8000828:	f001 f944 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	2180      	movs	r1, #128	; 0x80
 8000830:	4842      	ldr	r0, [pc, #264]	; (800093c <fsm_run+0x784>)
 8000832:	f001 f93f 	bl	8001ab4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2120      	movs	r1, #32
 800083a:	4840      	ldr	r0, [pc, #256]	; (800093c <fsm_run+0x784>)
 800083c:	f001 f93a 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000846:	483d      	ldr	r0, [pc, #244]	; (800093c <fsm_run+0x784>)
 8000848:	f001 f934 	bl	8001ab4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2140      	movs	r1, #64	; 0x40
 8000850:	483a      	ldr	r0, [pc, #232]	; (800093c <fsm_run+0x784>)
 8000852:	f001 f92f 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 7100 	mov.w	r1, #512	; 0x200
 800085c:	4837      	ldr	r0, [pc, #220]	; (800093c <fsm_run+0x784>)
 800085e:	f001 f929 	bl	8001ab4 <HAL_GPIO_WritePin>
		}

		break;
 8000862:	e060      	b.n	8000926 <fsm_run+0x76e>
	case MODE_4:
		updateClockBuffer(0, 4, tempGREEN/10, tempGREEN%10);
 8000864:	4b39      	ldr	r3, [pc, #228]	; (800094c <fsm_run+0x794>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a32      	ldr	r2, [pc, #200]	; (8000934 <fsm_run+0x77c>)
 800086a:	fb82 1203 	smull	r1, r2, r2, r3
 800086e:	1092      	asrs	r2, r2, #2
 8000870:	17db      	asrs	r3, r3, #31
 8000872:	1ad0      	subs	r0, r2, r3
 8000874:	4b35      	ldr	r3, [pc, #212]	; (800094c <fsm_run+0x794>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <fsm_run+0x77c>)
 800087a:	fb83 1302 	smull	r1, r3, r3, r2
 800087e:	1099      	asrs	r1, r3, #2
 8000880:	17d3      	asrs	r3, r2, #31
 8000882:	1ac9      	subs	r1, r1, r3
 8000884:	460b      	mov	r3, r1
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	440b      	add	r3, r1
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	1ad1      	subs	r1, r2, r3
 800088e:	460b      	mov	r3, r1
 8000890:	4602      	mov	r2, r0
 8000892:	2104      	movs	r1, #4
 8000894:	2000      	movs	r0, #0
 8000896:	f000 fbb7 	bl	8001008 <updateClockBuffer>

		if (timer2_flag == 1) {
 800089a:	4b27      	ldr	r3, [pc, #156]	; (8000938 <fsm_run+0x780>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d10c      	bne.n	80008bc <fsm_run+0x704>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80008a2:	2140      	movs	r1, #64	; 0x40
 80008a4:	4825      	ldr	r0, [pc, #148]	; (800093c <fsm_run+0x784>)
 80008a6:	f001 f91d 	bl	8001ae4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
 80008aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ae:	4823      	ldr	r0, [pc, #140]	; (800093c <fsm_run+0x784>)
 80008b0:	f001 f918 	bl	8001ae4 <HAL_GPIO_TogglePin>
			setTimer2(500);
 80008b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008b8:	f000 fd80 	bl	80013bc <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 80008bc:	f7ff fc46 	bl	800014c <isButton1Pressed>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d131      	bne.n	800092a <fsm_run+0x772>
			setTimer2(500);
 80008c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ca:	f000 fd77 	bl	80013bc <setTimer2>

			state = RESET;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <fsm_run+0x788>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2110      	movs	r1, #16
 80008d8:	4818      	ldr	r0, [pc, #96]	; (800093c <fsm_run+0x784>)
 80008da:	f001 f8eb 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	4816      	ldr	r0, [pc, #88]	; (800093c <fsm_run+0x784>)
 80008e4:	f001 f8e6 	bl	8001ab4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2120      	movs	r1, #32
 80008ec:	4813      	ldr	r0, [pc, #76]	; (800093c <fsm_run+0x784>)
 80008ee:	f001 f8e1 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f8:	4810      	ldr	r0, [pc, #64]	; (800093c <fsm_run+0x784>)
 80008fa:	f001 f8db 	bl	8001ab4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2140      	movs	r1, #64	; 0x40
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <fsm_run+0x784>)
 8000904:	f001 f8d6 	bl	8001ab4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090e:	480b      	ldr	r0, [pc, #44]	; (800093c <fsm_run+0x784>)
 8000910:	f001 f8d0 	bl	8001ab4 <HAL_GPIO_WritePin>
		}
		break;
 8000914:	e009      	b.n	800092a <fsm_run+0x772>
	default:
		break;
 8000916:	bf00      	nop
 8000918:	e008      	b.n	800092c <fsm_run+0x774>
		break;
 800091a:	bf00      	nop
 800091c:	e006      	b.n	800092c <fsm_run+0x774>
		break;
 800091e:	bf00      	nop
 8000920:	e004      	b.n	800092c <fsm_run+0x774>
		break;
 8000922:	bf00      	nop
 8000924:	e002      	b.n	800092c <fsm_run+0x774>
		break;
 8000926:	bf00      	nop
 8000928:	e000      	b.n	800092c <fsm_run+0x774>
		break;
 800092a:	bf00      	nop
	}
}
 800092c:	bf00      	nop
 800092e:	bdb0      	pop	{r4, r5, r7, pc}
 8000930:	2000004c 	.word	0x2000004c
 8000934:	66666667 	.word	0x66666667
 8000938:	20000088 	.word	0x20000088
 800093c:	40010800 	.word	0x40010800
 8000940:	20000060 	.word	0x20000060
 8000944:	20000000 	.word	0x20000000
 8000948:	20000050 	.word	0x20000050
 800094c:	20000054 	.word	0x20000054

08000950 <display7SEG>:
 *      Author: Admin
 */

#include "global.h"

void display7SEG(int num){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b09      	cmp	r3, #9
 800095c:	f200 8180 	bhi.w	8000c60 <display7SEG+0x310>
 8000960:	a201      	add	r2, pc, #4	; (adr r2, 8000968 <display7SEG+0x18>)
 8000962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000966:	bf00      	nop
 8000968:	08000991 	.word	0x08000991
 800096c:	080009d9 	.word	0x080009d9
 8000970:	08000a21 	.word	0x08000a21
 8000974:	08000a69 	.word	0x08000a69
 8000978:	08000ab1 	.word	0x08000ab1
 800097c:	08000af9 	.word	0x08000af9
 8000980:	08000b41 	.word	0x08000b41
 8000984:	08000b89 	.word	0x08000b89
 8000988:	08000bd1 	.word	0x08000bd1
 800098c:	08000c19 	.word	0x08000c19
	switch(num){
	case 0:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000990:	2200      	movs	r2, #0
 8000992:	2101      	movs	r1, #1
 8000994:	48b5      	ldr	r0, [pc, #724]	; (8000c6c <display7SEG+0x31c>)
 8000996:	f001 f88d 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 800099a:	2200      	movs	r2, #0
 800099c:	2102      	movs	r1, #2
 800099e:	48b3      	ldr	r0, [pc, #716]	; (8000c6c <display7SEG+0x31c>)
 80009a0:	f001 f888 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80009a4:	2200      	movs	r2, #0
 80009a6:	2104      	movs	r1, #4
 80009a8:	48b0      	ldr	r0, [pc, #704]	; (8000c6c <display7SEG+0x31c>)
 80009aa:	f001 f883 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 80009ae:	2200      	movs	r2, #0
 80009b0:	2108      	movs	r1, #8
 80009b2:	48ae      	ldr	r0, [pc, #696]	; (8000c6c <display7SEG+0x31c>)
 80009b4:	f001 f87e 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 80009b8:	2200      	movs	r2, #0
 80009ba:	2110      	movs	r1, #16
 80009bc:	48ab      	ldr	r0, [pc, #684]	; (8000c6c <display7SEG+0x31c>)
 80009be:	f001 f879 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 80009c2:	2200      	movs	r2, #0
 80009c4:	2120      	movs	r1, #32
 80009c6:	48a9      	ldr	r0, [pc, #676]	; (8000c6c <display7SEG+0x31c>)
 80009c8:	f001 f874 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 80009cc:	2201      	movs	r2, #1
 80009ce:	2140      	movs	r1, #64	; 0x40
 80009d0:	48a6      	ldr	r0, [pc, #664]	; (8000c6c <display7SEG+0x31c>)
 80009d2:	f001 f86f 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 80009d6:	e144      	b.n	8000c62 <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 80009d8:	2201      	movs	r2, #1
 80009da:	2101      	movs	r1, #1
 80009dc:	48a3      	ldr	r0, [pc, #652]	; (8000c6c <display7SEG+0x31c>)
 80009de:	f001 f869 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 80009e2:	2200      	movs	r2, #0
 80009e4:	2102      	movs	r1, #2
 80009e6:	48a1      	ldr	r0, [pc, #644]	; (8000c6c <display7SEG+0x31c>)
 80009e8:	f001 f864 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 80009ec:	2200      	movs	r2, #0
 80009ee:	2104      	movs	r1, #4
 80009f0:	489e      	ldr	r0, [pc, #632]	; (8000c6c <display7SEG+0x31c>)
 80009f2:	f001 f85f 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 80009f6:	2201      	movs	r2, #1
 80009f8:	2108      	movs	r1, #8
 80009fa:	489c      	ldr	r0, [pc, #624]	; (8000c6c <display7SEG+0x31c>)
 80009fc:	f001 f85a 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000a00:	2201      	movs	r2, #1
 8000a02:	2110      	movs	r1, #16
 8000a04:	4899      	ldr	r0, [pc, #612]	; (8000c6c <display7SEG+0x31c>)
 8000a06:	f001 f855 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	4897      	ldr	r0, [pc, #604]	; (8000c6c <display7SEG+0x31c>)
 8000a10:	f001 f850 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000a14:	2201      	movs	r2, #1
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	4894      	ldr	r0, [pc, #592]	; (8000c6c <display7SEG+0x31c>)
 8000a1a:	f001 f84b 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000a1e:	e120      	b.n	8000c62 <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000a20:	2200      	movs	r2, #0
 8000a22:	2101      	movs	r1, #1
 8000a24:	4891      	ldr	r0, [pc, #580]	; (8000c6c <display7SEG+0x31c>)
 8000a26:	f001 f845 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	488f      	ldr	r0, [pc, #572]	; (8000c6c <display7SEG+0x31c>)
 8000a30:	f001 f840 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_SET ) ;
 8000a34:	2201      	movs	r2, #1
 8000a36:	2104      	movs	r1, #4
 8000a38:	488c      	ldr	r0, [pc, #560]	; (8000c6c <display7SEG+0x31c>)
 8000a3a:	f001 f83b 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2108      	movs	r1, #8
 8000a42:	488a      	ldr	r0, [pc, #552]	; (8000c6c <display7SEG+0x31c>)
 8000a44:	f001 f836 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	4887      	ldr	r0, [pc, #540]	; (8000c6c <display7SEG+0x31c>)
 8000a4e:	f001 f831 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000a52:	2201      	movs	r2, #1
 8000a54:	2120      	movs	r1, #32
 8000a56:	4885      	ldr	r0, [pc, #532]	; (8000c6c <display7SEG+0x31c>)
 8000a58:	f001 f82c 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2140      	movs	r1, #64	; 0x40
 8000a60:	4882      	ldr	r0, [pc, #520]	; (8000c6c <display7SEG+0x31c>)
 8000a62:	f001 f827 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000a66:	e0fc      	b.n	8000c62 <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	487f      	ldr	r0, [pc, #508]	; (8000c6c <display7SEG+0x31c>)
 8000a6e:	f001 f821 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000a72:	2200      	movs	r2, #0
 8000a74:	2102      	movs	r1, #2
 8000a76:	487d      	ldr	r0, [pc, #500]	; (8000c6c <display7SEG+0x31c>)
 8000a78:	f001 f81c 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2104      	movs	r1, #4
 8000a80:	487a      	ldr	r0, [pc, #488]	; (8000c6c <display7SEG+0x31c>)
 8000a82:	f001 f817 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000a86:	2200      	movs	r2, #0
 8000a88:	2108      	movs	r1, #8
 8000a8a:	4878      	ldr	r0, [pc, #480]	; (8000c6c <display7SEG+0x31c>)
 8000a8c:	f001 f812 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000a90:	2201      	movs	r2, #1
 8000a92:	2110      	movs	r1, #16
 8000a94:	4875      	ldr	r0, [pc, #468]	; (8000c6c <display7SEG+0x31c>)
 8000a96:	f001 f80d 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	4873      	ldr	r0, [pc, #460]	; (8000c6c <display7SEG+0x31c>)
 8000aa0:	f001 f808 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2140      	movs	r1, #64	; 0x40
 8000aa8:	4870      	ldr	r0, [pc, #448]	; (8000c6c <display7SEG+0x31c>)
 8000aaa:	f001 f803 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000aae:	e0d8      	b.n	8000c62 <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	486d      	ldr	r0, [pc, #436]	; (8000c6c <display7SEG+0x31c>)
 8000ab6:	f000 fffd 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000aba:	2200      	movs	r2, #0
 8000abc:	2102      	movs	r1, #2
 8000abe:	486b      	ldr	r0, [pc, #428]	; (8000c6c <display7SEG+0x31c>)
 8000ac0:	f000 fff8 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	4868      	ldr	r0, [pc, #416]	; (8000c6c <display7SEG+0x31c>)
 8000aca:	f000 fff3 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	4866      	ldr	r0, [pc, #408]	; (8000c6c <display7SEG+0x31c>)
 8000ad4:	f000 ffee 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2110      	movs	r1, #16
 8000adc:	4863      	ldr	r0, [pc, #396]	; (8000c6c <display7SEG+0x31c>)
 8000ade:	f000 ffe9 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	4861      	ldr	r0, [pc, #388]	; (8000c6c <display7SEG+0x31c>)
 8000ae8:	f000 ffe4 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000aec:	2200      	movs	r2, #0
 8000aee:	2140      	movs	r1, #64	; 0x40
 8000af0:	485e      	ldr	r0, [pc, #376]	; (8000c6c <display7SEG+0x31c>)
 8000af2:	f000 ffdf 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000af6:	e0b4      	b.n	8000c62 <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000af8:	2200      	movs	r2, #0
 8000afa:	2101      	movs	r1, #1
 8000afc:	485b      	ldr	r0, [pc, #364]	; (8000c6c <display7SEG+0x31c>)
 8000afe:	f000 ffd9 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 8000b02:	2201      	movs	r2, #1
 8000b04:	2102      	movs	r1, #2
 8000b06:	4859      	ldr	r0, [pc, #356]	; (8000c6c <display7SEG+0x31c>)
 8000b08:	f000 ffd4 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2104      	movs	r1, #4
 8000b10:	4856      	ldr	r0, [pc, #344]	; (8000c6c <display7SEG+0x31c>)
 8000b12:	f000 ffcf 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000b16:	2200      	movs	r2, #0
 8000b18:	2108      	movs	r1, #8
 8000b1a:	4854      	ldr	r0, [pc, #336]	; (8000c6c <display7SEG+0x31c>)
 8000b1c:	f000 ffca 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000b20:	2201      	movs	r2, #1
 8000b22:	2110      	movs	r1, #16
 8000b24:	4851      	ldr	r0, [pc, #324]	; (8000c6c <display7SEG+0x31c>)
 8000b26:	f000 ffc5 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	484f      	ldr	r0, [pc, #316]	; (8000c6c <display7SEG+0x31c>)
 8000b30:	f000 ffc0 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000b34:	2200      	movs	r2, #0
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	484c      	ldr	r0, [pc, #304]	; (8000c6c <display7SEG+0x31c>)
 8000b3a:	f000 ffbb 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000b3e:	e090      	b.n	8000c62 <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000b40:	2200      	movs	r2, #0
 8000b42:	2101      	movs	r1, #1
 8000b44:	4849      	ldr	r0, [pc, #292]	; (8000c6c <display7SEG+0x31c>)
 8000b46:	f000 ffb5 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4847      	ldr	r0, [pc, #284]	; (8000c6c <display7SEG+0x31c>)
 8000b50:	f000 ffb0 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000b54:	2200      	movs	r2, #0
 8000b56:	2104      	movs	r1, #4
 8000b58:	4844      	ldr	r0, [pc, #272]	; (8000c6c <display7SEG+0x31c>)
 8000b5a:	f000 ffab 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2108      	movs	r1, #8
 8000b62:	4842      	ldr	r0, [pc, #264]	; (8000c6c <display7SEG+0x31c>)
 8000b64:	f000 ffa6 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	483f      	ldr	r0, [pc, #252]	; (8000c6c <display7SEG+0x31c>)
 8000b6e:	f000 ffa1 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000b72:	2200      	movs	r2, #0
 8000b74:	2120      	movs	r1, #32
 8000b76:	483d      	ldr	r0, [pc, #244]	; (8000c6c <display7SEG+0x31c>)
 8000b78:	f000 ff9c 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2140      	movs	r1, #64	; 0x40
 8000b80:	483a      	ldr	r0, [pc, #232]	; (8000c6c <display7SEG+0x31c>)
 8000b82:	f000 ff97 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000b86:	e06c      	b.n	8000c62 <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	4837      	ldr	r0, [pc, #220]	; (8000c6c <display7SEG+0x31c>)
 8000b8e:	f000 ff91 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000b92:	2200      	movs	r2, #0
 8000b94:	2102      	movs	r1, #2
 8000b96:	4835      	ldr	r0, [pc, #212]	; (8000c6c <display7SEG+0x31c>)
 8000b98:	f000 ff8c 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	4832      	ldr	r0, [pc, #200]	; (8000c6c <display7SEG+0x31c>)
 8000ba2:	f000 ff87 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2108      	movs	r1, #8
 8000baa:	4830      	ldr	r0, [pc, #192]	; (8000c6c <display7SEG+0x31c>)
 8000bac:	f000 ff82 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	482d      	ldr	r0, [pc, #180]	; (8000c6c <display7SEG+0x31c>)
 8000bb6:	f000 ff7d 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	482b      	ldr	r0, [pc, #172]	; (8000c6c <display7SEG+0x31c>)
 8000bc0:	f000 ff78 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2140      	movs	r1, #64	; 0x40
 8000bc8:	4828      	ldr	r0, [pc, #160]	; (8000c6c <display7SEG+0x31c>)
 8000bca:	f000 ff73 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000bce:	e048      	b.n	8000c62 <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4825      	ldr	r0, [pc, #148]	; (8000c6c <display7SEG+0x31c>)
 8000bd6:	f000 ff6d 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2102      	movs	r1, #2
 8000bde:	4823      	ldr	r0, [pc, #140]	; (8000c6c <display7SEG+0x31c>)
 8000be0:	f000 ff68 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000be4:	2200      	movs	r2, #0
 8000be6:	2104      	movs	r1, #4
 8000be8:	4820      	ldr	r0, [pc, #128]	; (8000c6c <display7SEG+0x31c>)
 8000bea:	f000 ff63 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2108      	movs	r1, #8
 8000bf2:	481e      	ldr	r0, [pc, #120]	; (8000c6c <display7SEG+0x31c>)
 8000bf4:	f000 ff5e 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2110      	movs	r1, #16
 8000bfc:	481b      	ldr	r0, [pc, #108]	; (8000c6c <display7SEG+0x31c>)
 8000bfe:	f000 ff59 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000c02:	2200      	movs	r2, #0
 8000c04:	2120      	movs	r1, #32
 8000c06:	4819      	ldr	r0, [pc, #100]	; (8000c6c <display7SEG+0x31c>)
 8000c08:	f000 ff54 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2140      	movs	r1, #64	; 0x40
 8000c10:	4816      	ldr	r0, [pc, #88]	; (8000c6c <display7SEG+0x31c>)
 8000c12:	f000 ff4f 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000c16:	e024      	b.n	8000c62 <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4813      	ldr	r0, [pc, #76]	; (8000c6c <display7SEG+0x31c>)
 8000c1e:	f000 ff49 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000c22:	2200      	movs	r2, #0
 8000c24:	2102      	movs	r1, #2
 8000c26:	4811      	ldr	r0, [pc, #68]	; (8000c6c <display7SEG+0x31c>)
 8000c28:	f000 ff44 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2104      	movs	r1, #4
 8000c30:	480e      	ldr	r0, [pc, #56]	; (8000c6c <display7SEG+0x31c>)
 8000c32:	f000 ff3f 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000c36:	2200      	movs	r2, #0
 8000c38:	2108      	movs	r1, #8
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <display7SEG+0x31c>)
 8000c3c:	f000 ff3a 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000c40:	2201      	movs	r2, #1
 8000c42:	2110      	movs	r1, #16
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <display7SEG+0x31c>)
 8000c46:	f000 ff35 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <display7SEG+0x31c>)
 8000c50:	f000 ff30 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000c54:	2200      	movs	r2, #0
 8000c56:	2140      	movs	r1, #64	; 0x40
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <display7SEG+0x31c>)
 8000c5a:	f000 ff2b 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000c5e:	e000      	b.n	8000c62 <display7SEG+0x312>
	default:
		break;
 8000c60:	bf00      	nop
	}
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40010c00 	.word	0x40010c00

08000c70 <display7SEG0>:
void display7SEG0(int num){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b09      	cmp	r3, #9
 8000c7c:	f200 81bc 	bhi.w	8000ff8 <display7SEG0+0x388>
 8000c80:	a201      	add	r2, pc, #4	; (adr r2, 8000c88 <display7SEG0+0x18>)
 8000c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c86:	bf00      	nop
 8000c88:	08000cb1 	.word	0x08000cb1
 8000c8c:	08000d05 	.word	0x08000d05
 8000c90:	08000d59 	.word	0x08000d59
 8000c94:	08000dad 	.word	0x08000dad
 8000c98:	08000e01 	.word	0x08000e01
 8000c9c:	08000e55 	.word	0x08000e55
 8000ca0:	08000ea9 	.word	0x08000ea9
 8000ca4:	08000efd 	.word	0x08000efd
 8000ca8:	08000f51 	.word	0x08000f51
 8000cac:	08000fa5 	.word	0x08000fa5
	switch(num){
	case 0:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2180      	movs	r1, #128	; 0x80
 8000cb4:	48d3      	ldr	r0, [pc, #844]	; (8001004 <display7SEG0+0x394>)
 8000cb6:	f000 fefd 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc0:	48d0      	ldr	r0, [pc, #832]	; (8001004 <display7SEG0+0x394>)
 8000cc2:	f000 fef7 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ccc:	48cd      	ldr	r0, [pc, #820]	; (8001004 <display7SEG0+0x394>)
 8000cce:	f000 fef1 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd8:	48ca      	ldr	r0, [pc, #808]	; (8001004 <display7SEG0+0x394>)
 8000cda:	f000 feeb 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ce4:	48c7      	ldr	r0, [pc, #796]	; (8001004 <display7SEG0+0x394>)
 8000ce6:	f000 fee5 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf0:	48c4      	ldr	r0, [pc, #784]	; (8001004 <display7SEG0+0x394>)
 8000cf2:	f000 fedf 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfc:	48c1      	ldr	r0, [pc, #772]	; (8001004 <display7SEG0+0x394>)
 8000cfe:	f000 fed9 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000d02:	e17a      	b.n	8000ffa <display7SEG0+0x38a>
	case 1:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_SET ) ;
 8000d04:	2201      	movs	r2, #1
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	48be      	ldr	r0, [pc, #760]	; (8001004 <display7SEG0+0x394>)
 8000d0a:	f000 fed3 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d14:	48bb      	ldr	r0, [pc, #748]	; (8001004 <display7SEG0+0x394>)
 8000d16:	f000 fecd 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d20:	48b8      	ldr	r0, [pc, #736]	; (8001004 <display7SEG0+0x394>)
 8000d22:	f000 fec7 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d2c:	48b5      	ldr	r0, [pc, #724]	; (8001004 <display7SEG0+0x394>)
 8000d2e:	f000 fec1 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000d32:	2201      	movs	r2, #1
 8000d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d38:	48b2      	ldr	r0, [pc, #712]	; (8001004 <display7SEG0+0x394>)
 8000d3a:	f000 febb 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d44:	48af      	ldr	r0, [pc, #700]	; (8001004 <display7SEG0+0x394>)
 8000d46:	f000 feb5 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d50:	48ac      	ldr	r0, [pc, #688]	; (8001004 <display7SEG0+0x394>)
 8000d52:	f000 feaf 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000d56:	e150      	b.n	8000ffa <display7SEG0+0x38a>
	case 2:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2180      	movs	r1, #128	; 0x80
 8000d5c:	48a9      	ldr	r0, [pc, #676]	; (8001004 <display7SEG0+0x394>)
 8000d5e:	f000 fea9 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d68:	48a6      	ldr	r0, [pc, #664]	; (8001004 <display7SEG0+0x394>)
 8000d6a:	f000 fea3 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_SET ) ;
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d74:	48a3      	ldr	r0, [pc, #652]	; (8001004 <display7SEG0+0x394>)
 8000d76:	f000 fe9d 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d80:	48a0      	ldr	r0, [pc, #640]	; (8001004 <display7SEG0+0x394>)
 8000d82:	f000 fe97 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8c:	489d      	ldr	r0, [pc, #628]	; (8001004 <display7SEG0+0x394>)
 8000d8e:	f000 fe91 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d98:	489a      	ldr	r0, [pc, #616]	; (8001004 <display7SEG0+0x394>)
 8000d9a:	f000 fe8b 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da4:	4897      	ldr	r0, [pc, #604]	; (8001004 <display7SEG0+0x394>)
 8000da6:	f000 fe85 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000daa:	e126      	b.n	8000ffa <display7SEG0+0x38a>
	case 3:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000dac:	2200      	movs	r2, #0
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	4894      	ldr	r0, [pc, #592]	; (8001004 <display7SEG0+0x394>)
 8000db2:	f000 fe7f 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dbc:	4891      	ldr	r0, [pc, #580]	; (8001004 <display7SEG0+0x394>)
 8000dbe:	f000 fe79 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc8:	488e      	ldr	r0, [pc, #568]	; (8001004 <display7SEG0+0x394>)
 8000dca:	f000 fe73 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd4:	488b      	ldr	r0, [pc, #556]	; (8001004 <display7SEG0+0x394>)
 8000dd6:	f000 fe6d 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de0:	4888      	ldr	r0, [pc, #544]	; (8001004 <display7SEG0+0x394>)
 8000de2:	f000 fe67 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000de6:	2201      	movs	r2, #1
 8000de8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dec:	4885      	ldr	r0, [pc, #532]	; (8001004 <display7SEG0+0x394>)
 8000dee:	f000 fe61 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df8:	4882      	ldr	r0, [pc, #520]	; (8001004 <display7SEG0+0x394>)
 8000dfa:	f000 fe5b 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000dfe:	e0fc      	b.n	8000ffa <display7SEG0+0x38a>
	case 4:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_SET ) ;
 8000e00:	2201      	movs	r2, #1
 8000e02:	2180      	movs	r1, #128	; 0x80
 8000e04:	487f      	ldr	r0, [pc, #508]	; (8001004 <display7SEG0+0x394>)
 8000e06:	f000 fe55 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e10:	487c      	ldr	r0, [pc, #496]	; (8001004 <display7SEG0+0x394>)
 8000e12:	f000 fe4f 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1c:	4879      	ldr	r0, [pc, #484]	; (8001004 <display7SEG0+0x394>)
 8000e1e:	f000 fe49 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e28:	4876      	ldr	r0, [pc, #472]	; (8001004 <display7SEG0+0x394>)
 8000e2a:	f000 fe43 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e34:	4873      	ldr	r0, [pc, #460]	; (8001004 <display7SEG0+0x394>)
 8000e36:	f000 fe3d 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e40:	4870      	ldr	r0, [pc, #448]	; (8001004 <display7SEG0+0x394>)
 8000e42:	f000 fe37 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e4c:	486d      	ldr	r0, [pc, #436]	; (8001004 <display7SEG0+0x394>)
 8000e4e:	f000 fe31 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000e52:	e0d2      	b.n	8000ffa <display7SEG0+0x38a>
	case 5:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000e54:	2200      	movs	r2, #0
 8000e56:	2180      	movs	r1, #128	; 0x80
 8000e58:	486a      	ldr	r0, [pc, #424]	; (8001004 <display7SEG0+0x394>)
 8000e5a:	f000 fe2b 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_SET ) ;
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e64:	4867      	ldr	r0, [pc, #412]	; (8001004 <display7SEG0+0x394>)
 8000e66:	f000 fe25 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e70:	4864      	ldr	r0, [pc, #400]	; (8001004 <display7SEG0+0x394>)
 8000e72:	f000 fe1f 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7c:	4861      	ldr	r0, [pc, #388]	; (8001004 <display7SEG0+0x394>)
 8000e7e:	f000 fe19 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e88:	485e      	ldr	r0, [pc, #376]	; (8001004 <display7SEG0+0x394>)
 8000e8a:	f000 fe13 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e94:	485b      	ldr	r0, [pc, #364]	; (8001004 <display7SEG0+0x394>)
 8000e96:	f000 fe0d 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea0:	4858      	ldr	r0, [pc, #352]	; (8001004 <display7SEG0+0x394>)
 8000ea2:	f000 fe07 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000ea6:	e0a8      	b.n	8000ffa <display7SEG0+0x38a>
	case 6:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2180      	movs	r1, #128	; 0x80
 8000eac:	4855      	ldr	r0, [pc, #340]	; (8001004 <display7SEG0+0x394>)
 8000eae:	f000 fe01 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_SET ) ;
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb8:	4852      	ldr	r0, [pc, #328]	; (8001004 <display7SEG0+0x394>)
 8000eba:	f000 fdfb 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec4:	484f      	ldr	r0, [pc, #316]	; (8001004 <display7SEG0+0x394>)
 8000ec6:	f000 fdf5 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed0:	484c      	ldr	r0, [pc, #304]	; (8001004 <display7SEG0+0x394>)
 8000ed2:	f000 fdef 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000edc:	4849      	ldr	r0, [pc, #292]	; (8001004 <display7SEG0+0x394>)
 8000ede:	f000 fde9 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee8:	4846      	ldr	r0, [pc, #280]	; (8001004 <display7SEG0+0x394>)
 8000eea:	f000 fde3 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef4:	4843      	ldr	r0, [pc, #268]	; (8001004 <display7SEG0+0x394>)
 8000ef6:	f000 fddd 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000efa:	e07e      	b.n	8000ffa <display7SEG0+0x38a>
	case 7:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000efc:	2200      	movs	r2, #0
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	4840      	ldr	r0, [pc, #256]	; (8001004 <display7SEG0+0x394>)
 8000f02:	f000 fdd7 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0c:	483d      	ldr	r0, [pc, #244]	; (8001004 <display7SEG0+0x394>)
 8000f0e:	f000 fdd1 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f18:	483a      	ldr	r0, [pc, #232]	; (8001004 <display7SEG0+0x394>)
 8000f1a:	f000 fdcb 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f24:	4837      	ldr	r0, [pc, #220]	; (8001004 <display7SEG0+0x394>)
 8000f26:	f000 fdc5 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f30:	4834      	ldr	r0, [pc, #208]	; (8001004 <display7SEG0+0x394>)
 8000f32:	f000 fdbf 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f3c:	4831      	ldr	r0, [pc, #196]	; (8001004 <display7SEG0+0x394>)
 8000f3e:	f000 fdb9 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f48:	482e      	ldr	r0, [pc, #184]	; (8001004 <display7SEG0+0x394>)
 8000f4a:	f000 fdb3 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000f4e:	e054      	b.n	8000ffa <display7SEG0+0x38a>
	case 8:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000f50:	2200      	movs	r2, #0
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	482b      	ldr	r0, [pc, #172]	; (8001004 <display7SEG0+0x394>)
 8000f56:	f000 fdad 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f60:	4828      	ldr	r0, [pc, #160]	; (8001004 <display7SEG0+0x394>)
 8000f62:	f000 fda7 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6c:	4825      	ldr	r0, [pc, #148]	; (8001004 <display7SEG0+0x394>)
 8000f6e:	f000 fda1 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f78:	4822      	ldr	r0, [pc, #136]	; (8001004 <display7SEG0+0x394>)
 8000f7a:	f000 fd9b 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f84:	481f      	ldr	r0, [pc, #124]	; (8001004 <display7SEG0+0x394>)
 8000f86:	f000 fd95 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f90:	481c      	ldr	r0, [pc, #112]	; (8001004 <display7SEG0+0x394>)
 8000f92:	f000 fd8f 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	4819      	ldr	r0, [pc, #100]	; (8001004 <display7SEG0+0x394>)
 8000f9e:	f000 fd89 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000fa2:	e02a      	b.n	8000ffa <display7SEG0+0x38a>
	case 9:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2180      	movs	r1, #128	; 0x80
 8000fa8:	4816      	ldr	r0, [pc, #88]	; (8001004 <display7SEG0+0x394>)
 8000faa:	f000 fd83 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <display7SEG0+0x394>)
 8000fb6:	f000 fd7d 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc0:	4810      	ldr	r0, [pc, #64]	; (8001004 <display7SEG0+0x394>)
 8000fc2:	f000 fd77 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <display7SEG0+0x394>)
 8000fce:	f000 fd71 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd8:	480a      	ldr	r0, [pc, #40]	; (8001004 <display7SEG0+0x394>)
 8000fda:	f000 fd6b 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe4:	4807      	ldr	r0, [pc, #28]	; (8001004 <display7SEG0+0x394>)
 8000fe6:	f000 fd65 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <display7SEG0+0x394>)
 8000ff2:	f000 fd5f 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 8000ff6:	e000      	b.n	8000ffa <display7SEG0+0x38a>
	default:
		break;
 8000ff8:	bf00      	nop
	}
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40010c00 	.word	0x40010c00

08001008 <updateClockBuffer>:
int timeYELLOW = 2;

int led_buffer[4] = {0, 0, 0, 0};


void updateClockBuffer(int num0, int num1, int num2, int num3) {
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
	led_buffer[0] = num0;
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <updateClockBuffer+0x30>)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num1;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <updateClockBuffer+0x30>)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	6053      	str	r3, [r2, #4]
	led_buffer[2] = num2;
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <updateClockBuffer+0x30>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num3;
 8001028:	4a03      	ldr	r2, [pc, #12]	; (8001038 <updateClockBuffer+0x30>)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	60d3      	str	r3, [r2, #12]
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000064 	.word	0x20000064

0800103c <update7SEG>:

void update7SEG(int index) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	switch (index) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d003      	beq.n	8001052 <update7SEG+0x16>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d017      	beq.n	8001080 <update7SEG+0x44>
		display7SEG0(led_buffer[3]);
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
		break;
	default:
		break;
 8001050:	e02d      	b.n	80010ae <update7SEG+0x72>
		display7SEG(led_buffer[0]);
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <update7SEG+0x7c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fc7a 	bl	8000950 <display7SEG>
		display7SEG0(led_buffer[1]);
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <update7SEG+0x7c>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fe05 	bl	8000c70 <display7SEG0>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106c:	4813      	ldr	r0, [pc, #76]	; (80010bc <update7SEG+0x80>)
 800106e:	f000 fd21 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001078:	4810      	ldr	r0, [pc, #64]	; (80010bc <update7SEG+0x80>)
 800107a:	f000 fd1b 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 800107e:	e016      	b.n	80010ae <update7SEG+0x72>
		display7SEG(led_buffer[2]);
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <update7SEG+0x7c>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fc63 	bl	8000950 <display7SEG>
		display7SEG0(led_buffer[3]);
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <update7SEG+0x7c>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fdee 	bl	8000c70 <display7SEG0>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800109a:	4808      	ldr	r0, [pc, #32]	; (80010bc <update7SEG+0x80>)
 800109c:	f000 fd0a 	bl	8001ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <update7SEG+0x80>)
 80010a8:	f000 fd04 	bl	8001ab4 <HAL_GPIO_WritePin>
		break;
 80010ac:	bf00      	nop
	}
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000064 	.word	0x20000064
 80010bc:	40010c00 	.word	0x40010c00

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c6:	f000 fa35 	bl	8001534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ca:	f000 f851 	bl	8001170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ce:	f000 f8d9 	bl	8001284 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010d2:	f000 f889 	bl	80011e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010d6:	4823      	ldr	r0, [pc, #140]	; (8001164 <main+0xa4>)
 80010d8:	f001 f94a 	bl	8002370 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state = 0;
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <main+0xa8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
  int led_idx = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
  int index = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
  setTimer0(1000);
 80010ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ee:	f000 f931 	bl	8001354 <setTimer0>
  while (1)
  {
    /* USER CODE END WHILE */
	  if (timer0_flag == 1) {
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <main+0xac>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d12e      	bne.n	8001158 <main+0x98>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d82d      	bhi.n	800115c <main+0x9c>
 8001100:	a201      	add	r2, pc, #4	; (adr r2, 8001108 <main+0x48>)
 8001102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001106:	bf00      	nop
 8001108:	08001119 	.word	0x08001119
 800110c:	08001121 	.word	0x08001121
 8001110:	08001139 	.word	0x08001139
 8001114:	08001141 	.word	0x08001141
	  	  switch (led_idx) {
	  	  	case 0:
	  	  		led_idx++;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3301      	adds	r3, #1
 800111c:	607b      	str	r3, [r7, #4]
	  	  		break;
 800111e:	e01e      	b.n	800115e <main+0x9e>
	  	  	case 1:
	  	  		index = 1;
 8001120:	2301      	movs	r3, #1
 8001122:	603b      	str	r3, [r7, #0]
	  	  		update7SEG(index);
 8001124:	6838      	ldr	r0, [r7, #0]
 8001126:	f7ff ff89 	bl	800103c <update7SEG>
	  	  		setTimer0(500);
 800112a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800112e:	f000 f911 	bl	8001354 <setTimer0>
	  	  		led_idx = 2;
 8001132:	2302      	movs	r3, #2
 8001134:	607b      	str	r3, [r7, #4]
	  	  		break;
 8001136:	e012      	b.n	800115e <main+0x9e>
	  	  	case 2:
	  	  		led_idx++;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3301      	adds	r3, #1
 800113c:	607b      	str	r3, [r7, #4]
	  	  		break;
 800113e:	e00e      	b.n	800115e <main+0x9e>
	  	  	case 3:
	  	  		index = 2;
 8001140:	2302      	movs	r3, #2
 8001142:	603b      	str	r3, [r7, #0]
	  	  		update7SEG(index);
 8001144:	6838      	ldr	r0, [r7, #0]
 8001146:	f7ff ff79 	bl	800103c <update7SEG>
	  	  		setTimer0(500);
 800114a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800114e:	f000 f901 	bl	8001354 <setTimer0>
	  	  		led_idx = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
	  	  		break;
 8001156:	e002      	b.n	800115e <main+0x9e>
	  	    default:
	  	  		break;
	  	  		  }
	  	  	  }
 8001158:	bf00      	nop
 800115a:	e000      	b.n	800115e <main+0x9e>
	  	  		break;
 800115c:	bf00      	nop
	  fsm_run();
 800115e:	f7ff f82b 	bl	80001b8 <fsm_run>
	  if (timer0_flag == 1) {
 8001162:	e7c6      	b.n	80010f2 <main+0x32>
 8001164:	2000008c 	.word	0x2000008c
 8001168:	20000060 	.word	0x20000060
 800116c:	20000078 	.word	0x20000078

08001170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b090      	sub	sp, #64	; 0x40
 8001174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	2228      	movs	r2, #40	; 0x28
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fb74 	bl	800286c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001196:	2301      	movs	r3, #1
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119a:	2310      	movs	r3, #16
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800119e:	2300      	movs	r3, #0
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fcb6 	bl	8001b18 <HAL_RCC_OscConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011b2:	f000 f8c9 	bl	8001348 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b6:	230f      	movs	r3, #15
 80011b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 ff22 	bl	8002018 <HAL_RCC_ClockConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011da:	f000 f8b5 	bl	8001348 <Error_Handler>
  }
}
 80011de:	bf00      	nop
 80011e0:	3740      	adds	r7, #64	; 0x40
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	463b      	mov	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_TIM2_Init+0x98>)
 8001206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800120a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_TIM2_Init+0x98>)
 800120e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001212:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_TIM2_Init+0x98>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_TIM2_Init+0x98>)
 800121c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001220:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_TIM2_Init+0x98>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <MX_TIM2_Init+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800122e:	4814      	ldr	r0, [pc, #80]	; (8001280 <MX_TIM2_Init+0x98>)
 8001230:	f001 f84e 	bl	80022d0 <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800123a:	f000 f885 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001242:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	4619      	mov	r1, r3
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_TIM2_Init+0x98>)
 800124c:	f001 f8dc 	bl	8002408 <HAL_TIM_ConfigClockSource>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001256:	f000 f877 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	4619      	mov	r1, r3
 8001266:	4806      	ldr	r0, [pc, #24]	; (8001280 <MX_TIM2_Init+0x98>)
 8001268:	f001 fa84 	bl	8002774 <HAL_TIMEx_MasterConfigSynchronization>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001272:	f000 f869 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000008c 	.word	0x2000008c

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <MX_GPIO_Init+0xb8>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <MX_GPIO_Init+0xb8>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <MX_GPIO_Init+0xb8>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <MX_GPIO_Init+0xb8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a21      	ldr	r2, [pc, #132]	; (800133c <MX_GPIO_Init+0xb8>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <MX_GPIO_Init+0xb8>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_0_Pin
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80012ce:	481c      	ldr	r0, [pc, #112]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012d0:	f000 fbf0 	bl	8001ab4 <HAL_GPIO_WritePin>
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|D0_Pin
 80012d4:	2200      	movs	r2, #0
 80012d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012da:	481a      	ldr	r0, [pc, #104]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012dc:	f000 fbea 	bl	8001ab4 <HAL_GPIO_WritePin>
                          |E0_Pin|F0_Pin|G0_Pin|EN1_Pin
                          |EN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A0_Pin|B0_Pin|C0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin BUT3_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin|BUT3_Pin;
 80012e0:	230e      	movs	r3, #14
 80012e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	4619      	mov	r1, r3
 80012f2:	4813      	ldr	r0, [pc, #76]	; (8001340 <MX_GPIO_Init+0xbc>)
 80012f4:	f000 fa64 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_RED_0_Pin
                           LED_YELLOW_0_Pin LED_GREEN_0_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_0_Pin
 80012f8:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80012fc:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2302      	movs	r3, #2
 8001308:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4619      	mov	r1, r3
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <MX_GPIO_Init+0xbc>)
 8001312:	f000 fa55 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D0_Pin
                           E0_Pin F0_Pin G0_Pin EN1_Pin
                           EN2_Pin D_Pin E_Pin F_Pin
                           G_Pin A0_Pin B0_Pin C0_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D0_Pin
 8001316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800131a:	60bb      	str	r3, [r7, #8]
                          |E0_Pin|F0_Pin|G0_Pin|EN1_Pin
                          |EN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A0_Pin|B0_Pin|C0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2302      	movs	r3, #2
 8001326:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	4619      	mov	r1, r3
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_GPIO_Init+0xc0>)
 8001330:	f000 fa46 	bl	80017c0 <HAL_GPIO_Init>

}
 8001334:	bf00      	nop
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	40010800 	.word	0x40010800
 8001344:	40010c00 	.word	0x40010c00

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001350:	e7fe      	b.n	8001350 <Error_Handler+0x8>
	...

08001354 <setTimer0>:
int timer1_counter = 0;
int timer1_flag = 0;
int timer2_counter = 0;
int timer2_flag = 0;
int TIMER_CYCLE = 10;
void setTimer0(int duration){
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/ TIMER_CYCLE;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <setTimer0+0x28>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	fb92 f3f3 	sdiv	r3, r2, r3
 8001366:	4a06      	ldr	r2, [pc, #24]	; (8001380 <setTimer0+0x2c>)
 8001368:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <setTimer0+0x30>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	2000000c 	.word	0x2000000c
 8001380:	20000074 	.word	0x20000074
 8001384:	20000078 	.word	0x20000078

08001388 <setTimer1>:

void setTimer1(int duration){
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/ TIMER_CYCLE;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <setTimer1+0x28>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	fb92 f3f3 	sdiv	r3, r2, r3
 800139a:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <setTimer1+0x2c>)
 800139c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <setTimer1+0x30>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000000c 	.word	0x2000000c
 80013b4:	2000007c 	.word	0x2000007c
 80013b8:	20000080 	.word	0x20000080

080013bc <setTimer2>:

void setTimer2(int duration){
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/ TIMER_CYCLE;
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <setTimer2+0x28>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80013ce:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <setTimer2+0x2c>)
 80013d0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <setTimer2+0x30>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	2000000c 	.word	0x2000000c
 80013e8:	20000084 	.word	0x20000084
 80013ec:	20000088 	.word	0x20000088

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_MspInit+0x5c>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a14      	ldr	r2, [pc, #80]	; (800144c <HAL_MspInit+0x5c>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6193      	str	r3, [r2, #24]
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_MspInit+0x5c>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_MspInit+0x5c>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <HAL_MspInit+0x5c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_MspInit+0x5c>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_MspInit+0x60>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_MspInit+0x60>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	40021000 	.word	0x40021000
 8001450:	40010000 	.word	0x40010000

08001454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001464:	d10b      	bne.n	800147e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_TIM_Base_MspInit+0x34>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_TIM_Base_MspInit+0x34>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	61d3      	str	r3, [r2, #28]
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_TIM_Base_MspInit+0x34>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	40021000 	.word	0x40021000

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr

080014ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d2:	f000 f875 	bl	80015c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}

080014da <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
	...

080014e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e8:	f7ff fff7 	bl	80014da <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ec:	480b      	ldr	r0, [pc, #44]	; (800151c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014ee:	490c      	ldr	r1, [pc, #48]	; (8001520 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a09      	ldr	r2, [pc, #36]	; (8001528 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001504:	4c09      	ldr	r4, [pc, #36]	; (800152c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001512:	f001 f987 	bl	8002824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001516:	f7ff fdd3 	bl	80010c0 <main>
  bx lr
 800151a:	4770      	bx	lr
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001524:	080028c0 	.word	0x080028c0
  ldr r2, =_sbss
 8001528:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800152c:	200000d8 	.word	0x200000d8

08001530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC1_2_IRQHandler>
	...

08001534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_Init+0x28>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_Init+0x28>)
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001544:	2003      	movs	r0, #3
 8001546:	f000 f907 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154a:	200f      	movs	r0, #15
 800154c:	f000 f808 	bl	8001560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001550:	f7ff ff4e 	bl	80013f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40022000 	.word	0x40022000

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_InitTick+0x54>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x58>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	fbb3 f3f1 	udiv	r3, r3, r1
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f911 	bl	80017a6 <HAL_SYSTICK_Config>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e00e      	b.n	80015ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d80a      	bhi.n	80015aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f000 f8e7 	bl	800176e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <HAL_InitTick+0x5c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000010 	.word	0x20000010
 80015b8:	20000018 	.word	0x20000018
 80015bc:	20000014 	.word	0x20000014

080015c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_IncTick+0x1c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_IncTick+0x20>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <HAL_IncTick+0x20>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	20000018 	.word	0x20000018
 80015e0:	200000d4 	.word	0x200000d4

080015e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <HAL_GetTick+0x10>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	200000d4 	.word	0x200000d4

080015f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	60d3      	str	r3, [r2, #12]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <__NVIC_GetPriorityGrouping+0x18>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0307 	and.w	r3, r3, #7
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	; (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f7ff ff90 	bl	800165c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff49 	bl	80015f8 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001780:	f7ff ff5e 	bl	8001640 <__NVIC_GetPriorityGrouping>
 8001784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f7ff ff90 	bl	80016b0 <NVIC_EncodePriority>
 8001790:	4602      	mov	r2, r0
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff5f 	bl	800165c <__NVIC_SetPriority>
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffb0 	bl	8001714 <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b08b      	sub	sp, #44	; 0x2c
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d2:	e148      	b.n	8001a66 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d4:	2201      	movs	r2, #1
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	f040 8137 	bne.w	8001a60 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4aa3      	ldr	r2, [pc, #652]	; (8001a84 <HAL_GPIO_Init+0x2c4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d05e      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 80017fc:	4aa1      	ldr	r2, [pc, #644]	; (8001a84 <HAL_GPIO_Init+0x2c4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d875      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 8001802:	4aa1      	ldr	r2, [pc, #644]	; (8001a88 <HAL_GPIO_Init+0x2c8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d058      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 8001808:	4a9f      	ldr	r2, [pc, #636]	; (8001a88 <HAL_GPIO_Init+0x2c8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d86f      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 800180e:	4a9f      	ldr	r2, [pc, #636]	; (8001a8c <HAL_GPIO_Init+0x2cc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d052      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 8001814:	4a9d      	ldr	r2, [pc, #628]	; (8001a8c <HAL_GPIO_Init+0x2cc>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d869      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 800181a:	4a9d      	ldr	r2, [pc, #628]	; (8001a90 <HAL_GPIO_Init+0x2d0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d04c      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 8001820:	4a9b      	ldr	r2, [pc, #620]	; (8001a90 <HAL_GPIO_Init+0x2d0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d863      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 8001826:	4a9b      	ldr	r2, [pc, #620]	; (8001a94 <HAL_GPIO_Init+0x2d4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d046      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 800182c:	4a99      	ldr	r2, [pc, #612]	; (8001a94 <HAL_GPIO_Init+0x2d4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d85d      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 8001832:	2b12      	cmp	r3, #18
 8001834:	d82a      	bhi.n	800188c <HAL_GPIO_Init+0xcc>
 8001836:	2b12      	cmp	r3, #18
 8001838:	d859      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 800183a:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <HAL_GPIO_Init+0x80>)
 800183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001840:	080018bb 	.word	0x080018bb
 8001844:	08001895 	.word	0x08001895
 8001848:	080018a7 	.word	0x080018a7
 800184c:	080018e9 	.word	0x080018e9
 8001850:	080018ef 	.word	0x080018ef
 8001854:	080018ef 	.word	0x080018ef
 8001858:	080018ef 	.word	0x080018ef
 800185c:	080018ef 	.word	0x080018ef
 8001860:	080018ef 	.word	0x080018ef
 8001864:	080018ef 	.word	0x080018ef
 8001868:	080018ef 	.word	0x080018ef
 800186c:	080018ef 	.word	0x080018ef
 8001870:	080018ef 	.word	0x080018ef
 8001874:	080018ef 	.word	0x080018ef
 8001878:	080018ef 	.word	0x080018ef
 800187c:	080018ef 	.word	0x080018ef
 8001880:	080018ef 	.word	0x080018ef
 8001884:	0800189d 	.word	0x0800189d
 8001888:	080018b1 	.word	0x080018b1
 800188c:	4a82      	ldr	r2, [pc, #520]	; (8001a98 <HAL_GPIO_Init+0x2d8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d013      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001892:	e02c      	b.n	80018ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	623b      	str	r3, [r7, #32]
          break;
 800189a:	e029      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	3304      	adds	r3, #4
 80018a2:	623b      	str	r3, [r7, #32]
          break;
 80018a4:	e024      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	3308      	adds	r3, #8
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e01f      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	330c      	adds	r3, #12
 80018b6:	623b      	str	r3, [r7, #32]
          break;
 80018b8:	e01a      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d102      	bne.n	80018c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018c2:	2304      	movs	r3, #4
 80018c4:	623b      	str	r3, [r7, #32]
          break;
 80018c6:	e013      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d105      	bne.n	80018dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d0:	2308      	movs	r3, #8
 80018d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	611a      	str	r2, [r3, #16]
          break;
 80018da:	e009      	b.n	80018f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018dc:	2308      	movs	r3, #8
 80018de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	615a      	str	r2, [r3, #20]
          break;
 80018e6:	e003      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
          break;
 80018ec:	e000      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          break;
 80018ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2bff      	cmp	r3, #255	; 0xff
 80018f4:	d801      	bhi.n	80018fa <HAL_GPIO_Init+0x13a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	e001      	b.n	80018fe <HAL_GPIO_Init+0x13e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3304      	adds	r3, #4
 80018fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2bff      	cmp	r3, #255	; 0xff
 8001904:	d802      	bhi.n	800190c <HAL_GPIO_Init+0x14c>
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	e002      	b.n	8001912 <HAL_GPIO_Init+0x152>
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	3b08      	subs	r3, #8
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	210f      	movs	r1, #15
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	401a      	ands	r2, r3
 8001924:	6a39      	ldr	r1, [r7, #32]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	431a      	orrs	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8090 	beq.w	8001a60 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001940:	4b56      	ldr	r3, [pc, #344]	; (8001a9c <HAL_GPIO_Init+0x2dc>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a55      	ldr	r2, [pc, #340]	; (8001a9c <HAL_GPIO_Init+0x2dc>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <HAL_GPIO_Init+0x2dc>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001958:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <HAL_GPIO_Init+0x2e0>)
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001964:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	220f      	movs	r2, #15
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	4013      	ands	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a49      	ldr	r2, [pc, #292]	; (8001aa4 <HAL_GPIO_Init+0x2e4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d00d      	beq.n	80019a0 <HAL_GPIO_Init+0x1e0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a48      	ldr	r2, [pc, #288]	; (8001aa8 <HAL_GPIO_Init+0x2e8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d007      	beq.n	800199c <HAL_GPIO_Init+0x1dc>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a47      	ldr	r2, [pc, #284]	; (8001aac <HAL_GPIO_Init+0x2ec>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_GPIO_Init+0x1d8>
 8001994:	2302      	movs	r3, #2
 8001996:	e004      	b.n	80019a2 <HAL_GPIO_Init+0x1e2>
 8001998:	2303      	movs	r3, #3
 800199a:	e002      	b.n	80019a2 <HAL_GPIO_Init+0x1e2>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <HAL_GPIO_Init+0x1e2>
 80019a0:	2300      	movs	r3, #0
 80019a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a4:	f002 0203 	and.w	r2, r2, #3
 80019a8:	0092      	lsls	r2, r2, #2
 80019aa:	4093      	lsls	r3, r2
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019b2:	493b      	ldr	r1, [pc, #236]	; (8001aa0 <HAL_GPIO_Init+0x2e0>)
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	3302      	adds	r3, #2
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019cc:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	4937      	ldr	r1, [pc, #220]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019da:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4933      	ldr	r1, [pc, #204]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	492d      	ldr	r1, [pc, #180]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a02:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	4929      	ldr	r1, [pc, #164]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4923      	ldr	r1, [pc, #140]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	491f      	ldr	r1, [pc, #124]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4919      	ldr	r1, [pc, #100]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	4915      	ldr	r1, [pc, #84]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	3301      	adds	r3, #1
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f47f aeaf 	bne.w	80017d4 <HAL_GPIO_Init+0x14>
  }
}
 8001a76:	bf00      	nop
 8001a78:	bf00      	nop
 8001a7a:	372c      	adds	r7, #44	; 0x2c
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	10320000 	.word	0x10320000
 8001a88:	10310000 	.word	0x10310000
 8001a8c:	10220000 	.word	0x10220000
 8001a90:	10210000 	.word	0x10210000
 8001a94:	10120000 	.word	0x10120000
 8001a98:	10110000 	.word	0x10110000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	40010800 	.word	0x40010800
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac4:	787b      	ldrb	r3, [r7, #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ad0:	e003      	b.n	8001ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4013      	ands	r3, r2
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	43d9      	mvns	r1, r3
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	400b      	ands	r3, r1
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	611a      	str	r2, [r3, #16]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
	...

08001b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e26c      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8087 	beq.w	8001c46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b38:	4b92      	ldr	r3, [pc, #584]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d00c      	beq.n	8001b5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b44:	4b8f      	ldr	r3, [pc, #572]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d112      	bne.n	8001b76 <HAL_RCC_OscConfig+0x5e>
 8001b50:	4b8c      	ldr	r3, [pc, #560]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5c:	d10b      	bne.n	8001b76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5e:	4b89      	ldr	r3, [pc, #548]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d06c      	beq.n	8001c44 <HAL_RCC_OscConfig+0x12c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d168      	bne.n	8001c44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e246      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x76>
 8001b80:	4b80      	ldr	r3, [pc, #512]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a7f      	ldr	r2, [pc, #508]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e02e      	b.n	8001bec <HAL_RCC_OscConfig+0xd4>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x98>
 8001b96:	4b7b      	ldr	r3, [pc, #492]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a7a      	ldr	r2, [pc, #488]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b78      	ldr	r3, [pc, #480]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a77      	ldr	r2, [pc, #476]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e01d      	b.n	8001bec <HAL_RCC_OscConfig+0xd4>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xbc>
 8001bba:	4b72      	ldr	r3, [pc, #456]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a71      	ldr	r2, [pc, #452]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b6f      	ldr	r3, [pc, #444]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a6e      	ldr	r2, [pc, #440]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0xd4>
 8001bd4:	4b6b      	ldr	r3, [pc, #428]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a6a      	ldr	r2, [pc, #424]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b68      	ldr	r3, [pc, #416]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a67      	ldr	r2, [pc, #412]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fcf6 	bl	80015e4 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff fcf2 	bl	80015e4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	; 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e1fa      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	4b5d      	ldr	r3, [pc, #372]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0xe4>
 8001c1a:	e014      	b.n	8001c46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fce2 	bl	80015e4 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff fcde 	bl	80015e4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	; 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e1e6      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x10c>
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d063      	beq.n	8001d1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c52:	4b4c      	ldr	r3, [pc, #304]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c5e:	4b49      	ldr	r3, [pc, #292]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d11c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x18c>
 8001c6a:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d116      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c76:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <HAL_RCC_OscConfig+0x176>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e1ba      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8e:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4939      	ldr	r1, [pc, #228]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca2:	e03a      	b.n	8001d1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d020      	beq.n	8001cee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff fc97 	bl	80015e4 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cba:	f7ff fc93 	bl	80015e4 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e19b      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4927      	ldr	r1, [pc, #156]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
 8001cec:	e015      	b.n	8001d1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fc76 	bl	80015e4 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfc:	f7ff fc72 	bl	80015e4 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e17a      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d03a      	beq.n	8001d9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d019      	beq.n	8001d62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_RCC_OscConfig+0x274>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d34:	f7ff fc56 	bl	80015e4 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fc52 	bl	80015e4 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e15a      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f000 fa9a 	bl	8002294 <RCC_Delay>
 8001d60:	e01c      	b.n	8001d9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_RCC_OscConfig+0x274>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d68:	f7ff fc3c 	bl	80015e4 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6e:	e00f      	b.n	8001d90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d70:	f7ff fc38 	bl	80015e4 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d908      	bls.n	8001d90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e140      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	42420000 	.word	0x42420000
 8001d8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d90:	4b9e      	ldr	r3, [pc, #632]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e9      	bne.n	8001d70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80a6 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dae:	4b97      	ldr	r3, [pc, #604]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10d      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b94      	ldr	r3, [pc, #592]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a93      	ldr	r2, [pc, #588]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	61d3      	str	r3, [r2, #28]
 8001dc6:	4b91      	ldr	r3, [pc, #580]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd6:	4b8e      	ldr	r3, [pc, #568]	; (8002010 <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d118      	bne.n	8001e14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de2:	4b8b      	ldr	r3, [pc, #556]	; (8002010 <HAL_RCC_OscConfig+0x4f8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a8a      	ldr	r2, [pc, #552]	; (8002010 <HAL_RCC_OscConfig+0x4f8>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dee:	f7ff fbf9 	bl	80015e4 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df6:	f7ff fbf5 	bl	80015e4 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b64      	cmp	r3, #100	; 0x64
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e0fd      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e08:	4b81      	ldr	r3, [pc, #516]	; (8002010 <HAL_RCC_OscConfig+0x4f8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x312>
 8001e1c:	4b7b      	ldr	r3, [pc, #492]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4a7a      	ldr	r2, [pc, #488]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6213      	str	r3, [r2, #32]
 8001e28:	e02d      	b.n	8001e86 <HAL_RCC_OscConfig+0x36e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x334>
 8001e32:	4b76      	ldr	r3, [pc, #472]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a75      	ldr	r2, [pc, #468]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6213      	str	r3, [r2, #32]
 8001e3e:	4b73      	ldr	r3, [pc, #460]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a72      	ldr	r2, [pc, #456]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	e01c      	b.n	8001e86 <HAL_RCC_OscConfig+0x36e>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d10c      	bne.n	8001e6e <HAL_RCC_OscConfig+0x356>
 8001e54:	4b6d      	ldr	r3, [pc, #436]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4a6c      	ldr	r2, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6213      	str	r3, [r2, #32]
 8001e60:	4b6a      	ldr	r3, [pc, #424]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a69      	ldr	r2, [pc, #420]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	e00b      	b.n	8001e86 <HAL_RCC_OscConfig+0x36e>
 8001e6e:	4b67      	ldr	r3, [pc, #412]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4a66      	ldr	r2, [pc, #408]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	6213      	str	r3, [r2, #32]
 8001e7a:	4b64      	ldr	r3, [pc, #400]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a63      	ldr	r2, [pc, #396]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d015      	beq.n	8001eba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff fba9 	bl	80015e4 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e94:	e00a      	b.n	8001eac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7ff fba5 	bl	80015e4 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e0ab      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eac:	4b57      	ldr	r3, [pc, #348]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ee      	beq.n	8001e96 <HAL_RCC_OscConfig+0x37e>
 8001eb8:	e014      	b.n	8001ee4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eba:	f7ff fb93 	bl	80015e4 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7ff fb8f 	bl	80015e4 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e095      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed8:	4b4c      	ldr	r3, [pc, #304]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ee      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d105      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eea:	4b48      	ldr	r3, [pc, #288]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a47      	ldr	r2, [pc, #284]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8081 	beq.w	8002002 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f00:	4b42      	ldr	r3, [pc, #264]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d061      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d146      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f14:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <HAL_RCC_OscConfig+0x4fc>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7ff fb63 	bl	80015e4 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f22:	f7ff fb5f 	bl	80015e4 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e067      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f34:	4b35      	ldr	r3, [pc, #212]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f48:	d108      	bne.n	8001f5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f4a:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	492d      	ldr	r1, [pc, #180]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a19      	ldr	r1, [r3, #32]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	4927      	ldr	r1, [pc, #156]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HAL_RCC_OscConfig+0x4fc>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fb33 	bl	80015e4 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f82:	f7ff fb2f 	bl	80015e4 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e037      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x46a>
 8001fa0:	e02f      	b.n	8002002 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <HAL_RCC_OscConfig+0x4fc>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff fb1c 	bl	80015e4 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7ff fb18 	bl	80015e4 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e020      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x498>
 8001fce:	e018      	b.n	8002002 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e013      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	40007000 	.word	0x40007000
 8002014:	42420060 	.word	0x42420060

08002018 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0d0      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800202c:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d910      	bls.n	800205c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b67      	ldr	r3, [pc, #412]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 0207 	bic.w	r2, r3, #7
 8002042:	4965      	ldr	r1, [pc, #404]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b63      	ldr	r3, [pc, #396]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0b8      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d020      	beq.n	80020aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002074:	4b59      	ldr	r3, [pc, #356]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a58      	ldr	r2, [pc, #352]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800207e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800208c:	4b53      	ldr	r3, [pc, #332]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4a52      	ldr	r2, [pc, #328]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002096:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002098:	4b50      	ldr	r3, [pc, #320]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	494d      	ldr	r1, [pc, #308]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d040      	beq.n	8002138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b47      	ldr	r3, [pc, #284]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d115      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e07f      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e073      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e6:	4b3d      	ldr	r3, [pc, #244]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e06b      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f6:	4b39      	ldr	r3, [pc, #228]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f023 0203 	bic.w	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4936      	ldr	r1, [pc, #216]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002108:	f7ff fa6c 	bl	80015e4 <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	e00a      	b.n	8002126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002110:	f7ff fa68 	bl	80015e4 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	; 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e053      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 020c 	and.w	r2, r3, #12
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	429a      	cmp	r2, r3
 8002136:	d1eb      	bne.n	8002110 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d210      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 0207 	bic.w	r2, r3, #7
 800214e:	4922      	ldr	r1, [pc, #136]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e032      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4916      	ldr	r1, [pc, #88]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490e      	ldr	r1, [pc, #56]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021a6:	f000 f821 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490a      	ldr	r1, [pc, #40]	; (80021e0 <HAL_RCC_ClockConfig+0x1c8>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <HAL_RCC_ClockConfig+0x1cc>)
 80021c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <HAL_RCC_ClockConfig+0x1d0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff f9ca 	bl	8001560 <HAL_InitTick>

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40022000 	.word	0x40022000
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08002894 	.word	0x08002894
 80021e4:	20000010 	.word	0x20000010
 80021e8:	20000014 	.word	0x20000014

080021ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_RCC_GetSysClockFreq+0x94>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b04      	cmp	r3, #4
 8002214:	d002      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x30>
 8002216:	2b08      	cmp	r3, #8
 8002218:	d003      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x36>
 800221a:	e027      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_RCC_GetSysClockFreq+0x98>)
 800221e:	613b      	str	r3, [r7, #16]
      break;
 8002220:	e027      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	0c9b      	lsrs	r3, r3, #18
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	4a17      	ldr	r2, [pc, #92]	; (8002288 <HAL_RCC_GetSysClockFreq+0x9c>)
 800222c:	5cd3      	ldrb	r3, [r2, r3]
 800222e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d010      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_RCC_GetSysClockFreq+0x94>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	0c5b      	lsrs	r3, r3, #17
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	4a11      	ldr	r2, [pc, #68]	; (800228c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <HAL_RCC_GetSysClockFreq+0x98>)
 800224e:	fb02 f203 	mul.w	r2, r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	e004      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a0c      	ldr	r2, [pc, #48]	; (8002290 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002260:	fb02 f303 	mul.w	r3, r2, r3
 8002264:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	613b      	str	r3, [r7, #16]
      break;
 800226a:	e002      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetSysClockFreq+0x98>)
 800226e:	613b      	str	r3, [r7, #16]
      break;
 8002270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002272:	693b      	ldr	r3, [r7, #16]
}
 8002274:	4618      	mov	r0, r3
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	007a1200 	.word	0x007a1200
 8002288:	080028a4 	.word	0x080028a4
 800228c:	080028b4 	.word	0x080028b4
 8002290:	003d0900 	.word	0x003d0900

08002294 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <RCC_Delay+0x34>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <RCC_Delay+0x38>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	0a5b      	lsrs	r3, r3, #9
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022b0:	bf00      	nop
  }
  while (Delay --);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1e5a      	subs	r2, r3, #1
 80022b6:	60fa      	str	r2, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f9      	bne.n	80022b0 <RCC_Delay+0x1c>
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	20000010 	.word	0x20000010
 80022cc:	10624dd3 	.word	0x10624dd3

080022d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e041      	b.n	8002366 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff f8ac 	bl	8001454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	4619      	mov	r1, r3
 800230e:	4610      	mov	r0, r2
 8002310:	f000 f942 	bl	8002598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b01      	cmp	r3, #1
 8002382:	d001      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e035      	b.n	80023f4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_TIM_Base_Start_IT+0x90>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d009      	beq.n	80023be <HAL_TIM_Base_Start_IT+0x4e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b2:	d004      	beq.n	80023be <HAL_TIM_Base_Start_IT+0x4e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a12      	ldr	r2, [pc, #72]	; (8002404 <HAL_TIM_Base_Start_IT+0x94>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d111      	bne.n	80023e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b06      	cmp	r3, #6
 80023ce:	d010      	beq.n	80023f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e0:	e007      	b.n	80023f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0201 	orr.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40012c00 	.word	0x40012c00
 8002404:	40000400 	.word	0x40000400

08002408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_TIM_ConfigClockSource+0x1c>
 8002420:	2302      	movs	r3, #2
 8002422:	e0b4      	b.n	800258e <HAL_TIM_ConfigClockSource+0x186>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800244a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800245c:	d03e      	beq.n	80024dc <HAL_TIM_ConfigClockSource+0xd4>
 800245e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002462:	f200 8087 	bhi.w	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 8002466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246a:	f000 8086 	beq.w	800257a <HAL_TIM_ConfigClockSource+0x172>
 800246e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002472:	d87f      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 8002474:	2b70      	cmp	r3, #112	; 0x70
 8002476:	d01a      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0xa6>
 8002478:	2b70      	cmp	r3, #112	; 0x70
 800247a:	d87b      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 800247c:	2b60      	cmp	r3, #96	; 0x60
 800247e:	d050      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0x11a>
 8002480:	2b60      	cmp	r3, #96	; 0x60
 8002482:	d877      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 8002484:	2b50      	cmp	r3, #80	; 0x50
 8002486:	d03c      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0xfa>
 8002488:	2b50      	cmp	r3, #80	; 0x50
 800248a:	d873      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 800248c:	2b40      	cmp	r3, #64	; 0x40
 800248e:	d058      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x13a>
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d86f      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 8002494:	2b30      	cmp	r3, #48	; 0x30
 8002496:	d064      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x15a>
 8002498:	2b30      	cmp	r3, #48	; 0x30
 800249a:	d86b      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 800249c:	2b20      	cmp	r3, #32
 800249e:	d060      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x15a>
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d867      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d05c      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x15a>
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d05a      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x15a>
 80024ac:	e062      	b.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6899      	ldr	r1, [r3, #8]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f000 f93a 	bl	8002736 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	609a      	str	r2, [r3, #8]
      break;
 80024da:	e04f      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6899      	ldr	r1, [r3, #8]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f000 f923 	bl	8002736 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024fe:	609a      	str	r2, [r3, #8]
      break;
 8002500:	e03c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6859      	ldr	r1, [r3, #4]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	461a      	mov	r2, r3
 8002510:	f000 f89a 	bl	8002648 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2150      	movs	r1, #80	; 0x50
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f8f1 	bl	8002702 <TIM_ITRx_SetConfig>
      break;
 8002520:	e02c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	461a      	mov	r2, r3
 8002530:	f000 f8b8 	bl	80026a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2160      	movs	r1, #96	; 0x60
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f8e1 	bl	8002702 <TIM_ITRx_SetConfig>
      break;
 8002540:	e01c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6859      	ldr	r1, [r3, #4]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	461a      	mov	r2, r3
 8002550:	f000 f87a 	bl	8002648 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2140      	movs	r1, #64	; 0x40
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f8d1 	bl	8002702 <TIM_ITRx_SetConfig>
      break;
 8002560:	e00c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f000 f8c8 	bl	8002702 <TIM_ITRx_SetConfig>
      break;
 8002572:	e003      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      break;
 8002578:	e000      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800257a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a25      	ldr	r2, [pc, #148]	; (8002640 <TIM_Base_SetConfig+0xa8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d007      	beq.n	80025c0 <TIM_Base_SetConfig+0x28>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b6:	d003      	beq.n	80025c0 <TIM_Base_SetConfig+0x28>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a22      	ldr	r2, [pc, #136]	; (8002644 <TIM_Base_SetConfig+0xac>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d108      	bne.n	80025d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a1a      	ldr	r2, [pc, #104]	; (8002640 <TIM_Base_SetConfig+0xa8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <TIM_Base_SetConfig+0x52>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e0:	d003      	beq.n	80025ea <TIM_Base_SetConfig+0x52>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a17      	ldr	r2, [pc, #92]	; (8002644 <TIM_Base_SetConfig+0xac>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d108      	bne.n	80025fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a07      	ldr	r2, [pc, #28]	; (8002640 <TIM_Base_SetConfig+0xa8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d103      	bne.n	8002630 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	615a      	str	r2, [r3, #20]
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	40012c00 	.word	0x40012c00
 8002644:	40000400 	.word	0x40000400

08002648 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	f023 0201 	bic.w	r2, r3, #1
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f023 030a 	bic.w	r3, r3, #10
 8002684:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	621a      	str	r2, [r3, #32]
}
 800269a:	bf00      	nop
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	f023 0210 	bic.w	r2, r3, #16
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	031b      	lsls	r3, r3, #12
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	621a      	str	r2, [r3, #32]
}
 80026f8:	bf00      	nop
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002702:	b480      	push	{r7}
 8002704:	b085      	sub	sp, #20
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	f043 0307 	orr.w	r3, r3, #7
 8002724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	609a      	str	r2, [r3, #8]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002736:	b480      	push	{r7}
 8002738:	b087      	sub	sp, #28
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002750:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	021a      	lsls	r2, r3, #8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	431a      	orrs	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	4313      	orrs	r3, r2
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	609a      	str	r2, [r3, #8]
}
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002788:	2302      	movs	r3, #2
 800278a:	e041      	b.n	8002810 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a14      	ldr	r2, [pc, #80]	; (800281c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d009      	beq.n	80027e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d004      	beq.n	80027e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a10      	ldr	r2, [pc, #64]	; (8002820 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d10c      	bne.n	80027fe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40012c00 	.word	0x40012c00
 8002820:	40000400 	.word	0x40000400

08002824 <__libc_init_array>:
 8002824:	b570      	push	{r4, r5, r6, lr}
 8002826:	2600      	movs	r6, #0
 8002828:	4d0c      	ldr	r5, [pc, #48]	; (800285c <__libc_init_array+0x38>)
 800282a:	4c0d      	ldr	r4, [pc, #52]	; (8002860 <__libc_init_array+0x3c>)
 800282c:	1b64      	subs	r4, r4, r5
 800282e:	10a4      	asrs	r4, r4, #2
 8002830:	42a6      	cmp	r6, r4
 8002832:	d109      	bne.n	8002848 <__libc_init_array+0x24>
 8002834:	f000 f822 	bl	800287c <_init>
 8002838:	2600      	movs	r6, #0
 800283a:	4d0a      	ldr	r5, [pc, #40]	; (8002864 <__libc_init_array+0x40>)
 800283c:	4c0a      	ldr	r4, [pc, #40]	; (8002868 <__libc_init_array+0x44>)
 800283e:	1b64      	subs	r4, r4, r5
 8002840:	10a4      	asrs	r4, r4, #2
 8002842:	42a6      	cmp	r6, r4
 8002844:	d105      	bne.n	8002852 <__libc_init_array+0x2e>
 8002846:	bd70      	pop	{r4, r5, r6, pc}
 8002848:	f855 3b04 	ldr.w	r3, [r5], #4
 800284c:	4798      	blx	r3
 800284e:	3601      	adds	r6, #1
 8002850:	e7ee      	b.n	8002830 <__libc_init_array+0xc>
 8002852:	f855 3b04 	ldr.w	r3, [r5], #4
 8002856:	4798      	blx	r3
 8002858:	3601      	adds	r6, #1
 800285a:	e7f2      	b.n	8002842 <__libc_init_array+0x1e>
 800285c:	080028b8 	.word	0x080028b8
 8002860:	080028b8 	.word	0x080028b8
 8002864:	080028b8 	.word	0x080028b8
 8002868:	080028bc 	.word	0x080028bc

0800286c <memset>:
 800286c:	4603      	mov	r3, r0
 800286e:	4402      	add	r2, r0
 8002870:	4293      	cmp	r3, r2
 8002872:	d100      	bne.n	8002876 <memset+0xa>
 8002874:	4770      	bx	lr
 8002876:	f803 1b01 	strb.w	r1, [r3], #1
 800287a:	e7f9      	b.n	8002870 <memset+0x4>

0800287c <_init>:
 800287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287e:	bf00      	nop
 8002880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002882:	bc08      	pop	{r3}
 8002884:	469e      	mov	lr, r3
 8002886:	4770      	bx	lr

08002888 <_fini>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	bf00      	nop
 800288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288e:	bc08      	pop	{r3}
 8002890:	469e      	mov	lr, r3
 8002892:	4770      	bx	lr
