
vxl_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b4c  08002b4c  00012b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b70  08002b70  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b70  08002b70  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b70  08002b70  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b74  08002b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000001c  08002b94  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002b94  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008be0  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001920  00000000  00000000  00028c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002a548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002af38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016acd  00000000  00000000  0002b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b25d  00000000  00000000  0004230d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823aa  00000000  00000000  0004d56a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf914  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d4  00000000  00000000  000cf968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b34 	.word	0x08002b34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002b34 	.word	0x08002b34

0800014c <isButton1Pressed>:
int TimeOutForNoKeyPress = 1000;
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000038 	.word	0x20000038

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	2000003c 	.word	0x2000003c

08000194 <isButton3Pressed>:

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000040 	.word	0x20000040

080001b8 <fsm_run>:
int tempYELLOW = 0;
int tempGREEN = 0;
int dis1 = 0;
int dis2 = 0;

void fsm_run() {
 80001b8:	b5b0      	push	{r4, r5, r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	switch (state) {
 80001bc:	4bb6      	ldr	r3, [pc, #728]	; (8000498 <fsm_run+0x2e0>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b28      	cmp	r3, #40	; 0x28
 80001c2:	f200 8505 	bhi.w	8000bd0 <fsm_run+0xa18>
 80001c6:	a201      	add	r2, pc, #4	; (adr r2, 80001cc <fsm_run+0x14>)
 80001c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001cc:	08000271 	.word	0x08000271
 80001d0:	080002ef 	.word	0x080002ef
 80001d4:	080005ff 	.word	0x080005ff
 80001d8:	08000801 	.word	0x08000801
 80001dc:	080009f9 	.word	0x080009f9
 80001e0:	08000bd1 	.word	0x08000bd1
 80001e4:	08000bd1 	.word	0x08000bd1
 80001e8:	08000bd1 	.word	0x08000bd1
 80001ec:	08000bd1 	.word	0x08000bd1
 80001f0:	08000bd1 	.word	0x08000bd1
 80001f4:	08000bd1 	.word	0x08000bd1
 80001f8:	08000bd1 	.word	0x08000bd1
 80001fc:	08000bd1 	.word	0x08000bd1
 8000200:	08000bd1 	.word	0x08000bd1
 8000204:	08000bd1 	.word	0x08000bd1
 8000208:	08000bd1 	.word	0x08000bd1
 800020c:	08000bd1 	.word	0x08000bd1
 8000210:	08000bd1 	.word	0x08000bd1
 8000214:	08000bd1 	.word	0x08000bd1
 8000218:	08000bd1 	.word	0x08000bd1
 800021c:	0800070d 	.word	0x0800070d
 8000220:	08000bd1 	.word	0x08000bd1
 8000224:	08000bd1 	.word	0x08000bd1
 8000228:	08000bd1 	.word	0x08000bd1
 800022c:	08000bd1 	.word	0x08000bd1
 8000230:	08000bd1 	.word	0x08000bd1
 8000234:	08000bd1 	.word	0x08000bd1
 8000238:	08000bd1 	.word	0x08000bd1
 800023c:	08000bd1 	.word	0x08000bd1
 8000240:	08000bd1 	.word	0x08000bd1
 8000244:	080008e5 	.word	0x080008e5
 8000248:	08000bd1 	.word	0x08000bd1
 800024c:	08000bd1 	.word	0x08000bd1
 8000250:	08000bd1 	.word	0x08000bd1
 8000254:	08000bd1 	.word	0x08000bd1
 8000258:	08000bd1 	.word	0x08000bd1
 800025c:	08000bd1 	.word	0x08000bd1
 8000260:	08000bd1 	.word	0x08000bd1
 8000264:	08000bd1 	.word	0x08000bd1
 8000268:	08000bd1 	.word	0x08000bd1
 800026c:	08000add 	.word	0x08000add
	case RESET:
		setTimer1(500);
 8000270:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000274:	f001 f9e4 	bl	8001640 <setTimer1>
		setTimer2(1000);
 8000278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800027c:	f001 f9fa 	bl	8001674 <setTimer2>

		tempRED = timeRED;
 8000280:	4b86      	ldr	r3, [pc, #536]	; (800049c <fsm_run+0x2e4>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a86      	ldr	r2, [pc, #536]	; (80004a0 <fsm_run+0x2e8>)
 8000286:	6013      	str	r3, [r2, #0]
		tempYELLOW = timeYELLOW;
 8000288:	4b86      	ldr	r3, [pc, #536]	; (80004a4 <fsm_run+0x2ec>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a86      	ldr	r2, [pc, #536]	; (80004a8 <fsm_run+0x2f0>)
 800028e:	6013      	str	r3, [r2, #0]
		tempGREEN = timeGREEN;
 8000290:	4b86      	ldr	r3, [pc, #536]	; (80004ac <fsm_run+0x2f4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a86      	ldr	r2, [pc, #536]	; (80004b0 <fsm_run+0x2f8>)
 8000296:	6013      	str	r3, [r2, #0]

		counter1 = 0;
 8000298:	4b86      	ldr	r3, [pc, #536]	; (80004b4 <fsm_run+0x2fc>)
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
		counter2 = 0;
 800029e:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <fsm_run+0x300>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80002a4:	2201      	movs	r2, #1
 80002a6:	2110      	movs	r1, #16
 80002a8:	4884      	ldr	r0, [pc, #528]	; (80004bc <fsm_run+0x304>)
 80002aa:	f001 fd5f 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	2140      	movs	r1, #64	; 0x40
 80002b2:	4882      	ldr	r0, [pc, #520]	; (80004bc <fsm_run+0x304>)
 80002b4:	f001 fd5a 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2120      	movs	r1, #32
 80002bc:	487f      	ldr	r0, [pc, #508]	; (80004bc <fsm_run+0x304>)
 80002be:	f001 fd55 	bl	8001d6c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	2180      	movs	r1, #128	; 0x80
 80002c6:	487d      	ldr	r0, [pc, #500]	; (80004bc <fsm_run+0x304>)
 80002c8:	f001 fd50 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002d2:	487a      	ldr	r0, [pc, #488]	; (80004bc <fsm_run+0x304>)
 80002d4:	f001 fd4a 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002de:	4877      	ldr	r0, [pc, #476]	; (80004bc <fsm_run+0x304>)
 80002e0:	f001 fd44 	bl	8001d6c <HAL_GPIO_WritePin>

		state = MODE_1;
 80002e4:	4b6c      	ldr	r3, [pc, #432]	; (8000498 <fsm_run+0x2e0>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	601a      	str	r2, [r3, #0]
		break;
 80002ea:	f000 bc80 	b.w	8000bee <fsm_run+0xa36>
	case MODE_1:
		updateClockBuffer(dis1/10, dis1%10, dis2/10, dis2%10);
 80002ee:	4b74      	ldr	r3, [pc, #464]	; (80004c0 <fsm_run+0x308>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a74      	ldr	r2, [pc, #464]	; (80004c4 <fsm_run+0x30c>)
 80002f4:	fb82 1203 	smull	r1, r2, r2, r3
 80002f8:	1092      	asrs	r2, r2, #2
 80002fa:	17db      	asrs	r3, r3, #31
 80002fc:	1ad4      	subs	r4, r2, r3
 80002fe:	4b70      	ldr	r3, [pc, #448]	; (80004c0 <fsm_run+0x308>)
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	4b70      	ldr	r3, [pc, #448]	; (80004c4 <fsm_run+0x30c>)
 8000304:	fb83 1302 	smull	r1, r3, r3, r2
 8000308:	1099      	asrs	r1, r3, #2
 800030a:	17d3      	asrs	r3, r2, #31
 800030c:	1ac9      	subs	r1, r1, r3
 800030e:	460b      	mov	r3, r1
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	440b      	add	r3, r1
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	1ad1      	subs	r1, r2, r3
 8000318:	4b6b      	ldr	r3, [pc, #428]	; (80004c8 <fsm_run+0x310>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a69      	ldr	r2, [pc, #420]	; (80004c4 <fsm_run+0x30c>)
 800031e:	fb82 0203 	smull	r0, r2, r2, r3
 8000322:	1092      	asrs	r2, r2, #2
 8000324:	17db      	asrs	r3, r3, #31
 8000326:	1ad5      	subs	r5, r2, r3
 8000328:	4b67      	ldr	r3, [pc, #412]	; (80004c8 <fsm_run+0x310>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	4b65      	ldr	r3, [pc, #404]	; (80004c4 <fsm_run+0x30c>)
 800032e:	fb83 0302 	smull	r0, r3, r3, r2
 8000332:	1098      	asrs	r0, r3, #2
 8000334:	17d3      	asrs	r3, r2, #31
 8000336:	1ac0      	subs	r0, r0, r3
 8000338:	4603      	mov	r3, r0
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	4403      	add	r3, r0
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	1ad0      	subs	r0, r2, r3
 8000342:	4603      	mov	r3, r0
 8000344:	462a      	mov	r2, r5
 8000346:	4620      	mov	r0, r4
 8000348:	f000 ffba 	bl	80012c0 <updateClockBuffer>

		if(timer1_flag == 1){
 800034c:	4b5f      	ldr	r3, [pc, #380]	; (80004cc <fsm_run+0x314>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b01      	cmp	r3, #1
 8000352:	f040 8120 	bne.w	8000596 <fsm_run+0x3de>
			counter1++;
 8000356:	4b57      	ldr	r3, [pc, #348]	; (80004b4 <fsm_run+0x2fc>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	3301      	adds	r3, #1
 800035c:	4a55      	ldr	r2, [pc, #340]	; (80004b4 <fsm_run+0x2fc>)
 800035e:	6013      	str	r3, [r2, #0]
			counter2++;
 8000360:	4b55      	ldr	r3, [pc, #340]	; (80004b8 <fsm_run+0x300>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3301      	adds	r3, #1
 8000366:	4a54      	ldr	r2, [pc, #336]	; (80004b8 <fsm_run+0x300>)
 8000368:	6013      	str	r3, [r2, #0]

			if(counter1 <= timeRED){
 800036a:	4b52      	ldr	r3, [pc, #328]	; (80004b4 <fsm_run+0x2fc>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	4b4b      	ldr	r3, [pc, #300]	; (800049c <fsm_run+0x2e4>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	429a      	cmp	r2, r3
 8000374:	dc16      	bgt.n	80003a4 <fsm_run+0x1ec>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2110      	movs	r1, #16
 800037a:	4850      	ldr	r0, [pc, #320]	; (80004bc <fsm_run+0x304>)
 800037c:	f001 fcf6 	bl	8001d6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000380:	2201      	movs	r2, #1
 8000382:	2120      	movs	r1, #32
 8000384:	484d      	ldr	r0, [pc, #308]	; (80004bc <fsm_run+0x304>)
 8000386:	f001 fcf1 	bl	8001d6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800038a:	2201      	movs	r2, #1
 800038c:	2140      	movs	r1, #64	; 0x40
 800038e:	484b      	ldr	r0, [pc, #300]	; (80004bc <fsm_run+0x304>)
 8000390:	f001 fcec 	bl	8001d6c <HAL_GPIO_WritePin>

				dis1 = timeRED - counter1;
 8000394:	4b41      	ldr	r3, [pc, #260]	; (800049c <fsm_run+0x2e4>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	4b46      	ldr	r3, [pc, #280]	; (80004b4 <fsm_run+0x2fc>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	1ad3      	subs	r3, r2, r3
 800039e:	4a48      	ldr	r2, [pc, #288]	; (80004c0 <fsm_run+0x308>)
 80003a0:	6013      	str	r3, [r2, #0]
 80003a2:	e04a      	b.n	800043a <fsm_run+0x282>
			}
			else if(counter1 <= timeRED + timeGREEN){
 80003a4:	4b3d      	ldr	r3, [pc, #244]	; (800049c <fsm_run+0x2e4>)
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	4b40      	ldr	r3, [pc, #256]	; (80004ac <fsm_run+0x2f4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	441a      	add	r2, r3
 80003ae:	4b41      	ldr	r3, [pc, #260]	; (80004b4 <fsm_run+0x2fc>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	db19      	blt.n	80003ea <fsm_run+0x232>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2110      	movs	r1, #16
 80003ba:	4840      	ldr	r0, [pc, #256]	; (80004bc <fsm_run+0x304>)
 80003bc:	f001 fcd6 	bl	8001d6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2120      	movs	r1, #32
 80003c4:	483d      	ldr	r0, [pc, #244]	; (80004bc <fsm_run+0x304>)
 80003c6:	f001 fcd1 	bl	8001d6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2140      	movs	r1, #64	; 0x40
 80003ce:	483b      	ldr	r0, [pc, #236]	; (80004bc <fsm_run+0x304>)
 80003d0:	f001 fccc 	bl	8001d6c <HAL_GPIO_WritePin>

				dis1 = timeRED + timeGREEN - counter1;
 80003d4:	4b31      	ldr	r3, [pc, #196]	; (800049c <fsm_run+0x2e4>)
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	4b34      	ldr	r3, [pc, #208]	; (80004ac <fsm_run+0x2f4>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	441a      	add	r2, r3
 80003de:	4b35      	ldr	r3, [pc, #212]	; (80004b4 <fsm_run+0x2fc>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	1ad3      	subs	r3, r2, r3
 80003e4:	4a36      	ldr	r2, [pc, #216]	; (80004c0 <fsm_run+0x308>)
 80003e6:	6013      	str	r3, [r2, #0]
 80003e8:	e027      	b.n	800043a <fsm_run+0x282>
			}
			else if(counter1 <= timeRED + timeYELLOW + timeGREEN){
 80003ea:	4b2c      	ldr	r3, [pc, #176]	; (800049c <fsm_run+0x2e4>)
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	4b2d      	ldr	r3, [pc, #180]	; (80004a4 <fsm_run+0x2ec>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	441a      	add	r2, r3
 80003f4:	4b2d      	ldr	r3, [pc, #180]	; (80004ac <fsm_run+0x2f4>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	441a      	add	r2, r3
 80003fa:	4b2e      	ldr	r3, [pc, #184]	; (80004b4 <fsm_run+0x2fc>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	429a      	cmp	r2, r3
 8000400:	db1b      	blt.n	800043a <fsm_run+0x282>

				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	2110      	movs	r1, #16
 8000406:	482d      	ldr	r0, [pc, #180]	; (80004bc <fsm_run+0x304>)
 8000408:	f001 fcb0 	bl	8001d6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	2120      	movs	r1, #32
 8000410:	482a      	ldr	r0, [pc, #168]	; (80004bc <fsm_run+0x304>)
 8000412:	f001 fcab 	bl	8001d6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000416:	2201      	movs	r2, #1
 8000418:	2140      	movs	r1, #64	; 0x40
 800041a:	4828      	ldr	r0, [pc, #160]	; (80004bc <fsm_run+0x304>)
 800041c:	f001 fca6 	bl	8001d6c <HAL_GPIO_WritePin>

				dis1 = timeRED + timeYELLOW + timeGREEN - counter1;
 8000420:	4b1e      	ldr	r3, [pc, #120]	; (800049c <fsm_run+0x2e4>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <fsm_run+0x2ec>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	441a      	add	r2, r3
 800042a:	4b20      	ldr	r3, [pc, #128]	; (80004ac <fsm_run+0x2f4>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	441a      	add	r2, r3
 8000430:	4b20      	ldr	r3, [pc, #128]	; (80004b4 <fsm_run+0x2fc>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	1ad3      	subs	r3, r2, r3
 8000436:	4a22      	ldr	r2, [pc, #136]	; (80004c0 <fsm_run+0x308>)
 8000438:	6013      	str	r3, [r2, #0]
			}
			if(counter1 >= timeRED + timeYELLOW + timeGREEN) counter1 = -1;
 800043a:	4b18      	ldr	r3, [pc, #96]	; (800049c <fsm_run+0x2e4>)
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <fsm_run+0x2ec>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	441a      	add	r2, r3
 8000444:	4b19      	ldr	r3, [pc, #100]	; (80004ac <fsm_run+0x2f4>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	441a      	add	r2, r3
 800044a:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <fsm_run+0x2fc>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	429a      	cmp	r2, r3
 8000450:	dc03      	bgt.n	800045a <fsm_run+0x2a2>
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <fsm_run+0x2fc>)
 8000454:	f04f 32ff 	mov.w	r2, #4294967295
 8000458:	601a      	str	r2, [r3, #0]

			if(counter2 <= timeGREEN){
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <fsm_run+0x300>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	4b13      	ldr	r3, [pc, #76]	; (80004ac <fsm_run+0x2f4>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	429a      	cmp	r2, r3
 8000464:	dc34      	bgt.n	80004d0 <fsm_run+0x318>

				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000466:	2201      	movs	r2, #1
 8000468:	2180      	movs	r1, #128	; 0x80
 800046a:	4814      	ldr	r0, [pc, #80]	; (80004bc <fsm_run+0x304>)
 800046c:	f001 fc7e 	bl	8001d6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000476:	4811      	ldr	r0, [pc, #68]	; (80004bc <fsm_run+0x304>)
 8000478:	f001 fc78 	bl	8001d6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000482:	480e      	ldr	r0, [pc, #56]	; (80004bc <fsm_run+0x304>)
 8000484:	f001 fc72 	bl	8001d6c <HAL_GPIO_WritePin>

				dis2 = timeGREEN - counter2;
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <fsm_run+0x2f4>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <fsm_run+0x300>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	1ad3      	subs	r3, r2, r3
 8000492:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <fsm_run+0x310>)
 8000494:	6013      	str	r3, [r2, #0]
 8000496:	e06a      	b.n	800056e <fsm_run+0x3b6>
 8000498:	20000060 	.word	0x20000060
 800049c:	20000000 	.word	0x20000000
 80004a0:	2000004c 	.word	0x2000004c
 80004a4:	20000008 	.word	0x20000008
 80004a8:	20000050 	.word	0x20000050
 80004ac:	20000004 	.word	0x20000004
 80004b0:	20000054 	.word	0x20000054
 80004b4:	20000044 	.word	0x20000044
 80004b8:	20000048 	.word	0x20000048
 80004bc:	40010800 	.word	0x40010800
 80004c0:	20000058 	.word	0x20000058
 80004c4:	66666667 	.word	0x66666667
 80004c8:	2000005c 	.word	0x2000005c
 80004cc:	20000080 	.word	0x20000080
			}
			else if(counter2 <= timeGREEN + timeYELLOW){
 80004d0:	4b83      	ldr	r3, [pc, #524]	; (80006e0 <fsm_run+0x528>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b83      	ldr	r3, [pc, #524]	; (80006e4 <fsm_run+0x52c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	441a      	add	r2, r3
 80004da:	4b83      	ldr	r3, [pc, #524]	; (80006e8 <fsm_run+0x530>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	429a      	cmp	r2, r3
 80004e0:	db1b      	blt.n	800051a <fsm_run+0x362>

				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	4881      	ldr	r0, [pc, #516]	; (80006ec <fsm_run+0x534>)
 80004e8:	f001 fc40 	bl	8001d6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f2:	487e      	ldr	r0, [pc, #504]	; (80006ec <fsm_run+0x534>)
 80004f4:	f001 fc3a 	bl	8001d6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fe:	487b      	ldr	r0, [pc, #492]	; (80006ec <fsm_run+0x534>)
 8000500:	f001 fc34 	bl	8001d6c <HAL_GPIO_WritePin>

				dis2 = timeGREEN + timeYELLOW - counter2;
 8000504:	4b76      	ldr	r3, [pc, #472]	; (80006e0 <fsm_run+0x528>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b76      	ldr	r3, [pc, #472]	; (80006e4 <fsm_run+0x52c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	441a      	add	r2, r3
 800050e:	4b76      	ldr	r3, [pc, #472]	; (80006e8 <fsm_run+0x530>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	1ad3      	subs	r3, r2, r3
 8000514:	4a76      	ldr	r2, [pc, #472]	; (80006f0 <fsm_run+0x538>)
 8000516:	6013      	str	r3, [r2, #0]
 8000518:	e029      	b.n	800056e <fsm_run+0x3b6>
			}
			else if(counter2 <= timeRED + timeYELLOW + timeGREEN){
 800051a:	4b76      	ldr	r3, [pc, #472]	; (80006f4 <fsm_run+0x53c>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	4b71      	ldr	r3, [pc, #452]	; (80006e4 <fsm_run+0x52c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	441a      	add	r2, r3
 8000524:	4b6e      	ldr	r3, [pc, #440]	; (80006e0 <fsm_run+0x528>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	441a      	add	r2, r3
 800052a:	4b6f      	ldr	r3, [pc, #444]	; (80006e8 <fsm_run+0x530>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	429a      	cmp	r2, r3
 8000530:	db1d      	blt.n	800056e <fsm_run+0x3b6>

				HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	486d      	ldr	r0, [pc, #436]	; (80006ec <fsm_run+0x534>)
 8000538:	f001 fc18 	bl	8001d6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000542:	486a      	ldr	r0, [pc, #424]	; (80006ec <fsm_run+0x534>)
 8000544:	f001 fc12 	bl	8001d6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800054e:	4867      	ldr	r0, [pc, #412]	; (80006ec <fsm_run+0x534>)
 8000550:	f001 fc0c 	bl	8001d6c <HAL_GPIO_WritePin>

				dis2 = timeRED + timeYELLOW + timeGREEN - counter2;
 8000554:	4b67      	ldr	r3, [pc, #412]	; (80006f4 <fsm_run+0x53c>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b62      	ldr	r3, [pc, #392]	; (80006e4 <fsm_run+0x52c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	441a      	add	r2, r3
 800055e:	4b60      	ldr	r3, [pc, #384]	; (80006e0 <fsm_run+0x528>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	441a      	add	r2, r3
 8000564:	4b60      	ldr	r3, [pc, #384]	; (80006e8 <fsm_run+0x530>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	4a61      	ldr	r2, [pc, #388]	; (80006f0 <fsm_run+0x538>)
 800056c:	6013      	str	r3, [r2, #0]
			}
			if(counter2 >= timeRED + timeYELLOW + timeGREEN) counter2 = -1;
 800056e:	4b61      	ldr	r3, [pc, #388]	; (80006f4 <fsm_run+0x53c>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	4b5c      	ldr	r3, [pc, #368]	; (80006e4 <fsm_run+0x52c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	441a      	add	r2, r3
 8000578:	4b59      	ldr	r3, [pc, #356]	; (80006e0 <fsm_run+0x528>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	441a      	add	r2, r3
 800057e:	4b5a      	ldr	r3, [pc, #360]	; (80006e8 <fsm_run+0x530>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	429a      	cmp	r2, r3
 8000584:	dc03      	bgt.n	800058e <fsm_run+0x3d6>
 8000586:	4b58      	ldr	r3, [pc, #352]	; (80006e8 <fsm_run+0x530>)
 8000588:	f04f 32ff 	mov.w	r2, #4294967295
 800058c:	601a      	str	r2, [r3, #0]

			setTimer1(1000);
 800058e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000592:	f001 f855 	bl	8001640 <setTimer1>
		}



		if (isButton1Pressed() == 1) {
 8000596:	f7ff fdd9 	bl	800014c <isButton1Pressed>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	f040 8319 	bne.w	8000bd4 <fsm_run+0xa1c>
			setTimer2(500);
 80005a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005a6:	f001 f865 	bl	8001674 <setTimer2>

			counter1 = 0;
 80005aa:	4b53      	ldr	r3, [pc, #332]	; (80006f8 <fsm_run+0x540>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
			counter2 = 0;
 80005b0:	4b4d      	ldr	r3, [pc, #308]	; (80006e8 <fsm_run+0x530>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]

			state = MODE_2;
 80005b6:	4b51      	ldr	r3, [pc, #324]	; (80006fc <fsm_run+0x544>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2110      	movs	r1, #16
 80005c0:	484a      	ldr	r0, [pc, #296]	; (80006ec <fsm_run+0x534>)
 80005c2:	f001 fbd3 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4848      	ldr	r0, [pc, #288]	; (80006ec <fsm_run+0x534>)
 80005cc:	f001 fbce 	bl	8001d6c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2120      	movs	r1, #32
 80005d4:	4845      	ldr	r0, [pc, #276]	; (80006ec <fsm_run+0x534>)
 80005d6:	f001 fbc9 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	4842      	ldr	r0, [pc, #264]	; (80006ec <fsm_run+0x534>)
 80005e2:	f001 fbc3 	bl	8001d6c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2140      	movs	r1, #64	; 0x40
 80005ea:	4840      	ldr	r0, [pc, #256]	; (80006ec <fsm_run+0x534>)
 80005ec:	f001 fbbe 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f6:	483d      	ldr	r0, [pc, #244]	; (80006ec <fsm_run+0x534>)
 80005f8:	f001 fbb8 	bl	8001d6c <HAL_GPIO_WritePin>
		}
		break;
 80005fc:	e2ea      	b.n	8000bd4 <fsm_run+0xa1c>
	case MODE_2:
		updateClockBuffer(0, 2, tempRED/10, tempRED%10);
 80005fe:	4b40      	ldr	r3, [pc, #256]	; (8000700 <fsm_run+0x548>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a40      	ldr	r2, [pc, #256]	; (8000704 <fsm_run+0x54c>)
 8000604:	fb82 1203 	smull	r1, r2, r2, r3
 8000608:	1092      	asrs	r2, r2, #2
 800060a:	17db      	asrs	r3, r3, #31
 800060c:	1ad0      	subs	r0, r2, r3
 800060e:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <fsm_run+0x548>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	4b3c      	ldr	r3, [pc, #240]	; (8000704 <fsm_run+0x54c>)
 8000614:	fb83 1302 	smull	r1, r3, r3, r2
 8000618:	1099      	asrs	r1, r3, #2
 800061a:	17d3      	asrs	r3, r2, #31
 800061c:	1ac9      	subs	r1, r1, r3
 800061e:	460b      	mov	r3, r1
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	440b      	add	r3, r1
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	1ad1      	subs	r1, r2, r3
 8000628:	460b      	mov	r3, r1
 800062a:	4602      	mov	r2, r0
 800062c:	2102      	movs	r1, #2
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fe46 	bl	80012c0 <updateClockBuffer>

		if (timer2_flag == 1) {
 8000634:	4b34      	ldr	r3, [pc, #208]	; (8000708 <fsm_run+0x550>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d10b      	bne.n	8000654 <fsm_run+0x49c>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800063c:	2110      	movs	r1, #16
 800063e:	482b      	ldr	r0, [pc, #172]	; (80006ec <fsm_run+0x534>)
 8000640:	f001 fbac 	bl	8001d9c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	4829      	ldr	r0, [pc, #164]	; (80006ec <fsm_run+0x534>)
 8000648:	f001 fba8 	bl	8001d9c <HAL_GPIO_TogglePin>
			setTimer2(500);
 800064c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000650:	f001 f810 	bl	8001674 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000654:	f7ff fd7a 	bl	800014c <isButton1Pressed>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d126      	bne.n	80006ac <fsm_run+0x4f4>
			setTimer2(500);
 800065e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000662:	f001 f807 	bl	8001674 <setTimer2>

			state = MODE_3;
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <fsm_run+0x544>)
 8000668:	2203      	movs	r2, #3
 800066a:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2110      	movs	r1, #16
 8000670:	481e      	ldr	r0, [pc, #120]	; (80006ec <fsm_run+0x534>)
 8000672:	f001 fb7b 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000676:	2201      	movs	r2, #1
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	481c      	ldr	r0, [pc, #112]	; (80006ec <fsm_run+0x534>)
 800067c:	f001 fb76 	bl	8001d6c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2120      	movs	r1, #32
 8000684:	4819      	ldr	r0, [pc, #100]	; (80006ec <fsm_run+0x534>)
 8000686:	f001 fb71 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000690:	4816      	ldr	r0, [pc, #88]	; (80006ec <fsm_run+0x534>)
 8000692:	f001 fb6b 	bl	8001d6c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2140      	movs	r1, #64	; 0x40
 800069a:	4814      	ldr	r0, [pc, #80]	; (80006ec <fsm_run+0x534>)
 800069c:	f001 fb66 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	4811      	ldr	r0, [pc, #68]	; (80006ec <fsm_run+0x534>)
 80006a8:	f001 fb60 	bl	8001d6c <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 80006ac:	f7ff fd60 	bl	8000170 <isButton2Pressed>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	f040 8290 	bne.w	8000bd8 <fsm_run+0xa20>
			setTimer2(500);
 80006b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006bc:	f000 ffda 	bl	8001674 <setTimer2>
			tempRED++;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <fsm_run+0x548>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <fsm_run+0x548>)
 80006c8:	6013      	str	r3, [r2, #0]
			if (tempRED >= 100) tempRED = 0;
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <fsm_run+0x548>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b63      	cmp	r3, #99	; 0x63
 80006d0:	dd02      	ble.n	80006d8 <fsm_run+0x520>
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <fsm_run+0x548>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
			state = MODI_2;
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <fsm_run+0x544>)
 80006da:	2214      	movs	r2, #20
 80006dc:	601a      	str	r2, [r3, #0]
		}
		break;
 80006de:	e27b      	b.n	8000bd8 <fsm_run+0xa20>
 80006e0:	20000004 	.word	0x20000004
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000048 	.word	0x20000048
 80006ec:	40010800 	.word	0x40010800
 80006f0:	2000005c 	.word	0x2000005c
 80006f4:	20000000 	.word	0x20000000
 80006f8:	20000044 	.word	0x20000044
 80006fc:	20000060 	.word	0x20000060
 8000700:	2000004c 	.word	0x2000004c
 8000704:	66666667 	.word	0x66666667
 8000708:	20000088 	.word	0x20000088
	case MODI_2:
		updateClockBuffer(0, 2, tempRED/10, tempRED%10);
 800070c:	4bb3      	ldr	r3, [pc, #716]	; (80009dc <fsm_run+0x824>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4ab3      	ldr	r2, [pc, #716]	; (80009e0 <fsm_run+0x828>)
 8000712:	fb82 1203 	smull	r1, r2, r2, r3
 8000716:	1092      	asrs	r2, r2, #2
 8000718:	17db      	asrs	r3, r3, #31
 800071a:	1ad0      	subs	r0, r2, r3
 800071c:	4baf      	ldr	r3, [pc, #700]	; (80009dc <fsm_run+0x824>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4baf      	ldr	r3, [pc, #700]	; (80009e0 <fsm_run+0x828>)
 8000722:	fb83 1302 	smull	r1, r3, r3, r2
 8000726:	1099      	asrs	r1, r3, #2
 8000728:	17d3      	asrs	r3, r2, #31
 800072a:	1ac9      	subs	r1, r1, r3
 800072c:	460b      	mov	r3, r1
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	440b      	add	r3, r1
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	1ad1      	subs	r1, r2, r3
 8000736:	460b      	mov	r3, r1
 8000738:	4602      	mov	r2, r0
 800073a:	2102      	movs	r1, #2
 800073c:	2000      	movs	r0, #0
 800073e:	f000 fdbf 	bl	80012c0 <updateClockBuffer>

		if (timer2_flag == 1) {
 8000742:	4ba8      	ldr	r3, [pc, #672]	; (80009e4 <fsm_run+0x82c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d10b      	bne.n	8000762 <fsm_run+0x5aa>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800074a:	2110      	movs	r1, #16
 800074c:	48a6      	ldr	r0, [pc, #664]	; (80009e8 <fsm_run+0x830>)
 800074e:	f001 fb25 	bl	8001d9c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 8000752:	2180      	movs	r1, #128	; 0x80
 8000754:	48a4      	ldr	r0, [pc, #656]	; (80009e8 <fsm_run+0x830>)
 8000756:	f001 fb21 	bl	8001d9c <HAL_GPIO_TogglePin>
			setTimer2(500);
 800075a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800075e:	f000 ff89 	bl	8001674 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000762:	f7ff fcf3 	bl	800014c <isButton1Pressed>
 8000766:	4603      	mov	r3, r0
 8000768:	2b01      	cmp	r3, #1
 800076a:	d126      	bne.n	80007ba <fsm_run+0x602>
			setTimer2(500);
 800076c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000770:	f000 ff80 	bl	8001674 <setTimer2>

			state = MODE_3;
 8000774:	4b9d      	ldr	r3, [pc, #628]	; (80009ec <fsm_run+0x834>)
 8000776:	2203      	movs	r2, #3
 8000778:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2110      	movs	r1, #16
 800077e:	489a      	ldr	r0, [pc, #616]	; (80009e8 <fsm_run+0x830>)
 8000780:	f001 faf4 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	4897      	ldr	r0, [pc, #604]	; (80009e8 <fsm_run+0x830>)
 800078a:	f001 faef 	bl	8001d6c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2120      	movs	r1, #32
 8000792:	4895      	ldr	r0, [pc, #596]	; (80009e8 <fsm_run+0x830>)
 8000794:	f001 faea 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079e:	4892      	ldr	r0, [pc, #584]	; (80009e8 <fsm_run+0x830>)
 80007a0:	f001 fae4 	bl	8001d6c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2140      	movs	r1, #64	; 0x40
 80007a8:	488f      	ldr	r0, [pc, #572]	; (80009e8 <fsm_run+0x830>)
 80007aa:	f001 fadf 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b4:	488c      	ldr	r0, [pc, #560]	; (80009e8 <fsm_run+0x830>)
 80007b6:	f001 fad9 	bl	8001d6c <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 80007ba:	f7ff fcd9 	bl	8000170 <isButton2Pressed>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d10f      	bne.n	80007e4 <fsm_run+0x62c>
			setTimer2(500);
 80007c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c8:	f000 ff54 	bl	8001674 <setTimer2>
			tempRED++;
 80007cc:	4b83      	ldr	r3, [pc, #524]	; (80009dc <fsm_run+0x824>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a82      	ldr	r2, [pc, #520]	; (80009dc <fsm_run+0x824>)
 80007d4:	6013      	str	r3, [r2, #0]
			if (tempRED >= 100) tempRED = 0;
 80007d6:	4b81      	ldr	r3, [pc, #516]	; (80009dc <fsm_run+0x824>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b63      	cmp	r3, #99	; 0x63
 80007dc:	dd02      	ble.n	80007e4 <fsm_run+0x62c>
 80007de:	4b7f      	ldr	r3, [pc, #508]	; (80009dc <fsm_run+0x824>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
		}

		if (isButton3Pressed() == 1) {
 80007e4:	f7ff fcd6 	bl	8000194 <isButton3Pressed>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	f040 81f6 	bne.w	8000bdc <fsm_run+0xa24>
			timeRED = tempRED;
 80007f0:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <fsm_run+0x824>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a7e      	ldr	r2, [pc, #504]	; (80009f0 <fsm_run+0x838>)
 80007f6:	6013      	str	r3, [r2, #0]
			state = MODE_2;
 80007f8:	4b7c      	ldr	r3, [pc, #496]	; (80009ec <fsm_run+0x834>)
 80007fa:	2202      	movs	r2, #2
 80007fc:	601a      	str	r2, [r3, #0]
		}
		break;
 80007fe:	e1ed      	b.n	8000bdc <fsm_run+0xa24>
	case MODE_3:
		updateClockBuffer(0, 3, tempYELLOW/10, tempYELLOW%10);
 8000800:	4b7c      	ldr	r3, [pc, #496]	; (80009f4 <fsm_run+0x83c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a76      	ldr	r2, [pc, #472]	; (80009e0 <fsm_run+0x828>)
 8000806:	fb82 1203 	smull	r1, r2, r2, r3
 800080a:	1092      	asrs	r2, r2, #2
 800080c:	17db      	asrs	r3, r3, #31
 800080e:	1ad0      	subs	r0, r2, r3
 8000810:	4b78      	ldr	r3, [pc, #480]	; (80009f4 <fsm_run+0x83c>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b72      	ldr	r3, [pc, #456]	; (80009e0 <fsm_run+0x828>)
 8000816:	fb83 1302 	smull	r1, r3, r3, r2
 800081a:	1099      	asrs	r1, r3, #2
 800081c:	17d3      	asrs	r3, r2, #31
 800081e:	1ac9      	subs	r1, r1, r3
 8000820:	460b      	mov	r3, r1
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	1ad1      	subs	r1, r2, r3
 800082a:	460b      	mov	r3, r1
 800082c:	4602      	mov	r2, r0
 800082e:	2103      	movs	r1, #3
 8000830:	2000      	movs	r0, #0
 8000832:	f000 fd45 	bl	80012c0 <updateClockBuffer>

		if (timer2_flag == 1) {
 8000836:	4b6b      	ldr	r3, [pc, #428]	; (80009e4 <fsm_run+0x82c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d10c      	bne.n	8000858 <fsm_run+0x6a0>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 800083e:	2120      	movs	r1, #32
 8000840:	4869      	ldr	r0, [pc, #420]	; (80009e8 <fsm_run+0x830>)
 8000842:	f001 faab 	bl	8001d9c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin);
 8000846:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084a:	4867      	ldr	r0, [pc, #412]	; (80009e8 <fsm_run+0x830>)
 800084c:	f001 faa6 	bl	8001d9c <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000850:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000854:	f000 ff0e 	bl	8001674 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000858:	f7ff fc78 	bl	800014c <isButton1Pressed>
 800085c:	4603      	mov	r3, r0
 800085e:	2b01      	cmp	r3, #1
 8000860:	d126      	bne.n	80008b0 <fsm_run+0x6f8>
			setTimer2(500);
 8000862:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000866:	f000 ff05 	bl	8001674 <setTimer2>

			state = MODE_4;
 800086a:	4b60      	ldr	r3, [pc, #384]	; (80009ec <fsm_run+0x834>)
 800086c:	2204      	movs	r2, #4
 800086e:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2110      	movs	r1, #16
 8000874:	485c      	ldr	r0, [pc, #368]	; (80009e8 <fsm_run+0x830>)
 8000876:	f001 fa79 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	485a      	ldr	r0, [pc, #360]	; (80009e8 <fsm_run+0x830>)
 8000880:	f001 fa74 	bl	8001d6c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2120      	movs	r1, #32
 8000888:	4857      	ldr	r0, [pc, #348]	; (80009e8 <fsm_run+0x830>)
 800088a:	f001 fa6f 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000894:	4854      	ldr	r0, [pc, #336]	; (80009e8 <fsm_run+0x830>)
 8000896:	f001 fa69 	bl	8001d6c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800089a:	2201      	movs	r2, #1
 800089c:	2140      	movs	r1, #64	; 0x40
 800089e:	4852      	ldr	r0, [pc, #328]	; (80009e8 <fsm_run+0x830>)
 80008a0:	f001 fa64 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008aa:	484f      	ldr	r0, [pc, #316]	; (80009e8 <fsm_run+0x830>)
 80008ac:	f001 fa5e 	bl	8001d6c <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 80008b0:	f7ff fc5e 	bl	8000170 <isButton2Pressed>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	f040 8192 	bne.w	8000be0 <fsm_run+0xa28>
			setTimer2(500);
 80008bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c0:	f000 fed8 	bl	8001674 <setTimer2>
			tempYELLOW++;
 80008c4:	4b4b      	ldr	r3, [pc, #300]	; (80009f4 <fsm_run+0x83c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4a4a      	ldr	r2, [pc, #296]	; (80009f4 <fsm_run+0x83c>)
 80008cc:	6013      	str	r3, [r2, #0]
			if (tempYELLOW >= 100) tempYELLOW = 0;
 80008ce:	4b49      	ldr	r3, [pc, #292]	; (80009f4 <fsm_run+0x83c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b63      	cmp	r3, #99	; 0x63
 80008d4:	dd02      	ble.n	80008dc <fsm_run+0x724>
 80008d6:	4b47      	ldr	r3, [pc, #284]	; (80009f4 <fsm_run+0x83c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
			state = MODI_3;
 80008dc:	4b43      	ldr	r3, [pc, #268]	; (80009ec <fsm_run+0x834>)
 80008de:	221e      	movs	r2, #30
 80008e0:	601a      	str	r2, [r3, #0]
		}
		break;
 80008e2:	e17d      	b.n	8000be0 <fsm_run+0xa28>
	case MODI_3:
		updateClockBuffer(0, 3, tempYELLOW/10, tempYELLOW%10);
 80008e4:	4b43      	ldr	r3, [pc, #268]	; (80009f4 <fsm_run+0x83c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a3d      	ldr	r2, [pc, #244]	; (80009e0 <fsm_run+0x828>)
 80008ea:	fb82 1203 	smull	r1, r2, r2, r3
 80008ee:	1092      	asrs	r2, r2, #2
 80008f0:	17db      	asrs	r3, r3, #31
 80008f2:	1ad0      	subs	r0, r2, r3
 80008f4:	4b3f      	ldr	r3, [pc, #252]	; (80009f4 <fsm_run+0x83c>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <fsm_run+0x828>)
 80008fa:	fb83 1302 	smull	r1, r3, r3, r2
 80008fe:	1099      	asrs	r1, r3, #2
 8000900:	17d3      	asrs	r3, r2, #31
 8000902:	1ac9      	subs	r1, r1, r3
 8000904:	460b      	mov	r3, r1
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	440b      	add	r3, r1
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	1ad1      	subs	r1, r2, r3
 800090e:	460b      	mov	r3, r1
 8000910:	4602      	mov	r2, r0
 8000912:	2103      	movs	r1, #3
 8000914:	2000      	movs	r0, #0
 8000916:	f000 fcd3 	bl	80012c0 <updateClockBuffer>

		if (timer2_flag == 1) {
 800091a:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <fsm_run+0x82c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d10c      	bne.n	800093c <fsm_run+0x784>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000922:	2120      	movs	r1, #32
 8000924:	4830      	ldr	r0, [pc, #192]	; (80009e8 <fsm_run+0x830>)
 8000926:	f001 fa39 	bl	8001d9c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin);
 800092a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092e:	482e      	ldr	r0, [pc, #184]	; (80009e8 <fsm_run+0x830>)
 8000930:	f001 fa34 	bl	8001d9c <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000934:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000938:	f000 fe9c 	bl	8001674 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 800093c:	f7ff fc06 	bl	800014c <isButton1Pressed>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d126      	bne.n	8000994 <fsm_run+0x7dc>
			setTimer2(500);
 8000946:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800094a:	f000 fe93 	bl	8001674 <setTimer2>

			state = MODE_4;
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <fsm_run+0x834>)
 8000950:	2204      	movs	r2, #4
 8000952:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2110      	movs	r1, #16
 8000958:	4823      	ldr	r0, [pc, #140]	; (80009e8 <fsm_run+0x830>)
 800095a:	f001 fa07 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	4821      	ldr	r0, [pc, #132]	; (80009e8 <fsm_run+0x830>)
 8000964:	f001 fa02 	bl	8001d6c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2120      	movs	r1, #32
 800096c:	481e      	ldr	r0, [pc, #120]	; (80009e8 <fsm_run+0x830>)
 800096e:	f001 f9fd 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000978:	481b      	ldr	r0, [pc, #108]	; (80009e8 <fsm_run+0x830>)
 800097a:	f001 f9f7 	bl	8001d6c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2140      	movs	r1, #64	; 0x40
 8000982:	4819      	ldr	r0, [pc, #100]	; (80009e8 <fsm_run+0x830>)
 8000984:	f001 f9f2 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800098e:	4816      	ldr	r0, [pc, #88]	; (80009e8 <fsm_run+0x830>)
 8000990:	f001 f9ec 	bl	8001d6c <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 8000994:	f7ff fbec 	bl	8000170 <isButton2Pressed>
 8000998:	4603      	mov	r3, r0
 800099a:	2b01      	cmp	r3, #1
 800099c:	d10f      	bne.n	80009be <fsm_run+0x806>
			setTimer2(500);
 800099e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a2:	f000 fe67 	bl	8001674 <setTimer2>
			tempYELLOW++;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <fsm_run+0x83c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <fsm_run+0x83c>)
 80009ae:	6013      	str	r3, [r2, #0]
			if (tempYELLOW >= 100) tempYELLOW = 0;
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <fsm_run+0x83c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b63      	cmp	r3, #99	; 0x63
 80009b6:	dd02      	ble.n	80009be <fsm_run+0x806>
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <fsm_run+0x83c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
		}

		if (isButton3Pressed() == 1) {
 80009be:	f7ff fbe9 	bl	8000194 <isButton3Pressed>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	f040 810d 	bne.w	8000be4 <fsm_run+0xa2c>
			tempYELLOW = tempYELLOW;
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <fsm_run+0x83c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a09      	ldr	r2, [pc, #36]	; (80009f4 <fsm_run+0x83c>)
 80009d0:	6013      	str	r3, [r2, #0]
			state = MODE_3;
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <fsm_run+0x834>)
 80009d4:	2203      	movs	r2, #3
 80009d6:	601a      	str	r2, [r3, #0]
		}
		break;
 80009d8:	e104      	b.n	8000be4 <fsm_run+0xa2c>
 80009da:	bf00      	nop
 80009dc:	2000004c 	.word	0x2000004c
 80009e0:	66666667 	.word	0x66666667
 80009e4:	20000088 	.word	0x20000088
 80009e8:	40010800 	.word	0x40010800
 80009ec:	20000060 	.word	0x20000060
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000050 	.word	0x20000050
	case MODE_4:
		updateClockBuffer(0, 4, tempGREEN/10, tempGREEN%10);
 80009f8:	4b7e      	ldr	r3, [pc, #504]	; (8000bf4 <fsm_run+0xa3c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a7e      	ldr	r2, [pc, #504]	; (8000bf8 <fsm_run+0xa40>)
 80009fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000a02:	1092      	asrs	r2, r2, #2
 8000a04:	17db      	asrs	r3, r3, #31
 8000a06:	1ad0      	subs	r0, r2, r3
 8000a08:	4b7a      	ldr	r3, [pc, #488]	; (8000bf4 <fsm_run+0xa3c>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b7a      	ldr	r3, [pc, #488]	; (8000bf8 <fsm_run+0xa40>)
 8000a0e:	fb83 1302 	smull	r1, r3, r3, r2
 8000a12:	1099      	asrs	r1, r3, #2
 8000a14:	17d3      	asrs	r3, r2, #31
 8000a16:	1ac9      	subs	r1, r1, r3
 8000a18:	460b      	mov	r3, r1
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	1ad1      	subs	r1, r2, r3
 8000a22:	460b      	mov	r3, r1
 8000a24:	4602      	mov	r2, r0
 8000a26:	2104      	movs	r1, #4
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 fc49 	bl	80012c0 <updateClockBuffer>

		if (timer2_flag == 1) {
 8000a2e:	4b73      	ldr	r3, [pc, #460]	; (8000bfc <fsm_run+0xa44>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d10c      	bne.n	8000a50 <fsm_run+0x898>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000a36:	2140      	movs	r1, #64	; 0x40
 8000a38:	4871      	ldr	r0, [pc, #452]	; (8000c00 <fsm_run+0xa48>)
 8000a3a:	f001 f9af 	bl	8001d9c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
 8000a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a42:	486f      	ldr	r0, [pc, #444]	; (8000c00 <fsm_run+0xa48>)
 8000a44:	f001 f9aa 	bl	8001d9c <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000a48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a4c:	f000 fe12 	bl	8001674 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000a50:	f7ff fb7c 	bl	800014c <isButton1Pressed>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d126      	bne.n	8000aa8 <fsm_run+0x8f0>
			setTimer2(500);
 8000a5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a5e:	f000 fe09 	bl	8001674 <setTimer2>

			state = RESET;
 8000a62:	4b68      	ldr	r3, [pc, #416]	; (8000c04 <fsm_run+0xa4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	4864      	ldr	r0, [pc, #400]	; (8000c00 <fsm_run+0xa48>)
 8000a6e:	f001 f97d 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	4862      	ldr	r0, [pc, #392]	; (8000c00 <fsm_run+0xa48>)
 8000a78:	f001 f978 	bl	8001d6c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2120      	movs	r1, #32
 8000a80:	485f      	ldr	r0, [pc, #380]	; (8000c00 <fsm_run+0xa48>)
 8000a82:	f001 f973 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	485c      	ldr	r0, [pc, #368]	; (8000c00 <fsm_run+0xa48>)
 8000a8e:	f001 f96d 	bl	8001d6c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2140      	movs	r1, #64	; 0x40
 8000a96:	485a      	ldr	r0, [pc, #360]	; (8000c00 <fsm_run+0xa48>)
 8000a98:	f001 f968 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa2:	4857      	ldr	r0, [pc, #348]	; (8000c00 <fsm_run+0xa48>)
 8000aa4:	f001 f962 	bl	8001d6c <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 8000aa8:	f7ff fb62 	bl	8000170 <isButton2Pressed>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	f040 809a 	bne.w	8000be8 <fsm_run+0xa30>
			setTimer2(500);
 8000ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab8:	f000 fddc 	bl	8001674 <setTimer2>
			tempGREEN++;
 8000abc:	4b4d      	ldr	r3, [pc, #308]	; (8000bf4 <fsm_run+0xa3c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	4a4c      	ldr	r2, [pc, #304]	; (8000bf4 <fsm_run+0xa3c>)
 8000ac4:	6013      	str	r3, [r2, #0]
			if (tempGREEN >= 100) tempGREEN = 0;
 8000ac6:	4b4b      	ldr	r3, [pc, #300]	; (8000bf4 <fsm_run+0xa3c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b63      	cmp	r3, #99	; 0x63
 8000acc:	dd02      	ble.n	8000ad4 <fsm_run+0x91c>
 8000ace:	4b49      	ldr	r3, [pc, #292]	; (8000bf4 <fsm_run+0xa3c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
			state = MODI_4;
 8000ad4:	4b4b      	ldr	r3, [pc, #300]	; (8000c04 <fsm_run+0xa4c>)
 8000ad6:	2228      	movs	r2, #40	; 0x28
 8000ad8:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ada:	e085      	b.n	8000be8 <fsm_run+0xa30>
	case MODI_4:
		updateClockBuffer(0, 4, tempGREEN/10, tempGREEN%10);
 8000adc:	4b45      	ldr	r3, [pc, #276]	; (8000bf4 <fsm_run+0xa3c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a45      	ldr	r2, [pc, #276]	; (8000bf8 <fsm_run+0xa40>)
 8000ae2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae6:	1092      	asrs	r2, r2, #2
 8000ae8:	17db      	asrs	r3, r3, #31
 8000aea:	1ad0      	subs	r0, r2, r3
 8000aec:	4b41      	ldr	r3, [pc, #260]	; (8000bf4 <fsm_run+0xa3c>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b41      	ldr	r3, [pc, #260]	; (8000bf8 <fsm_run+0xa40>)
 8000af2:	fb83 1302 	smull	r1, r3, r3, r2
 8000af6:	1099      	asrs	r1, r3, #2
 8000af8:	17d3      	asrs	r3, r2, #31
 8000afa:	1ac9      	subs	r1, r1, r3
 8000afc:	460b      	mov	r3, r1
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	440b      	add	r3, r1
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	1ad1      	subs	r1, r2, r3
 8000b06:	460b      	mov	r3, r1
 8000b08:	4602      	mov	r2, r0
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 fbd7 	bl	80012c0 <updateClockBuffer>

		if (timer2_flag == 1) {
 8000b12:	4b3a      	ldr	r3, [pc, #232]	; (8000bfc <fsm_run+0xa44>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d10c      	bne.n	8000b34 <fsm_run+0x97c>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	4838      	ldr	r0, [pc, #224]	; (8000c00 <fsm_run+0xa48>)
 8000b1e:	f001 f93d 	bl	8001d9c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
 8000b22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b26:	4836      	ldr	r0, [pc, #216]	; (8000c00 <fsm_run+0xa48>)
 8000b28:	f001 f938 	bl	8001d9c <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000b2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b30:	f000 fda0 	bl	8001674 <setTimer2>
		}

		if (isButton1Pressed() == 1) {
 8000b34:	f7ff fb0a 	bl	800014c <isButton1Pressed>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d126      	bne.n	8000b8c <fsm_run+0x9d4>
			setTimer2(500);
 8000b3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b42:	f000 fd97 	bl	8001674 <setTimer2>

			state = RESET;
 8000b46:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <fsm_run+0xa4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2110      	movs	r1, #16
 8000b50:	482b      	ldr	r0, [pc, #172]	; (8000c00 <fsm_run+0xa48>)
 8000b52:	f001 f90b 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	4829      	ldr	r0, [pc, #164]	; (8000c00 <fsm_run+0xa48>)
 8000b5c:	f001 f906 	bl	8001d6c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2120      	movs	r1, #32
 8000b64:	4826      	ldr	r0, [pc, #152]	; (8000c00 <fsm_run+0xa48>)
 8000b66:	f001 f901 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, GPIO_PIN_SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b70:	4823      	ldr	r0, [pc, #140]	; (8000c00 <fsm_run+0xa48>)
 8000b72:	f001 f8fb 	bl	8001d6c <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2140      	movs	r1, #64	; 0x40
 8000b7a:	4821      	ldr	r0, [pc, #132]	; (8000c00 <fsm_run+0xa48>)
 8000b7c:	f001 f8f6 	bl	8001d6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b86:	481e      	ldr	r0, [pc, #120]	; (8000c00 <fsm_run+0xa48>)
 8000b88:	f001 f8f0 	bl	8001d6c <HAL_GPIO_WritePin>
		}

		if (isButton2Pressed() == 1) {
 8000b8c:	f7ff faf0 	bl	8000170 <isButton2Pressed>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d10f      	bne.n	8000bb6 <fsm_run+0x9fe>
			setTimer2(500);
 8000b96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b9a:	f000 fd6b 	bl	8001674 <setTimer2>
			tempGREEN++;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <fsm_run+0xa3c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <fsm_run+0xa3c>)
 8000ba6:	6013      	str	r3, [r2, #0]
			if (tempGREEN >= 100) tempGREEN = 0;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <fsm_run+0xa3c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b63      	cmp	r3, #99	; 0x63
 8000bae:	dd02      	ble.n	8000bb6 <fsm_run+0x9fe>
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <fsm_run+0xa3c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
		}

		if (isButton3Pressed() == 1) {
 8000bb6:	f7ff faed 	bl	8000194 <isButton3Pressed>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d115      	bne.n	8000bec <fsm_run+0xa34>
			tempGREEN = tempGREEN;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <fsm_run+0xa3c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <fsm_run+0xa3c>)
 8000bc6:	6013      	str	r3, [r2, #0]
			state = MODE_4;
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <fsm_run+0xa4c>)
 8000bca:	2204      	movs	r2, #4
 8000bcc:	601a      	str	r2, [r3, #0]
		}
		break;
 8000bce:	e00d      	b.n	8000bec <fsm_run+0xa34>
	default:
		break;
 8000bd0:	bf00      	nop
 8000bd2:	e00c      	b.n	8000bee <fsm_run+0xa36>
		break;
 8000bd4:	bf00      	nop
 8000bd6:	e00a      	b.n	8000bee <fsm_run+0xa36>
		break;
 8000bd8:	bf00      	nop
 8000bda:	e008      	b.n	8000bee <fsm_run+0xa36>
		break;
 8000bdc:	bf00      	nop
 8000bde:	e006      	b.n	8000bee <fsm_run+0xa36>
		break;
 8000be0:	bf00      	nop
 8000be2:	e004      	b.n	8000bee <fsm_run+0xa36>
		break;
 8000be4:	bf00      	nop
 8000be6:	e002      	b.n	8000bee <fsm_run+0xa36>
		break;
 8000be8:	bf00      	nop
 8000bea:	e000      	b.n	8000bee <fsm_run+0xa36>
		break;
 8000bec:	bf00      	nop
	}
}
 8000bee:	bf00      	nop
 8000bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000054 	.word	0x20000054
 8000bf8:	66666667 	.word	0x66666667
 8000bfc:	20000088 	.word	0x20000088
 8000c00:	40010800 	.word	0x40010800
 8000c04:	20000060 	.word	0x20000060

08000c08 <display7SEG>:
 *      Author: Admin
 */

#include "global.h"

void display7SEG(int num){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b09      	cmp	r3, #9
 8000c14:	f200 8180 	bhi.w	8000f18 <display7SEG+0x310>
 8000c18:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <display7SEG+0x18>)
 8000c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1e:	bf00      	nop
 8000c20:	08000c49 	.word	0x08000c49
 8000c24:	08000c91 	.word	0x08000c91
 8000c28:	08000cd9 	.word	0x08000cd9
 8000c2c:	08000d21 	.word	0x08000d21
 8000c30:	08000d69 	.word	0x08000d69
 8000c34:	08000db1 	.word	0x08000db1
 8000c38:	08000df9 	.word	0x08000df9
 8000c3c:	08000e41 	.word	0x08000e41
 8000c40:	08000e89 	.word	0x08000e89
 8000c44:	08000ed1 	.word	0x08000ed1
	switch(num){
	case 0:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	48b5      	ldr	r0, [pc, #724]	; (8000f24 <display7SEG+0x31c>)
 8000c4e:	f001 f88d 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000c52:	2200      	movs	r2, #0
 8000c54:	2102      	movs	r1, #2
 8000c56:	48b3      	ldr	r0, [pc, #716]	; (8000f24 <display7SEG+0x31c>)
 8000c58:	f001 f888 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2104      	movs	r1, #4
 8000c60:	48b0      	ldr	r0, [pc, #704]	; (8000f24 <display7SEG+0x31c>)
 8000c62:	f001 f883 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000c66:	2200      	movs	r2, #0
 8000c68:	2108      	movs	r1, #8
 8000c6a:	48ae      	ldr	r0, [pc, #696]	; (8000f24 <display7SEG+0x31c>)
 8000c6c:	f001 f87e 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000c70:	2200      	movs	r2, #0
 8000c72:	2110      	movs	r1, #16
 8000c74:	48ab      	ldr	r0, [pc, #684]	; (8000f24 <display7SEG+0x31c>)
 8000c76:	f001 f879 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	48a9      	ldr	r0, [pc, #676]	; (8000f24 <display7SEG+0x31c>)
 8000c80:	f001 f874 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000c84:	2201      	movs	r2, #1
 8000c86:	2140      	movs	r1, #64	; 0x40
 8000c88:	48a6      	ldr	r0, [pc, #664]	; (8000f24 <display7SEG+0x31c>)
 8000c8a:	f001 f86f 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 8000c8e:	e144      	b.n	8000f1a <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 8000c90:	2201      	movs	r2, #1
 8000c92:	2101      	movs	r1, #1
 8000c94:	48a3      	ldr	r0, [pc, #652]	; (8000f24 <display7SEG+0x31c>)
 8000c96:	f001 f869 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	48a1      	ldr	r0, [pc, #644]	; (8000f24 <display7SEG+0x31c>)
 8000ca0:	f001 f864 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	489e      	ldr	r0, [pc, #632]	; (8000f24 <display7SEG+0x31c>)
 8000caa:	f001 f85f 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2108      	movs	r1, #8
 8000cb2:	489c      	ldr	r0, [pc, #624]	; (8000f24 <display7SEG+0x31c>)
 8000cb4:	f001 f85a 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2110      	movs	r1, #16
 8000cbc:	4899      	ldr	r0, [pc, #612]	; (8000f24 <display7SEG+0x31c>)
 8000cbe:	f001 f855 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	4897      	ldr	r0, [pc, #604]	; (8000f24 <display7SEG+0x31c>)
 8000cc8:	f001 f850 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2140      	movs	r1, #64	; 0x40
 8000cd0:	4894      	ldr	r0, [pc, #592]	; (8000f24 <display7SEG+0x31c>)
 8000cd2:	f001 f84b 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 8000cd6:	e120      	b.n	8000f1a <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4891      	ldr	r0, [pc, #580]	; (8000f24 <display7SEG+0x31c>)
 8000cde:	f001 f845 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	488f      	ldr	r0, [pc, #572]	; (8000f24 <display7SEG+0x31c>)
 8000ce8:	f001 f840 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_SET ) ;
 8000cec:	2201      	movs	r2, #1
 8000cee:	2104      	movs	r1, #4
 8000cf0:	488c      	ldr	r0, [pc, #560]	; (8000f24 <display7SEG+0x31c>)
 8000cf2:	f001 f83b 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	488a      	ldr	r0, [pc, #552]	; (8000f24 <display7SEG+0x31c>)
 8000cfc:	f001 f836 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000d00:	2200      	movs	r2, #0
 8000d02:	2110      	movs	r1, #16
 8000d04:	4887      	ldr	r0, [pc, #540]	; (8000f24 <display7SEG+0x31c>)
 8000d06:	f001 f831 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2120      	movs	r1, #32
 8000d0e:	4885      	ldr	r0, [pc, #532]	; (8000f24 <display7SEG+0x31c>)
 8000d10:	f001 f82c 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000d14:	2200      	movs	r2, #0
 8000d16:	2140      	movs	r1, #64	; 0x40
 8000d18:	4882      	ldr	r0, [pc, #520]	; (8000f24 <display7SEG+0x31c>)
 8000d1a:	f001 f827 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 8000d1e:	e0fc      	b.n	8000f1a <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000d20:	2200      	movs	r2, #0
 8000d22:	2101      	movs	r1, #1
 8000d24:	487f      	ldr	r0, [pc, #508]	; (8000f24 <display7SEG+0x31c>)
 8000d26:	f001 f821 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	487d      	ldr	r0, [pc, #500]	; (8000f24 <display7SEG+0x31c>)
 8000d30:	f001 f81c 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000d34:	2200      	movs	r2, #0
 8000d36:	2104      	movs	r1, #4
 8000d38:	487a      	ldr	r0, [pc, #488]	; (8000f24 <display7SEG+0x31c>)
 8000d3a:	f001 f817 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2108      	movs	r1, #8
 8000d42:	4878      	ldr	r0, [pc, #480]	; (8000f24 <display7SEG+0x31c>)
 8000d44:	f001 f812 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	4875      	ldr	r0, [pc, #468]	; (8000f24 <display7SEG+0x31c>)
 8000d4e:	f001 f80d 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000d52:	2201      	movs	r2, #1
 8000d54:	2120      	movs	r1, #32
 8000d56:	4873      	ldr	r0, [pc, #460]	; (8000f24 <display7SEG+0x31c>)
 8000d58:	f001 f808 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2140      	movs	r1, #64	; 0x40
 8000d60:	4870      	ldr	r0, [pc, #448]	; (8000f24 <display7SEG+0x31c>)
 8000d62:	f001 f803 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 8000d66:	e0d8      	b.n	8000f1a <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_SET ) ;
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	486d      	ldr	r0, [pc, #436]	; (8000f24 <display7SEG+0x31c>)
 8000d6e:	f000 fffd 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000d72:	2200      	movs	r2, #0
 8000d74:	2102      	movs	r1, #2
 8000d76:	486b      	ldr	r0, [pc, #428]	; (8000f24 <display7SEG+0x31c>)
 8000d78:	f000 fff8 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2104      	movs	r1, #4
 8000d80:	4868      	ldr	r0, [pc, #416]	; (8000f24 <display7SEG+0x31c>)
 8000d82:	f000 fff3 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000d86:	2201      	movs	r2, #1
 8000d88:	2108      	movs	r1, #8
 8000d8a:	4866      	ldr	r0, [pc, #408]	; (8000f24 <display7SEG+0x31c>)
 8000d8c:	f000 ffee 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000d90:	2201      	movs	r2, #1
 8000d92:	2110      	movs	r1, #16
 8000d94:	4863      	ldr	r0, [pc, #396]	; (8000f24 <display7SEG+0x31c>)
 8000d96:	f000 ffe9 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	4861      	ldr	r0, [pc, #388]	; (8000f24 <display7SEG+0x31c>)
 8000da0:	f000 ffe4 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000da4:	2200      	movs	r2, #0
 8000da6:	2140      	movs	r1, #64	; 0x40
 8000da8:	485e      	ldr	r0, [pc, #376]	; (8000f24 <display7SEG+0x31c>)
 8000daa:	f000 ffdf 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 8000dae:	e0b4      	b.n	8000f1a <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000db0:	2200      	movs	r2, #0
 8000db2:	2101      	movs	r1, #1
 8000db4:	485b      	ldr	r0, [pc, #364]	; (8000f24 <display7SEG+0x31c>)
 8000db6:	f000 ffd9 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	4859      	ldr	r0, [pc, #356]	; (8000f24 <display7SEG+0x31c>)
 8000dc0:	f000 ffd4 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	4856      	ldr	r0, [pc, #344]	; (8000f24 <display7SEG+0x31c>)
 8000dca:	f000 ffcf 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2108      	movs	r1, #8
 8000dd2:	4854      	ldr	r0, [pc, #336]	; (8000f24 <display7SEG+0x31c>)
 8000dd4:	f000 ffca 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2110      	movs	r1, #16
 8000ddc:	4851      	ldr	r0, [pc, #324]	; (8000f24 <display7SEG+0x31c>)
 8000dde:	f000 ffc5 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000de2:	2200      	movs	r2, #0
 8000de4:	2120      	movs	r1, #32
 8000de6:	484f      	ldr	r0, [pc, #316]	; (8000f24 <display7SEG+0x31c>)
 8000de8:	f000 ffc0 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000dec:	2200      	movs	r2, #0
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	484c      	ldr	r0, [pc, #304]	; (8000f24 <display7SEG+0x31c>)
 8000df2:	f000 ffbb 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 8000df6:	e090      	b.n	8000f1a <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	4849      	ldr	r0, [pc, #292]	; (8000f24 <display7SEG+0x31c>)
 8000dfe:	f000 ffb5 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_SET ) ;
 8000e02:	2201      	movs	r2, #1
 8000e04:	2102      	movs	r1, #2
 8000e06:	4847      	ldr	r0, [pc, #284]	; (8000f24 <display7SEG+0x31c>)
 8000e08:	f000 ffb0 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2104      	movs	r1, #4
 8000e10:	4844      	ldr	r0, [pc, #272]	; (8000f24 <display7SEG+0x31c>)
 8000e12:	f000 ffab 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000e16:	2200      	movs	r2, #0
 8000e18:	2108      	movs	r1, #8
 8000e1a:	4842      	ldr	r0, [pc, #264]	; (8000f24 <display7SEG+0x31c>)
 8000e1c:	f000 ffa6 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000e20:	2200      	movs	r2, #0
 8000e22:	2110      	movs	r1, #16
 8000e24:	483f      	ldr	r0, [pc, #252]	; (8000f24 <display7SEG+0x31c>)
 8000e26:	f000 ffa1 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2120      	movs	r1, #32
 8000e2e:	483d      	ldr	r0, [pc, #244]	; (8000f24 <display7SEG+0x31c>)
 8000e30:	f000 ff9c 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000e34:	2200      	movs	r2, #0
 8000e36:	2140      	movs	r1, #64	; 0x40
 8000e38:	483a      	ldr	r0, [pc, #232]	; (8000f24 <display7SEG+0x31c>)
 8000e3a:	f000 ff97 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 8000e3e:	e06c      	b.n	8000f1a <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000e40:	2200      	movs	r2, #0
 8000e42:	2101      	movs	r1, #1
 8000e44:	4837      	ldr	r0, [pc, #220]	; (8000f24 <display7SEG+0x31c>)
 8000e46:	f000 ff91 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4835      	ldr	r0, [pc, #212]	; (8000f24 <display7SEG+0x31c>)
 8000e50:	f000 ff8c 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000e54:	2200      	movs	r2, #0
 8000e56:	2104      	movs	r1, #4
 8000e58:	4832      	ldr	r0, [pc, #200]	; (8000f24 <display7SEG+0x31c>)
 8000e5a:	f000 ff87 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_SET ) ;
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2108      	movs	r1, #8
 8000e62:	4830      	ldr	r0, [pc, #192]	; (8000f24 <display7SEG+0x31c>)
 8000e64:	f000 ff82 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	482d      	ldr	r0, [pc, #180]	; (8000f24 <display7SEG+0x31c>)
 8000e6e:	f000 ff7d 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_SET ) ;
 8000e72:	2201      	movs	r2, #1
 8000e74:	2120      	movs	r1, #32
 8000e76:	482b      	ldr	r0, [pc, #172]	; (8000f24 <display7SEG+0x31c>)
 8000e78:	f000 ff78 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_SET ) ;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2140      	movs	r1, #64	; 0x40
 8000e80:	4828      	ldr	r0, [pc, #160]	; (8000f24 <display7SEG+0x31c>)
 8000e82:	f000 ff73 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 8000e86:	e048      	b.n	8000f1a <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4825      	ldr	r0, [pc, #148]	; (8000f24 <display7SEG+0x31c>)
 8000e8e:	f000 ff6d 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000e92:	2200      	movs	r2, #0
 8000e94:	2102      	movs	r1, #2
 8000e96:	4823      	ldr	r0, [pc, #140]	; (8000f24 <display7SEG+0x31c>)
 8000e98:	f000 ff68 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2104      	movs	r1, #4
 8000ea0:	4820      	ldr	r0, [pc, #128]	; (8000f24 <display7SEG+0x31c>)
 8000ea2:	f000 ff63 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2108      	movs	r1, #8
 8000eaa:	481e      	ldr	r0, [pc, #120]	; (8000f24 <display7SEG+0x31c>)
 8000eac:	f000 ff5e 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_RESET ) ;
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	481b      	ldr	r0, [pc, #108]	; (8000f24 <display7SEG+0x31c>)
 8000eb6:	f000 ff59 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	4819      	ldr	r0, [pc, #100]	; (8000f24 <display7SEG+0x31c>)
 8000ec0:	f000 ff54 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2140      	movs	r1, #64	; 0x40
 8000ec8:	4816      	ldr	r0, [pc, #88]	; (8000f24 <display7SEG+0x31c>)
 8000eca:	f000 ff4f 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 8000ece:	e024      	b.n	8000f1a <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin ( A_GPIO_Port , A_Pin , GPIO_PIN_RESET ) ;
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4813      	ldr	r0, [pc, #76]	; (8000f24 <display7SEG+0x31c>)
 8000ed6:	f000 ff49 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B_GPIO_Port , B_Pin , GPIO_PIN_RESET ) ;
 8000eda:	2200      	movs	r2, #0
 8000edc:	2102      	movs	r1, #2
 8000ede:	4811      	ldr	r0, [pc, #68]	; (8000f24 <display7SEG+0x31c>)
 8000ee0:	f000 ff44 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C_GPIO_Port , C_Pin , GPIO_PIN_RESET ) ;
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	480e      	ldr	r0, [pc, #56]	; (8000f24 <display7SEG+0x31c>)
 8000eea:	f000 ff3f 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D_GPIO_Port , D_Pin , GPIO_PIN_RESET ) ;
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	480c      	ldr	r0, [pc, #48]	; (8000f24 <display7SEG+0x31c>)
 8000ef4:	f000 ff3a 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E_GPIO_Port , E_Pin , GPIO_PIN_SET ) ;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2110      	movs	r1, #16
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <display7SEG+0x31c>)
 8000efe:	f000 ff35 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F_GPIO_Port , F_Pin , GPIO_PIN_RESET ) ;
 8000f02:	2200      	movs	r2, #0
 8000f04:	2120      	movs	r1, #32
 8000f06:	4807      	ldr	r0, [pc, #28]	; (8000f24 <display7SEG+0x31c>)
 8000f08:	f000 ff30 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G_GPIO_Port , G_Pin , GPIO_PIN_RESET ) ;
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2140      	movs	r1, #64	; 0x40
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <display7SEG+0x31c>)
 8000f12:	f000 ff2b 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 8000f16:	e000      	b.n	8000f1a <display7SEG+0x312>
	default:
		break;
 8000f18:	bf00      	nop
	}
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40010c00 	.word	0x40010c00

08000f28 <display7SEG0>:
void display7SEG0(int num){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b09      	cmp	r3, #9
 8000f34:	f200 81bc 	bhi.w	80012b0 <display7SEG0+0x388>
 8000f38:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <display7SEG0+0x18>)
 8000f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3e:	bf00      	nop
 8000f40:	08000f69 	.word	0x08000f69
 8000f44:	08000fbd 	.word	0x08000fbd
 8000f48:	08001011 	.word	0x08001011
 8000f4c:	08001065 	.word	0x08001065
 8000f50:	080010b9 	.word	0x080010b9
 8000f54:	0800110d 	.word	0x0800110d
 8000f58:	08001161 	.word	0x08001161
 8000f5c:	080011b5 	.word	0x080011b5
 8000f60:	08001209 	.word	0x08001209
 8000f64:	0800125d 	.word	0x0800125d
	switch(num){
	case 0:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	48d3      	ldr	r0, [pc, #844]	; (80012bc <display7SEG0+0x394>)
 8000f6e:	f000 fefd 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f78:	48d0      	ldr	r0, [pc, #832]	; (80012bc <display7SEG0+0x394>)
 8000f7a:	f000 fef7 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f84:	48cd      	ldr	r0, [pc, #820]	; (80012bc <display7SEG0+0x394>)
 8000f86:	f000 fef1 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f90:	48ca      	ldr	r0, [pc, #808]	; (80012bc <display7SEG0+0x394>)
 8000f92:	f000 feeb 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9c:	48c7      	ldr	r0, [pc, #796]	; (80012bc <display7SEG0+0x394>)
 8000f9e:	f000 fee5 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa8:	48c4      	ldr	r0, [pc, #784]	; (80012bc <display7SEG0+0x394>)
 8000faa:	f000 fedf 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb4:	48c1      	ldr	r0, [pc, #772]	; (80012bc <display7SEG0+0x394>)
 8000fb6:	f000 fed9 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 8000fba:	e17a      	b.n	80012b2 <display7SEG0+0x38a>
	case 1:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_SET ) ;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2180      	movs	r1, #128	; 0x80
 8000fc0:	48be      	ldr	r0, [pc, #760]	; (80012bc <display7SEG0+0x394>)
 8000fc2:	f000 fed3 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fcc:	48bb      	ldr	r0, [pc, #748]	; (80012bc <display7SEG0+0x394>)
 8000fce:	f000 fecd 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd8:	48b8      	ldr	r0, [pc, #736]	; (80012bc <display7SEG0+0x394>)
 8000fda:	f000 fec7 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe4:	48b5      	ldr	r0, [pc, #724]	; (80012bc <display7SEG0+0x394>)
 8000fe6:	f000 fec1 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff0:	48b2      	ldr	r0, [pc, #712]	; (80012bc <display7SEG0+0x394>)
 8000ff2:	f000 febb 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffc:	48af      	ldr	r0, [pc, #700]	; (80012bc <display7SEG0+0x394>)
 8000ffe:	f000 feb5 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001008:	48ac      	ldr	r0, [pc, #688]	; (80012bc <display7SEG0+0x394>)
 800100a:	f000 feaf 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 800100e:	e150      	b.n	80012b2 <display7SEG0+0x38a>
	case 2:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8001010:	2200      	movs	r2, #0
 8001012:	2180      	movs	r1, #128	; 0x80
 8001014:	48a9      	ldr	r0, [pc, #676]	; (80012bc <display7SEG0+0x394>)
 8001016:	f000 fea9 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001020:	48a6      	ldr	r0, [pc, #664]	; (80012bc <display7SEG0+0x394>)
 8001022:	f000 fea3 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_SET ) ;
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102c:	48a3      	ldr	r0, [pc, #652]	; (80012bc <display7SEG0+0x394>)
 800102e:	f000 fe9d 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001038:	48a0      	ldr	r0, [pc, #640]	; (80012bc <display7SEG0+0x394>)
 800103a:	f000 fe97 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001044:	489d      	ldr	r0, [pc, #628]	; (80012bc <display7SEG0+0x394>)
 8001046:	f000 fe91 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 800104a:	2201      	movs	r2, #1
 800104c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001050:	489a      	ldr	r0, [pc, #616]	; (80012bc <display7SEG0+0x394>)
 8001052:	f000 fe8b 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105c:	4897      	ldr	r0, [pc, #604]	; (80012bc <display7SEG0+0x394>)
 800105e:	f000 fe85 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 8001062:	e126      	b.n	80012b2 <display7SEG0+0x38a>
	case 3:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8001064:	2200      	movs	r2, #0
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	4894      	ldr	r0, [pc, #592]	; (80012bc <display7SEG0+0x394>)
 800106a:	f000 fe7f 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001074:	4891      	ldr	r0, [pc, #580]	; (80012bc <display7SEG0+0x394>)
 8001076:	f000 fe79 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001080:	488e      	ldr	r0, [pc, #568]	; (80012bc <display7SEG0+0x394>)
 8001082:	f000 fe73 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108c:	488b      	ldr	r0, [pc, #556]	; (80012bc <display7SEG0+0x394>)
 800108e:	f000 fe6d 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001098:	4888      	ldr	r0, [pc, #544]	; (80012bc <display7SEG0+0x394>)
 800109a:	f000 fe67 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 800109e:	2201      	movs	r2, #1
 80010a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a4:	4885      	ldr	r0, [pc, #532]	; (80012bc <display7SEG0+0x394>)
 80010a6:	f000 fe61 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b0:	4882      	ldr	r0, [pc, #520]	; (80012bc <display7SEG0+0x394>)
 80010b2:	f000 fe5b 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 80010b6:	e0fc      	b.n	80012b2 <display7SEG0+0x38a>
	case 4:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_SET ) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	487f      	ldr	r0, [pc, #508]	; (80012bc <display7SEG0+0x394>)
 80010be:	f000 fe55 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c8:	487c      	ldr	r0, [pc, #496]	; (80012bc <display7SEG0+0x394>)
 80010ca:	f000 fe4f 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d4:	4879      	ldr	r0, [pc, #484]	; (80012bc <display7SEG0+0x394>)
 80010d6:	f000 fe49 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e0:	4876      	ldr	r0, [pc, #472]	; (80012bc <display7SEG0+0x394>)
 80010e2:	f000 fe43 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ec:	4873      	ldr	r0, [pc, #460]	; (80012bc <display7SEG0+0x394>)
 80010ee:	f000 fe3d 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f8:	4870      	ldr	r0, [pc, #448]	; (80012bc <display7SEG0+0x394>)
 80010fa:	f000 fe37 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001104:	486d      	ldr	r0, [pc, #436]	; (80012bc <display7SEG0+0x394>)
 8001106:	f000 fe31 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 800110a:	e0d2      	b.n	80012b2 <display7SEG0+0x38a>
	case 5:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 800110c:	2200      	movs	r2, #0
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	486a      	ldr	r0, [pc, #424]	; (80012bc <display7SEG0+0x394>)
 8001112:	f000 fe2b 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_SET ) ;
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111c:	4867      	ldr	r0, [pc, #412]	; (80012bc <display7SEG0+0x394>)
 800111e:	f000 fe25 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001128:	4864      	ldr	r0, [pc, #400]	; (80012bc <display7SEG0+0x394>)
 800112a:	f000 fe1f 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001134:	4861      	ldr	r0, [pc, #388]	; (80012bc <display7SEG0+0x394>)
 8001136:	f000 fe19 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001140:	485e      	ldr	r0, [pc, #376]	; (80012bc <display7SEG0+0x394>)
 8001142:	f000 fe13 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114c:	485b      	ldr	r0, [pc, #364]	; (80012bc <display7SEG0+0x394>)
 800114e:	f000 fe0d 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001158:	4858      	ldr	r0, [pc, #352]	; (80012bc <display7SEG0+0x394>)
 800115a:	f000 fe07 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 800115e:	e0a8      	b.n	80012b2 <display7SEG0+0x38a>
	case 6:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8001160:	2200      	movs	r2, #0
 8001162:	2180      	movs	r1, #128	; 0x80
 8001164:	4855      	ldr	r0, [pc, #340]	; (80012bc <display7SEG0+0x394>)
 8001166:	f000 fe01 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_SET ) ;
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001170:	4852      	ldr	r0, [pc, #328]	; (80012bc <display7SEG0+0x394>)
 8001172:	f000 fdfb 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 7100 	mov.w	r1, #512	; 0x200
 800117c:	484f      	ldr	r0, [pc, #316]	; (80012bc <display7SEG0+0x394>)
 800117e:	f000 fdf5 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001188:	484c      	ldr	r0, [pc, #304]	; (80012bc <display7SEG0+0x394>)
 800118a:	f000 fdef 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001194:	4849      	ldr	r0, [pc, #292]	; (80012bc <display7SEG0+0x394>)
 8001196:	f000 fde9 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a0:	4846      	ldr	r0, [pc, #280]	; (80012bc <display7SEG0+0x394>)
 80011a2:	f000 fde3 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ac:	4843      	ldr	r0, [pc, #268]	; (80012bc <display7SEG0+0x394>)
 80011ae:	f000 fddd 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 80011b2:	e07e      	b.n	80012b2 <display7SEG0+0x38a>
	case 7:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 80011b4:	2200      	movs	r2, #0
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	4840      	ldr	r0, [pc, #256]	; (80012bc <display7SEG0+0x394>)
 80011ba:	f000 fdd7 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c4:	483d      	ldr	r0, [pc, #244]	; (80012bc <display7SEG0+0x394>)
 80011c6:	f000 fdd1 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d0:	483a      	ldr	r0, [pc, #232]	; (80012bc <display7SEG0+0x394>)
 80011d2:	f000 fdcb 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_SET ) ;
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011dc:	4837      	ldr	r0, [pc, #220]	; (80012bc <display7SEG0+0x394>)
 80011de:	f000 fdc5 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e8:	4834      	ldr	r0, [pc, #208]	; (80012bc <display7SEG0+0x394>)
 80011ea:	f000 fdbf 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_SET ) ;
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f4:	4831      	ldr	r0, [pc, #196]	; (80012bc <display7SEG0+0x394>)
 80011f6:	f000 fdb9 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_SET ) ;
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001200:	482e      	ldr	r0, [pc, #184]	; (80012bc <display7SEG0+0x394>)
 8001202:	f000 fdb3 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 8001206:	e054      	b.n	80012b2 <display7SEG0+0x38a>
	case 8:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 8001208:	2200      	movs	r2, #0
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	482b      	ldr	r0, [pc, #172]	; (80012bc <display7SEG0+0x394>)
 800120e:	f000 fdad 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001218:	4828      	ldr	r0, [pc, #160]	; (80012bc <display7SEG0+0x394>)
 800121a:	f000 fda7 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001224:	4825      	ldr	r0, [pc, #148]	; (80012bc <display7SEG0+0x394>)
 8001226:	f000 fda1 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001230:	4822      	ldr	r0, [pc, #136]	; (80012bc <display7SEG0+0x394>)
 8001232:	f000 fd9b 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_RESET ) ;
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800123c:	481f      	ldr	r0, [pc, #124]	; (80012bc <display7SEG0+0x394>)
 800123e:	f000 fd95 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001248:	481c      	ldr	r0, [pc, #112]	; (80012bc <display7SEG0+0x394>)
 800124a:	f000 fd8f 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001254:	4819      	ldr	r0, [pc, #100]	; (80012bc <display7SEG0+0x394>)
 8001256:	f000 fd89 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 800125a:	e02a      	b.n	80012b2 <display7SEG0+0x38a>
	case 9:
		HAL_GPIO_WritePin ( A0_GPIO_Port , A0_Pin , GPIO_PIN_RESET ) ;
 800125c:	2200      	movs	r2, #0
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	4816      	ldr	r0, [pc, #88]	; (80012bc <display7SEG0+0x394>)
 8001262:	f000 fd83 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B0_GPIO_Port , B0_Pin , GPIO_PIN_RESET ) ;
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126c:	4813      	ldr	r0, [pc, #76]	; (80012bc <display7SEG0+0x394>)
 800126e:	f000 fd7d 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C0_GPIO_Port , C0_Pin , GPIO_PIN_RESET ) ;
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001278:	4810      	ldr	r0, [pc, #64]	; (80012bc <display7SEG0+0x394>)
 800127a:	f000 fd77 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D0_GPIO_Port , D0_Pin , GPIO_PIN_RESET ) ;
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <display7SEG0+0x394>)
 8001286:	f000 fd71 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E0_GPIO_Port , E0_Pin , GPIO_PIN_SET ) ;
 800128a:	2201      	movs	r2, #1
 800128c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001290:	480a      	ldr	r0, [pc, #40]	; (80012bc <display7SEG0+0x394>)
 8001292:	f000 fd6b 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F0_GPIO_Port , F0_Pin , GPIO_PIN_RESET ) ;
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <display7SEG0+0x394>)
 800129e:	f000 fd65 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G0_GPIO_Port , G0_Pin , GPIO_PIN_RESET ) ;
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <display7SEG0+0x394>)
 80012aa:	f000 fd5f 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 80012ae:	e000      	b.n	80012b2 <display7SEG0+0x38a>
	default:
		break;
 80012b0:	bf00      	nop
	}
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40010c00 	.word	0x40010c00

080012c0 <updateClockBuffer>:
int timeYELLOW = 2;

int led_buffer[4] = {0, 0, 0, 0};


void updateClockBuffer(int num0, int num1, int num2, int num3) {
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	603b      	str	r3, [r7, #0]
	led_buffer[0] = num0;
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <updateClockBuffer+0x30>)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num1;
 80012d4:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <updateClockBuffer+0x30>)
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	6053      	str	r3, [r2, #4]
	led_buffer[2] = num2;
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <updateClockBuffer+0x30>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num3;
 80012e0:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <updateClockBuffer+0x30>)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	60d3      	str	r3, [r2, #12]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	20000064 	.word	0x20000064

080012f4 <update7SEG>:

void update7SEG(int index) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	switch (index) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d003      	beq.n	800130a <update7SEG+0x16>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d017      	beq.n	8001338 <update7SEG+0x44>
		display7SEG0(led_buffer[3]);
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
		break;
	default:
		break;
 8001308:	e02d      	b.n	8001366 <update7SEG+0x72>
		display7SEG(led_buffer[0]);
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <update7SEG+0x7c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fc7a 	bl	8000c08 <display7SEG>
		display7SEG0(led_buffer[1]);
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <update7SEG+0x7c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fe05 	bl	8000f28 <display7SEG0>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001324:	4813      	ldr	r0, [pc, #76]	; (8001374 <update7SEG+0x80>)
 8001326:	f000 fd21 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001330:	4810      	ldr	r0, [pc, #64]	; (8001374 <update7SEG+0x80>)
 8001332:	f000 fd1b 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 8001336:	e016      	b.n	8001366 <update7SEG+0x72>
		display7SEG(led_buffer[2]);
 8001338:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <update7SEG+0x7c>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fc63 	bl	8000c08 <display7SEG>
		display7SEG0(led_buffer[3]);
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <update7SEG+0x7c>)
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fdee 	bl	8000f28 <display7SEG0>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001352:	4808      	ldr	r0, [pc, #32]	; (8001374 <update7SEG+0x80>)
 8001354:	f000 fd0a 	bl	8001d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <update7SEG+0x80>)
 8001360:	f000 fd04 	bl	8001d6c <HAL_GPIO_WritePin>
		break;
 8001364:	bf00      	nop
	}
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000064 	.word	0x20000064
 8001374:	40010c00 	.word	0x40010c00

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137e:	f000 fa35 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001382:	f000 f851 	bl	8001428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001386:	f000 f8d9 	bl	800153c <MX_GPIO_Init>
  MX_TIM2_Init();
 800138a:	f000 f889 	bl	80014a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800138e:	4823      	ldr	r0, [pc, #140]	; (800141c <main+0xa4>)
 8001390:	f001 f94a 	bl	8002628 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state = 0;
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <main+0xa8>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
  int led_idx = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
  int index = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
  setTimer0(1000);
 80013a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a6:	f000 f931 	bl	800160c <setTimer0>
  while (1)
  {
    /* USER CODE END WHILE */
	  if (timer0_flag == 1) {
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <main+0xac>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d12e      	bne.n	8001410 <main+0x98>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d82d      	bhi.n	8001414 <main+0x9c>
 80013b8:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <main+0x48>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	080013d1 	.word	0x080013d1
 80013c4:	080013d9 	.word	0x080013d9
 80013c8:	080013f1 	.word	0x080013f1
 80013cc:	080013f9 	.word	0x080013f9
	  	  switch (led_idx) {
	  	  	case 0:
	  	  		led_idx++;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3301      	adds	r3, #1
 80013d4:	607b      	str	r3, [r7, #4]
	  	  		break;
 80013d6:	e01e      	b.n	8001416 <main+0x9e>
	  	  	case 1:
	  	  		index = 1;
 80013d8:	2301      	movs	r3, #1
 80013da:	603b      	str	r3, [r7, #0]
	  	  		update7SEG(index);
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f7ff ff89 	bl	80012f4 <update7SEG>
	  	  		setTimer0(500);
 80013e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013e6:	f000 f911 	bl	800160c <setTimer0>
	  	  		led_idx = 2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	607b      	str	r3, [r7, #4]
	  	  		break;
 80013ee:	e012      	b.n	8001416 <main+0x9e>
	  	  	case 2:
	  	  		led_idx++;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3301      	adds	r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
	  	  		break;
 80013f6:	e00e      	b.n	8001416 <main+0x9e>
	  	  	case 3:
	  	  		index = 2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	603b      	str	r3, [r7, #0]
	  	  		update7SEG(index);
 80013fc:	6838      	ldr	r0, [r7, #0]
 80013fe:	f7ff ff79 	bl	80012f4 <update7SEG>
	  	  		setTimer0(500);
 8001402:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001406:	f000 f901 	bl	800160c <setTimer0>
	  	  		led_idx = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
	  	  		break;
 800140e:	e002      	b.n	8001416 <main+0x9e>
	  	    default:
	  	  		break;
	  	  		  }
	  	  	  }
 8001410:	bf00      	nop
 8001412:	e000      	b.n	8001416 <main+0x9e>
	  	  		break;
 8001414:	bf00      	nop
	  fsm_run();
 8001416:	f7fe fecf 	bl	80001b8 <fsm_run>
	  if (timer0_flag == 1) {
 800141a:	e7c6      	b.n	80013aa <main+0x32>
 800141c:	2000008c 	.word	0x2000008c
 8001420:	20000060 	.word	0x20000060
 8001424:	20000078 	.word	0x20000078

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b090      	sub	sp, #64	; 0x40
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 0318 	add.w	r3, r7, #24
 8001432:	2228      	movs	r2, #40	; 0x28
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f001 fb74 	bl	8002b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144e:	2301      	movs	r3, #1
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001452:	2310      	movs	r3, #16
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001456:	2300      	movs	r3, #0
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145a:	f107 0318 	add.w	r3, r7, #24
 800145e:	4618      	mov	r0, r3
 8001460:	f000 fcb6 	bl	8001dd0 <HAL_RCC_OscConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800146a:	f000 f8c9 	bl	8001600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146e:	230f      	movs	r3, #15
 8001470:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f000 ff22 	bl	80022d0 <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001492:	f000 f8b5 	bl	8001600 <Error_Handler>
  }
}
 8001496:	bf00      	nop
 8001498:	3740      	adds	r7, #64	; 0x40
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	463b      	mov	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <MX_TIM2_Init+0x98>)
 80014be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <MX_TIM2_Init+0x98>)
 80014c6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80014ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_TIM2_Init+0x98>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <MX_TIM2_Init+0x98>)
 80014d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_TIM2_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MX_TIM2_Init+0x98>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e6:	4814      	ldr	r0, [pc, #80]	; (8001538 <MX_TIM2_Init+0x98>)
 80014e8:	f001 f84e 	bl	8002588 <HAL_TIM_Base_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014f2:	f000 f885 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4619      	mov	r1, r3
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <MX_TIM2_Init+0x98>)
 8001504:	f001 f8dc 	bl	80026c0 <HAL_TIM_ConfigClockSource>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800150e:	f000 f877 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800151a:	463b      	mov	r3, r7
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	; (8001538 <MX_TIM2_Init+0x98>)
 8001520:	f001 fa84 	bl	8002a2c <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800152a:	f000 f869 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000008c 	.word	0x2000008c

0800153c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <MX_GPIO_Init+0xb8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a27      	ldr	r2, [pc, #156]	; (80015f4 <MX_GPIO_Init+0xb8>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <MX_GPIO_Init+0xb8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001568:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <MX_GPIO_Init+0xb8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a21      	ldr	r2, [pc, #132]	; (80015f4 <MX_GPIO_Init+0xb8>)
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <MX_GPIO_Init+0xb8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_0_Pin
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001586:	481c      	ldr	r0, [pc, #112]	; (80015f8 <MX_GPIO_Init+0xbc>)
 8001588:	f000 fbf0 	bl	8001d6c <HAL_GPIO_WritePin>
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|D0_Pin
 800158c:	2200      	movs	r2, #0
 800158e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001592:	481a      	ldr	r0, [pc, #104]	; (80015fc <MX_GPIO_Init+0xc0>)
 8001594:	f000 fbea 	bl	8001d6c <HAL_GPIO_WritePin>
                          |E0_Pin|F0_Pin|G0_Pin|EN1_Pin
                          |EN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A0_Pin|B0_Pin|C0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin BUT3_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin|BUT3_Pin;
 8001598:	230e      	movs	r3, #14
 800159a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 0308 	add.w	r3, r7, #8
 80015a8:	4619      	mov	r1, r3
 80015aa:	4813      	ldr	r0, [pc, #76]	; (80015f8 <MX_GPIO_Init+0xbc>)
 80015ac:	f000 fa64 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_RED_0_Pin
                           LED_YELLOW_0_Pin LED_GREEN_0_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_0_Pin
 80015b0:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80015b4:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2302      	movs	r3, #2
 80015c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	4619      	mov	r1, r3
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <MX_GPIO_Init+0xbc>)
 80015ca:	f000 fa55 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D0_Pin
                           E0_Pin F0_Pin G0_Pin EN1_Pin
                           EN2_Pin D_Pin E_Pin F_Pin
                           G_Pin A0_Pin B0_Pin C0_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D0_Pin
 80015ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d2:	60bb      	str	r3, [r7, #8]
                          |E0_Pin|F0_Pin|G0_Pin|EN1_Pin
                          |EN2_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|A0_Pin|B0_Pin|C0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2302      	movs	r3, #2
 80015de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	4619      	mov	r1, r3
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_GPIO_Init+0xc0>)
 80015e8:	f000 fa46 	bl	8001a78 <HAL_GPIO_Init>

}
 80015ec:	bf00      	nop
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40010800 	.word	0x40010800
 80015fc:	40010c00 	.word	0x40010c00

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001608:	e7fe      	b.n	8001608 <Error_Handler+0x8>
	...

0800160c <setTimer0>:
int timer1_counter = 0;
int timer1_flag = 0;
int timer2_counter = 0;
int timer2_flag = 0;
int TIMER_CYCLE = 10;
void setTimer0(int duration){
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	timer0_counter = duration/ TIMER_CYCLE;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <setTimer0+0x28>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	fb92 f3f3 	sdiv	r3, r2, r3
 800161e:	4a06      	ldr	r2, [pc, #24]	; (8001638 <setTimer0+0x2c>)
 8001620:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <setTimer0+0x30>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	2000000c 	.word	0x2000000c
 8001638:	20000074 	.word	0x20000074
 800163c:	20000078 	.word	0x20000078

08001640 <setTimer1>:

void setTimer1(int duration){
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/ TIMER_CYCLE;
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <setTimer1+0x28>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001652:	4a06      	ldr	r2, [pc, #24]	; (800166c <setTimer1+0x2c>)
 8001654:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <setTimer1+0x30>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	2000000c 	.word	0x2000000c
 800166c:	2000007c 	.word	0x2000007c
 8001670:	20000080 	.word	0x20000080

08001674 <setTimer2>:

void setTimer2(int duration){
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/ TIMER_CYCLE;
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <setTimer2+0x28>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	fb92 f3f3 	sdiv	r3, r2, r3
 8001686:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <setTimer2+0x2c>)
 8001688:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <setTimer2+0x30>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	2000000c 	.word	0x2000000c
 80016a0:	20000084 	.word	0x20000084
 80016a4:	20000088 	.word	0x20000088

080016a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_MspInit+0x5c>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	4a14      	ldr	r2, [pc, #80]	; (8001704 <HAL_MspInit+0x5c>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6193      	str	r3, [r2, #24]
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_MspInit+0x5c>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_MspInit+0x5c>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_MspInit+0x5c>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	61d3      	str	r3, [r2, #28]
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <HAL_MspInit+0x5c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_MspInit+0x60>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_MspInit+0x60>)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40021000 	.word	0x40021000
 8001708:	40010000 	.word	0x40010000

0800170c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171c:	d10b      	bne.n	8001736 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_TIM_Base_MspInit+0x34>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a07      	ldr	r2, [pc, #28]	; (8001740 <HAL_TIM_Base_MspInit+0x34>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_TIM_Base_MspInit+0x34>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <NMI_Handler+0x4>

0800174a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <MemManage_Handler+0x4>

08001756 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <UsageFault_Handler+0x4>

08001762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178a:	f000 f875 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}

08001792 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
	...

080017a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a0:	f7ff fff7 	bl	8001792 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480b      	ldr	r0, [pc, #44]	; (80017d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017a6:	490c      	ldr	r1, [pc, #48]	; (80017d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017a8:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017bc:	4c09      	ldr	r4, [pc, #36]	; (80017e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ca:	f001 f987 	bl	8002adc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ce:	f7ff fdd3 	bl	8001378 <main>
  bx lr
 80017d2:	4770      	bx	lr
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80017dc:	08002b78 	.word	0x08002b78
  ldr r2, =_sbss
 80017e0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80017e4:	200000d8 	.word	0x200000d8

080017e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC1_2_IRQHandler>
	...

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_Init+0x28>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_Init+0x28>)
 80017f6:	f043 0310 	orr.w	r3, r3, #16
 80017fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f907 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	200f      	movs	r0, #15
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff ff4e 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40022000 	.word	0x40022000

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f911 	bl	8001a5e <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f8e7 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000010 	.word	0x20000010
 8001870:	20000018 	.word	0x20000018
 8001874:	20000014 	.word	0x20000014

08001878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_IncTick+0x1c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x20>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a03      	ldr	r2, [pc, #12]	; (8001898 <HAL_IncTick+0x20>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	20000018 	.word	0x20000018
 8001898:	200000d4 	.word	0x200000d4

0800189c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b02      	ldr	r3, [pc, #8]	; (80018ac <HAL_GetTick+0x10>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	200000d4 	.word	0x200000d4

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	; (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f7ff ff90 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff49 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff5e 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff90 	bl	8001968 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5f 	bl	8001914 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffb0 	bl	80019cc <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b08b      	sub	sp, #44	; 0x2c
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8a:	e148      	b.n	8001d1e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 8137 	bne.w	8001d18 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4aa3      	ldr	r2, [pc, #652]	; (8001d3c <HAL_GPIO_Init+0x2c4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d05e      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ab4:	4aa1      	ldr	r2, [pc, #644]	; (8001d3c <HAL_GPIO_Init+0x2c4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d875      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001aba:	4aa1      	ldr	r2, [pc, #644]	; (8001d40 <HAL_GPIO_Init+0x2c8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d058      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ac0:	4a9f      	ldr	r2, [pc, #636]	; (8001d40 <HAL_GPIO_Init+0x2c8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d86f      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001ac6:	4a9f      	ldr	r2, [pc, #636]	; (8001d44 <HAL_GPIO_Init+0x2cc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d052      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001acc:	4a9d      	ldr	r2, [pc, #628]	; (8001d44 <HAL_GPIO_Init+0x2cc>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d869      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001ad2:	4a9d      	ldr	r2, [pc, #628]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d04c      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ad8:	4a9b      	ldr	r2, [pc, #620]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d863      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001ade:	4a9b      	ldr	r2, [pc, #620]	; (8001d4c <HAL_GPIO_Init+0x2d4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d046      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ae4:	4a99      	ldr	r2, [pc, #612]	; (8001d4c <HAL_GPIO_Init+0x2d4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d85d      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001aea:	2b12      	cmp	r3, #18
 8001aec:	d82a      	bhi.n	8001b44 <HAL_GPIO_Init+0xcc>
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d859      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001af2:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <HAL_GPIO_Init+0x80>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b73 	.word	0x08001b73
 8001afc:	08001b4d 	.word	0x08001b4d
 8001b00:	08001b5f 	.word	0x08001b5f
 8001b04:	08001ba1 	.word	0x08001ba1
 8001b08:	08001ba7 	.word	0x08001ba7
 8001b0c:	08001ba7 	.word	0x08001ba7
 8001b10:	08001ba7 	.word	0x08001ba7
 8001b14:	08001ba7 	.word	0x08001ba7
 8001b18:	08001ba7 	.word	0x08001ba7
 8001b1c:	08001ba7 	.word	0x08001ba7
 8001b20:	08001ba7 	.word	0x08001ba7
 8001b24:	08001ba7 	.word	0x08001ba7
 8001b28:	08001ba7 	.word	0x08001ba7
 8001b2c:	08001ba7 	.word	0x08001ba7
 8001b30:	08001ba7 	.word	0x08001ba7
 8001b34:	08001ba7 	.word	0x08001ba7
 8001b38:	08001ba7 	.word	0x08001ba7
 8001b3c:	08001b55 	.word	0x08001b55
 8001b40:	08001b69 	.word	0x08001b69
 8001b44:	4a82      	ldr	r2, [pc, #520]	; (8001d50 <HAL_GPIO_Init+0x2d8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b4a:	e02c      	b.n	8001ba6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	623b      	str	r3, [r7, #32]
          break;
 8001b52:	e029      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	623b      	str	r3, [r7, #32]
          break;
 8001b5c:	e024      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	3308      	adds	r3, #8
 8001b64:	623b      	str	r3, [r7, #32]
          break;
 8001b66:	e01f      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	330c      	adds	r3, #12
 8001b6e:	623b      	str	r3, [r7, #32]
          break;
 8001b70:	e01a      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d102      	bne.n	8001b80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	623b      	str	r3, [r7, #32]
          break;
 8001b7e:	e013      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d105      	bne.n	8001b94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	611a      	str	r2, [r3, #16]
          break;
 8001b92:	e009      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b94:	2308      	movs	r3, #8
 8001b96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	615a      	str	r2, [r3, #20]
          break;
 8001b9e:	e003      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
          break;
 8001ba4:	e000      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          break;
 8001ba6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2bff      	cmp	r3, #255	; 0xff
 8001bac:	d801      	bhi.n	8001bb2 <HAL_GPIO_Init+0x13a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	e001      	b.n	8001bb6 <HAL_GPIO_Init+0x13e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2bff      	cmp	r3, #255	; 0xff
 8001bbc:	d802      	bhi.n	8001bc4 <HAL_GPIO_Init+0x14c>
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	e002      	b.n	8001bca <HAL_GPIO_Init+0x152>
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	3b08      	subs	r3, #8
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	210f      	movs	r1, #15
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	401a      	ands	r2, r3
 8001bdc:	6a39      	ldr	r1, [r7, #32]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	431a      	orrs	r2, r3
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8090 	beq.w	8001d18 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf8:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <HAL_GPIO_Init+0x2dc>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a55      	ldr	r2, [pc, #340]	; (8001d54 <HAL_GPIO_Init+0x2dc>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_GPIO_Init+0x2dc>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c10:	4a51      	ldr	r2, [pc, #324]	; (8001d58 <HAL_GPIO_Init+0x2e0>)
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	3302      	adds	r3, #2
 8001c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a49      	ldr	r2, [pc, #292]	; (8001d5c <HAL_GPIO_Init+0x2e4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d00d      	beq.n	8001c58 <HAL_GPIO_Init+0x1e0>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a48      	ldr	r2, [pc, #288]	; (8001d60 <HAL_GPIO_Init+0x2e8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d007      	beq.n	8001c54 <HAL_GPIO_Init+0x1dc>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a47      	ldr	r2, [pc, #284]	; (8001d64 <HAL_GPIO_Init+0x2ec>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d101      	bne.n	8001c50 <HAL_GPIO_Init+0x1d8>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e004      	b.n	8001c5a <HAL_GPIO_Init+0x1e2>
 8001c50:	2303      	movs	r3, #3
 8001c52:	e002      	b.n	8001c5a <HAL_GPIO_Init+0x1e2>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_GPIO_Init+0x1e2>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5c:	f002 0203 	and.w	r2, r2, #3
 8001c60:	0092      	lsls	r2, r2, #2
 8001c62:	4093      	lsls	r3, r2
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c6a:	493b      	ldr	r1, [pc, #236]	; (8001d58 <HAL_GPIO_Init+0x2e0>)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	4937      	ldr	r1, [pc, #220]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c92:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4933      	ldr	r1, [pc, #204]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	492d      	ldr	r1, [pc, #180]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60cb      	str	r3, [r1, #12]
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cba:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4929      	ldr	r1, [pc, #164]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4923      	ldr	r1, [pc, #140]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ce2:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	491f      	ldr	r1, [pc, #124]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d006      	beq.n	8001d0a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4919      	ldr	r1, [pc, #100]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	4915      	ldr	r1, [pc, #84]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f47f aeaf 	bne.w	8001a8c <HAL_GPIO_Init+0x14>
  }
}
 8001d2e:	bf00      	nop
 8001d30:	bf00      	nop
 8001d32:	372c      	adds	r7, #44	; 0x2c
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	10320000 	.word	0x10320000
 8001d40:	10310000 	.word	0x10310000
 8001d44:	10220000 	.word	0x10220000
 8001d48:	10210000 	.word	0x10210000
 8001d4c:	10120000 	.word	0x10120000
 8001d50:	10110000 	.word	0x10110000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	40010800 	.word	0x40010800
 8001d60:	40010c00 	.word	0x40010c00
 8001d64:	40011000 	.word	0x40011000
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	611a      	str	r2, [r3, #16]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4013      	ands	r3, r2
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43d9      	mvns	r1, r3
 8001dba:	887b      	ldrh	r3, [r7, #2]
 8001dbc:	400b      	ands	r3, r1
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	611a      	str	r2, [r3, #16]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e26c      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8087 	beq.w	8001efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df0:	4b92      	ldr	r3, [pc, #584]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d00c      	beq.n	8001e16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dfc:	4b8f      	ldr	r3, [pc, #572]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d112      	bne.n	8001e2e <HAL_RCC_OscConfig+0x5e>
 8001e08:	4b8c      	ldr	r3, [pc, #560]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e14:	d10b      	bne.n	8001e2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e16:	4b89      	ldr	r3, [pc, #548]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d06c      	beq.n	8001efc <HAL_RCC_OscConfig+0x12c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d168      	bne.n	8001efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e246      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x76>
 8001e38:	4b80      	ldr	r3, [pc, #512]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a7f      	ldr	r2, [pc, #508]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	e02e      	b.n	8001ea4 <HAL_RCC_OscConfig+0xd4>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x98>
 8001e4e:	4b7b      	ldr	r3, [pc, #492]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a7a      	ldr	r2, [pc, #488]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b78      	ldr	r3, [pc, #480]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a77      	ldr	r2, [pc, #476]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e01d      	b.n	8001ea4 <HAL_RCC_OscConfig+0xd4>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0xbc>
 8001e72:	4b72      	ldr	r3, [pc, #456]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a71      	ldr	r2, [pc, #452]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b6f      	ldr	r3, [pc, #444]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a6e      	ldr	r2, [pc, #440]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_OscConfig+0xd4>
 8001e8c:	4b6b      	ldr	r3, [pc, #428]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a6a      	ldr	r2, [pc, #424]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b68      	ldr	r3, [pc, #416]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a67      	ldr	r2, [pc, #412]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fcf6 	bl	800189c <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff fcf2 	bl	800189c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	; 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1fa      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0xe4>
 8001ed2:	e014      	b.n	8001efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fce2 	bl	800189c <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff fcde 	bl	800189c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e1e6      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	4b53      	ldr	r3, [pc, #332]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x10c>
 8001efa:	e000      	b.n	8001efe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d063      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f0a:	4b4c      	ldr	r3, [pc, #304]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00b      	beq.n	8001f2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f16:	4b49      	ldr	r3, [pc, #292]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d11c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x18c>
 8001f22:	4b46      	ldr	r3, [pc, #280]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d116      	bne.n	8001f5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	4b43      	ldr	r3, [pc, #268]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <HAL_RCC_OscConfig+0x176>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d001      	beq.n	8001f46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e1ba      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f46:	4b3d      	ldr	r3, [pc, #244]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4939      	ldr	r1, [pc, #228]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	e03a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d020      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f64:	4b36      	ldr	r3, [pc, #216]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff fc97 	bl	800189c <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f72:	f7ff fc93 	bl	800189c <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e19b      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f84:	4b2d      	ldr	r3, [pc, #180]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f90:	4b2a      	ldr	r3, [pc, #168]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4927      	ldr	r1, [pc, #156]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
 8001fa4:	e015      	b.n	8001fd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa6:	4b26      	ldr	r3, [pc, #152]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff fc76 	bl	800189c <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb4:	f7ff fc72 	bl	800189c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e17a      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d03a      	beq.n	8002054 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d019      	beq.n	800201a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7ff fc56 	bl	800189c <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7ff fc52 	bl	800189c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e15a      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002012:	2001      	movs	r0, #1
 8002014:	f000 fa9a 	bl	800254c <RCC_Delay>
 8002018:	e01c      	b.n	8002054 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7ff fc3c 	bl	800189c <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002026:	e00f      	b.n	8002048 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002028:	f7ff fc38 	bl	800189c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d908      	bls.n	8002048 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e140      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	42420000 	.word	0x42420000
 8002044:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002048:	4b9e      	ldr	r3, [pc, #632]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1e9      	bne.n	8002028 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80a6 	beq.w	80021ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002066:	4b97      	ldr	r3, [pc, #604]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10d      	bne.n	800208e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	4b94      	ldr	r3, [pc, #592]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4a93      	ldr	r2, [pc, #588]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207c:	61d3      	str	r3, [r2, #28]
 800207e:	4b91      	ldr	r3, [pc, #580]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208a:	2301      	movs	r3, #1
 800208c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b8e      	ldr	r3, [pc, #568]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d118      	bne.n	80020cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209a:	4b8b      	ldr	r3, [pc, #556]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a8a      	ldr	r2, [pc, #552]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a6:	f7ff fbf9 	bl	800189c <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ae:	f7ff fbf5 	bl	800189c <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b64      	cmp	r3, #100	; 0x64
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e0fd      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	4b81      	ldr	r3, [pc, #516]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x312>
 80020d4:	4b7b      	ldr	r3, [pc, #492]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a7a      	ldr	r2, [pc, #488]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6213      	str	r3, [r2, #32]
 80020e0:	e02d      	b.n	800213e <HAL_RCC_OscConfig+0x36e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x334>
 80020ea:	4b76      	ldr	r3, [pc, #472]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4a75      	ldr	r2, [pc, #468]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	6213      	str	r3, [r2, #32]
 80020f6:	4b73      	ldr	r3, [pc, #460]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4a72      	ldr	r2, [pc, #456]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	f023 0304 	bic.w	r3, r3, #4
 8002100:	6213      	str	r3, [r2, #32]
 8002102:	e01c      	b.n	800213e <HAL_RCC_OscConfig+0x36e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b05      	cmp	r3, #5
 800210a:	d10c      	bne.n	8002126 <HAL_RCC_OscConfig+0x356>
 800210c:	4b6d      	ldr	r3, [pc, #436]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4a6c      	ldr	r2, [pc, #432]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	6213      	str	r3, [r2, #32]
 8002118:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a69      	ldr	r2, [pc, #420]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6213      	str	r3, [r2, #32]
 8002124:	e00b      	b.n	800213e <HAL_RCC_OscConfig+0x36e>
 8002126:	4b67      	ldr	r3, [pc, #412]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	4a66      	ldr	r2, [pc, #408]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	6213      	str	r3, [r2, #32]
 8002132:	4b64      	ldr	r3, [pc, #400]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4a63      	ldr	r2, [pc, #396]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	f023 0304 	bic.w	r3, r3, #4
 800213c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d015      	beq.n	8002172 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002146:	f7ff fba9 	bl	800189c <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7ff fba5 	bl	800189c <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0ab      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002164:	4b57      	ldr	r3, [pc, #348]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ee      	beq.n	800214e <HAL_RCC_OscConfig+0x37e>
 8002170:	e014      	b.n	800219c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7ff fb93 	bl	800189c <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7ff fb8f 	bl	800189c <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e095      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002190:	4b4c      	ldr	r3, [pc, #304]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1ee      	bne.n	800217a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d105      	bne.n	80021ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a2:	4b48      	ldr	r3, [pc, #288]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	4a47      	ldr	r2, [pc, #284]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8081 	beq.w	80022ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b8:	4b42      	ldr	r3, [pc, #264]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d061      	beq.n	8002288 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d146      	bne.n	800225a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021cc:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <HAL_RCC_OscConfig+0x4fc>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7ff fb63 	bl	800189c <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021da:	f7ff fb5f 	bl	800189c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e067      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ec:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f0      	bne.n	80021da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002200:	d108      	bne.n	8002214 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002202:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	492d      	ldr	r1, [pc, #180]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002214:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a19      	ldr	r1, [r3, #32]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	430b      	orrs	r3, r1
 8002226:	4927      	ldr	r1, [pc, #156]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <HAL_RCC_OscConfig+0x4fc>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7ff fb33 	bl	800189c <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223a:	f7ff fb2f 	bl	800189c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e037      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x46a>
 8002258:	e02f      	b.n	80022ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <HAL_RCC_OscConfig+0x4fc>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fb1c 	bl	800189c <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7ff fb18 	bl	800189c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e020      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x498>
 8002286:	e018      	b.n	80022ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e013      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d001      	beq.n	80022ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40007000 	.word	0x40007000
 80022cc:	42420060 	.word	0x42420060

080022d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0d0      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e4:	4b6a      	ldr	r3, [pc, #424]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d910      	bls.n	8002314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b67      	ldr	r3, [pc, #412]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 0207 	bic.w	r2, r3, #7
 80022fa:	4965      	ldr	r1, [pc, #404]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b63      	ldr	r3, [pc, #396]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0b8      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d020      	beq.n	8002362 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800232c:	4b59      	ldr	r3, [pc, #356]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4a58      	ldr	r2, [pc, #352]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002336:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002344:	4b53      	ldr	r3, [pc, #332]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a52      	ldr	r2, [pc, #328]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800234e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002350:	4b50      	ldr	r3, [pc, #320]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	494d      	ldr	r1, [pc, #308]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d040      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b47      	ldr	r3, [pc, #284]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d115      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e07f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238e:	4b41      	ldr	r3, [pc, #260]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e073      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239e:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e06b      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ae:	4b39      	ldr	r3, [pc, #228]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f023 0203 	bic.w	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4936      	ldr	r1, [pc, #216]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c0:	f7ff fa6c 	bl	800189c <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c6:	e00a      	b.n	80023de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c8:	f7ff fa68 	bl	800189c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e053      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 020c 	and.w	r2, r3, #12
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d1eb      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f0:	4b27      	ldr	r3, [pc, #156]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d210      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 0207 	bic.w	r2, r3, #7
 8002406:	4922      	ldr	r1, [pc, #136]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e032      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4916      	ldr	r1, [pc, #88]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	4313      	orrs	r3, r2
 800243c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800244a:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	490e      	ldr	r1, [pc, #56]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800245e:	f000 f821 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8002462:	4602      	mov	r2, r0
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	490a      	ldr	r1, [pc, #40]	; (8002498 <HAL_RCC_ClockConfig+0x1c8>)
 8002470:	5ccb      	ldrb	r3, [r1, r3]
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	4a09      	ldr	r2, [pc, #36]	; (800249c <HAL_RCC_ClockConfig+0x1cc>)
 8002478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_RCC_ClockConfig+0x1d0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff f9ca 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40022000 	.word	0x40022000
 8002494:	40021000 	.word	0x40021000
 8002498:	08002b4c 	.word	0x08002b4c
 800249c:	20000010 	.word	0x20000010
 80024a0:	20000014 	.word	0x20000014

080024a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024be:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <HAL_RCC_GetSysClockFreq+0x94>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d002      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x30>
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d003      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x36>
 80024d2:	e027      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_RCC_GetSysClockFreq+0x98>)
 80024d6:	613b      	str	r3, [r7, #16]
      break;
 80024d8:	e027      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	0c9b      	lsrs	r3, r3, #18
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	4a17      	ldr	r2, [pc, #92]	; (8002540 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024e4:	5cd3      	ldrb	r3, [r2, r3]
 80024e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d010      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_RCC_GetSysClockFreq+0x94>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	0c5b      	lsrs	r3, r3, #17
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	4a11      	ldr	r2, [pc, #68]	; (8002544 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a0d      	ldr	r2, [pc, #52]	; (800253c <HAL_RCC_GetSysClockFreq+0x98>)
 8002506:	fb02 f203 	mul.w	r2, r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	e004      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a0c      	ldr	r2, [pc, #48]	; (8002548 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	613b      	str	r3, [r7, #16]
      break;
 8002522:	e002      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_RCC_GetSysClockFreq+0x98>)
 8002526:	613b      	str	r3, [r7, #16]
      break;
 8002528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800252a:	693b      	ldr	r3, [r7, #16]
}
 800252c:	4618      	mov	r0, r3
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	007a1200 	.word	0x007a1200
 8002540:	08002b5c 	.word	0x08002b5c
 8002544:	08002b6c 	.word	0x08002b6c
 8002548:	003d0900 	.word	0x003d0900

0800254c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002554:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <RCC_Delay+0x34>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <RCC_Delay+0x38>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0a5b      	lsrs	r3, r3, #9
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002568:	bf00      	nop
  }
  while (Delay --);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1e5a      	subs	r2, r3, #1
 800256e:	60fa      	str	r2, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f9      	bne.n	8002568 <RCC_Delay+0x1c>
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	20000010 	.word	0x20000010
 8002584:	10624dd3 	.word	0x10624dd3

08002588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e041      	b.n	800261e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff f8ac 	bl	800170c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3304      	adds	r3, #4
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f000 f942 	bl	8002850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d001      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e035      	b.n	80026ac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a16      	ldr	r2, [pc, #88]	; (80026b8 <HAL_TIM_Base_Start_IT+0x90>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d009      	beq.n	8002676 <HAL_TIM_Base_Start_IT+0x4e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266a:	d004      	beq.n	8002676 <HAL_TIM_Base_Start_IT+0x4e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a12      	ldr	r2, [pc, #72]	; (80026bc <HAL_TIM_Base_Start_IT+0x94>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d111      	bne.n	800269a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b06      	cmp	r3, #6
 8002686:	d010      	beq.n	80026aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002698:	e007      	b.n	80026aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40000400 	.word	0x40000400

080026c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_TIM_ConfigClockSource+0x1c>
 80026d8:	2302      	movs	r3, #2
 80026da:	e0b4      	b.n	8002846 <HAL_TIM_ConfigClockSource+0x186>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002714:	d03e      	beq.n	8002794 <HAL_TIM_ConfigClockSource+0xd4>
 8002716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800271a:	f200 8087 	bhi.w	800282c <HAL_TIM_ConfigClockSource+0x16c>
 800271e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002722:	f000 8086 	beq.w	8002832 <HAL_TIM_ConfigClockSource+0x172>
 8002726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272a:	d87f      	bhi.n	800282c <HAL_TIM_ConfigClockSource+0x16c>
 800272c:	2b70      	cmp	r3, #112	; 0x70
 800272e:	d01a      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0xa6>
 8002730:	2b70      	cmp	r3, #112	; 0x70
 8002732:	d87b      	bhi.n	800282c <HAL_TIM_ConfigClockSource+0x16c>
 8002734:	2b60      	cmp	r3, #96	; 0x60
 8002736:	d050      	beq.n	80027da <HAL_TIM_ConfigClockSource+0x11a>
 8002738:	2b60      	cmp	r3, #96	; 0x60
 800273a:	d877      	bhi.n	800282c <HAL_TIM_ConfigClockSource+0x16c>
 800273c:	2b50      	cmp	r3, #80	; 0x50
 800273e:	d03c      	beq.n	80027ba <HAL_TIM_ConfigClockSource+0xfa>
 8002740:	2b50      	cmp	r3, #80	; 0x50
 8002742:	d873      	bhi.n	800282c <HAL_TIM_ConfigClockSource+0x16c>
 8002744:	2b40      	cmp	r3, #64	; 0x40
 8002746:	d058      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x13a>
 8002748:	2b40      	cmp	r3, #64	; 0x40
 800274a:	d86f      	bhi.n	800282c <HAL_TIM_ConfigClockSource+0x16c>
 800274c:	2b30      	cmp	r3, #48	; 0x30
 800274e:	d064      	beq.n	800281a <HAL_TIM_ConfigClockSource+0x15a>
 8002750:	2b30      	cmp	r3, #48	; 0x30
 8002752:	d86b      	bhi.n	800282c <HAL_TIM_ConfigClockSource+0x16c>
 8002754:	2b20      	cmp	r3, #32
 8002756:	d060      	beq.n	800281a <HAL_TIM_ConfigClockSource+0x15a>
 8002758:	2b20      	cmp	r3, #32
 800275a:	d867      	bhi.n	800282c <HAL_TIM_ConfigClockSource+0x16c>
 800275c:	2b00      	cmp	r3, #0
 800275e:	d05c      	beq.n	800281a <HAL_TIM_ConfigClockSource+0x15a>
 8002760:	2b10      	cmp	r3, #16
 8002762:	d05a      	beq.n	800281a <HAL_TIM_ConfigClockSource+0x15a>
 8002764:	e062      	b.n	800282c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6899      	ldr	r1, [r3, #8]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f000 f93a 	bl	80029ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	609a      	str	r2, [r3, #8]
      break;
 8002792:	e04f      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	6899      	ldr	r1, [r3, #8]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f000 f923 	bl	80029ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027b6:	609a      	str	r2, [r3, #8]
      break;
 80027b8:	e03c      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6859      	ldr	r1, [r3, #4]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	461a      	mov	r2, r3
 80027c8:	f000 f89a 	bl	8002900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2150      	movs	r1, #80	; 0x50
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f8f1 	bl	80029ba <TIM_ITRx_SetConfig>
      break;
 80027d8:	e02c      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6859      	ldr	r1, [r3, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f000 f8b8 	bl	800295c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2160      	movs	r1, #96	; 0x60
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f8e1 	bl	80029ba <TIM_ITRx_SetConfig>
      break;
 80027f8:	e01c      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6859      	ldr	r1, [r3, #4]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	461a      	mov	r2, r3
 8002808:	f000 f87a 	bl	8002900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2140      	movs	r1, #64	; 0x40
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f8d1 	bl	80029ba <TIM_ITRx_SetConfig>
      break;
 8002818:	e00c      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4619      	mov	r1, r3
 8002824:	4610      	mov	r0, r2
 8002826:	f000 f8c8 	bl	80029ba <TIM_ITRx_SetConfig>
      break;
 800282a:	e003      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      break;
 8002830:	e000      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a25      	ldr	r2, [pc, #148]	; (80028f8 <TIM_Base_SetConfig+0xa8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d007      	beq.n	8002878 <TIM_Base_SetConfig+0x28>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286e:	d003      	beq.n	8002878 <TIM_Base_SetConfig+0x28>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a22      	ldr	r2, [pc, #136]	; (80028fc <TIM_Base_SetConfig+0xac>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d108      	bne.n	800288a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a1a      	ldr	r2, [pc, #104]	; (80028f8 <TIM_Base_SetConfig+0xa8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <TIM_Base_SetConfig+0x52>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002898:	d003      	beq.n	80028a2 <TIM_Base_SetConfig+0x52>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a17      	ldr	r2, [pc, #92]	; (80028fc <TIM_Base_SetConfig+0xac>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d108      	bne.n	80028b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <TIM_Base_SetConfig+0xa8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d103      	bne.n	80028e8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	615a      	str	r2, [r3, #20]
}
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	40012c00 	.word	0x40012c00
 80028fc:	40000400 	.word	0x40000400

08002900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	f023 0201 	bic.w	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800292a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f023 030a 	bic.w	r3, r3, #10
 800293c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
 8002944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	621a      	str	r2, [r3, #32]
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	f023 0210 	bic.w	r2, r3, #16
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	031b      	lsls	r3, r3, #12
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002998:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	621a      	str	r2, [r3, #32]
}
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f043 0307 	orr.w	r3, r3, #7
 80029dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	609a      	str	r2, [r3, #8]
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b087      	sub	sp, #28
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	021a      	lsls	r2, r3, #8
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	609a      	str	r2, [r3, #8]
}
 8002a22:	bf00      	nop
 8002a24:	371c      	adds	r7, #28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e041      	b.n	8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d009      	beq.n	8002a9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a90:	d004      	beq.n	8002a9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d10c      	bne.n	8002ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40012c00 	.word	0x40012c00
 8002ad8:	40000400 	.word	0x40000400

08002adc <__libc_init_array>:
 8002adc:	b570      	push	{r4, r5, r6, lr}
 8002ade:	2600      	movs	r6, #0
 8002ae0:	4d0c      	ldr	r5, [pc, #48]	; (8002b14 <__libc_init_array+0x38>)
 8002ae2:	4c0d      	ldr	r4, [pc, #52]	; (8002b18 <__libc_init_array+0x3c>)
 8002ae4:	1b64      	subs	r4, r4, r5
 8002ae6:	10a4      	asrs	r4, r4, #2
 8002ae8:	42a6      	cmp	r6, r4
 8002aea:	d109      	bne.n	8002b00 <__libc_init_array+0x24>
 8002aec:	f000 f822 	bl	8002b34 <_init>
 8002af0:	2600      	movs	r6, #0
 8002af2:	4d0a      	ldr	r5, [pc, #40]	; (8002b1c <__libc_init_array+0x40>)
 8002af4:	4c0a      	ldr	r4, [pc, #40]	; (8002b20 <__libc_init_array+0x44>)
 8002af6:	1b64      	subs	r4, r4, r5
 8002af8:	10a4      	asrs	r4, r4, #2
 8002afa:	42a6      	cmp	r6, r4
 8002afc:	d105      	bne.n	8002b0a <__libc_init_array+0x2e>
 8002afe:	bd70      	pop	{r4, r5, r6, pc}
 8002b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b04:	4798      	blx	r3
 8002b06:	3601      	adds	r6, #1
 8002b08:	e7ee      	b.n	8002ae8 <__libc_init_array+0xc>
 8002b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b0e:	4798      	blx	r3
 8002b10:	3601      	adds	r6, #1
 8002b12:	e7f2      	b.n	8002afa <__libc_init_array+0x1e>
 8002b14:	08002b70 	.word	0x08002b70
 8002b18:	08002b70 	.word	0x08002b70
 8002b1c:	08002b70 	.word	0x08002b70
 8002b20:	08002b74 	.word	0x08002b74

08002b24 <memset>:
 8002b24:	4603      	mov	r3, r0
 8002b26:	4402      	add	r2, r0
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d100      	bne.n	8002b2e <memset+0xa>
 8002b2c:	4770      	bx	lr
 8002b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b32:	e7f9      	b.n	8002b28 <memset+0x4>

08002b34 <_init>:
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b36:	bf00      	nop
 8002b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3a:	bc08      	pop	{r3}
 8002b3c:	469e      	mov	lr, r3
 8002b3e:	4770      	bx	lr

08002b40 <_fini>:
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b42:	bf00      	nop
 8002b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b46:	bc08      	pop	{r3}
 8002b48:	469e      	mov	lr, r3
 8002b4a:	4770      	bx	lr
